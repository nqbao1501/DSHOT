
Dshot_BitbangImplementation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cd0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08005e60  08005e60  00006e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f3c  08005f3c  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  08005f3c  08005f3c  00006f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f44  08005f44  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f44  08005f44  00006f44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005f48  08005f48  00006f48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005f4c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000705c  2**0
                  CONTENTS
 10 .bss          00000a90  2000005c  2000005c  0000705c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000aec  20000aec  0000705c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fc56  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002432  00000000  00000000  00016ce2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e68  00000000  00000000  00019118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b47  00000000  00000000  00019f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000229b5  00000000  00000000  0001aac7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000118b8  00000000  00000000  0003d47c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d8395  00000000  00000000  0004ed34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001270c9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000041cc  00000000  00000000  0012710c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007a  00000000  00000000  0012b2d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005e48 	.word	0x08005e48

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08005e48 	.word	0x08005e48

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <MemBuffer_init>:

	HAL_TIM_Base_Start(&htim1);
	//HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_1);
	//HAL_DMA_Start_IT(&hdma_tim1_up, (uint32_t)DMA_Buffer, (uint32_t)&(GPIOE->BSRR), FRAME_BIT_NUMBER * BIT_SECTION_NUMBER);
}
void MemBuffer_init(uint32_t *MemoryBuffer){
 8000570:	b480      	push	{r7}
 8000572:	b085      	sub	sp, #20
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
	for (uint16_t i = 0; i < FRAME_BIT_NUMBER * BIT_SECTION_NUMBER; i++){
 8000578:	2300      	movs	r3, #0
 800057a:	81fb      	strh	r3, [r7, #14]
 800057c:	e008      	b.n	8000590 <MemBuffer_init+0x20>
		MemoryBuffer[i] = 0x00;
 800057e:	89fb      	ldrh	r3, [r7, #14]
 8000580:	009b      	lsls	r3, r3, #2
 8000582:	687a      	ldr	r2, [r7, #4]
 8000584:	4413      	add	r3, r2
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
	for (uint16_t i = 0; i < FRAME_BIT_NUMBER * BIT_SECTION_NUMBER; i++){
 800058a:	89fb      	ldrh	r3, [r7, #14]
 800058c:	3301      	adds	r3, #1
 800058e:	81fb      	strh	r3, [r7, #14]
 8000590:	89fb      	ldrh	r3, [r7, #14]
 8000592:	2b8f      	cmp	r3, #143	@ 0x8f
 8000594:	d9f3      	bls.n	800057e <MemBuffer_init+0xe>
	}
	for (uint8_t i = 0; i < 16; i++){
 8000596:	2300      	movs	r3, #0
 8000598:	737b      	strb	r3, [r7, #13]
 800059a:	e014      	b.n	80005c6 <MemBuffer_init+0x56>
		MemoryBuffer[i * BIT_SECTION_NUMBER] = RESET_GPIO_PIN_9;
 800059c:	7b7b      	ldrb	r3, [r7, #13]
 800059e:	015b      	lsls	r3, r3, #5
 80005a0:	687a      	ldr	r2, [r7, #4]
 80005a2:	4413      	add	r3, r2
 80005a4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80005a8:	601a      	str	r2, [r3, #0]

		MemoryBuffer[i * BIT_SECTION_NUMBER + BIT_1_HIGH_SECTION_NUMBER] = SET_GPIO_PIN_9;
 80005aa:	7b7b      	ldrb	r3, [r7, #13]
 80005ac:	00db      	lsls	r3, r3, #3
 80005ae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80005b2:	3305      	adds	r3, #5
 80005b4:	009b      	lsls	r3, r3, #2
 80005b6:	687a      	ldr	r2, [r7, #4]
 80005b8:	4413      	add	r3, r2
 80005ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80005be:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < 16; i++){
 80005c0:	7b7b      	ldrb	r3, [r7, #13]
 80005c2:	3301      	adds	r3, #1
 80005c4:	737b      	strb	r3, [r7, #13]
 80005c6:	7b7b      	ldrb	r3, [r7, #13]
 80005c8:	2b0f      	cmp	r3, #15
 80005ca:	d9e7      	bls.n	800059c <MemBuffer_init+0x2c>
	}
}
 80005cc:	bf00      	nop
 80005ce:	bf00      	nop
 80005d0:	3714      	adds	r7, #20
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr

080005da <calculateCRCandTelemtryBit>:
uint16_t calculateCRCandTelemtryBit(uint16_t value){
 80005da:	b480      	push	{r7}
 80005dc:	b083      	sub	sp, #12
 80005de:	af00      	add	r7, sp, #0
 80005e0:	4603      	mov	r3, r0
 80005e2:	80fb      	strh	r3, [r7, #6]
	value = value << 1;
 80005e4:	88fb      	ldrh	r3, [r7, #6]
 80005e6:	005b      	lsls	r3, r3, #1
 80005e8:	80fb      	strh	r3, [r7, #6]
	return (~(value ^ (value >> 4) ^ (value >> 8))) & 0x0F;
 80005ea:	88fb      	ldrh	r3, [r7, #6]
 80005ec:	091b      	lsrs	r3, r3, #4
 80005ee:	b29a      	uxth	r2, r3
 80005f0:	88fb      	ldrh	r3, [r7, #6]
 80005f2:	4053      	eors	r3, r2
 80005f4:	b29a      	uxth	r2, r3
 80005f6:	88fb      	ldrh	r3, [r7, #6]
 80005f8:	0a1b      	lsrs	r3, r3, #8
 80005fa:	b29b      	uxth	r3, r3
 80005fc:	4053      	eors	r3, r2
 80005fe:	b29b      	uxth	r3, r3
 8000600:	43db      	mvns	r3, r3
 8000602:	b29b      	uxth	r3, r3
 8000604:	f003 030f 	and.w	r3, r3, #15
 8000608:	b29b      	uxth	r3, r3
}
 800060a:	4618      	mov	r0, r3
 800060c:	370c      	adds	r7, #12
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr

08000616 <getDshotFrame>:
uint16_t getDshotFrame(uint16_t value){
 8000616:	b590      	push	{r4, r7, lr}
 8000618:	b083      	sub	sp, #12
 800061a:	af00      	add	r7, sp, #0
 800061c:	4603      	mov	r3, r0
 800061e:	80fb      	strh	r3, [r7, #6]
	return ((value << 5) | calculateCRCandTelemtryBit(value));
 8000620:	88fb      	ldrh	r3, [r7, #6]
 8000622:	015b      	lsls	r3, r3, #5
 8000624:	b21c      	sxth	r4, r3
 8000626:	88fb      	ldrh	r3, [r7, #6]
 8000628:	4618      	mov	r0, r3
 800062a:	f7ff ffd6 	bl	80005da <calculateCRCandTelemtryBit>
 800062e:	4603      	mov	r3, r0
 8000630:	b21b      	sxth	r3, r3
 8000632:	4323      	orrs	r3, r4
 8000634:	b21b      	sxth	r3, r3
 8000636:	b29b      	uxth	r3, r3
}
 8000638:	4618      	mov	r0, r3
 800063a:	370c      	adds	r7, #12
 800063c:	46bd      	mov	sp, r7
 800063e:	bd90      	pop	{r4, r7, pc}

08000640 <DshotFrameToMemBuffer>:

void DshotFrameToMemBuffer(uint16_t DshotFrame, uint32_t *MemoryBuffer){
 8000640:	b480      	push	{r7}
 8000642:	b085      	sub	sp, #20
 8000644:	af00      	add	r7, sp, #0
 8000646:	4603      	mov	r3, r0
 8000648:	6039      	str	r1, [r7, #0]
 800064a:	80fb      	strh	r3, [r7, #6]
	for (uint8_t i = 0; i <16; i++){
 800064c:	2300      	movs	r3, #0
 800064e:	73fb      	strb	r3, [r7, #15]
 8000650:	e022      	b.n	8000698 <DshotFrameToMemBuffer+0x58>
        if (1 << (15 - i) & DshotFrame)
 8000652:	88fa      	ldrh	r2, [r7, #6]
 8000654:	7bfb      	ldrb	r3, [r7, #15]
 8000656:	f1c3 030f 	rsb	r3, r3, #15
 800065a:	fa42 f303 	asr.w	r3, r2, r3
 800065e:	f003 0301 	and.w	r3, r3, #1
 8000662:	2b00      	cmp	r3, #0
 8000664:	d00a      	beq.n	800067c <DshotFrameToMemBuffer+0x3c>
        {
        	MemoryBuffer[i * BIT_SECTION_NUMBER + BIT_0_HIGH_SECTION_NUMBER] = 0x00;
 8000666:	7bfb      	ldrb	r3, [r7, #15]
 8000668:	00db      	lsls	r3, r3, #3
 800066a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800066e:	3302      	adds	r3, #2
 8000670:	009b      	lsls	r3, r3, #2
 8000672:	683a      	ldr	r2, [r7, #0]
 8000674:	4413      	add	r3, r2
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
 800067a:	e00a      	b.n	8000692 <DshotFrameToMemBuffer+0x52>
        }
        else
        {
        	MemoryBuffer[i * BIT_SECTION_NUMBER + BIT_0_HIGH_SECTION_NUMBER] = SET_GPIO_PIN_9;
 800067c:	7bfb      	ldrb	r3, [r7, #15]
 800067e:	00db      	lsls	r3, r3, #3
 8000680:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000684:	3302      	adds	r3, #2
 8000686:	009b      	lsls	r3, r3, #2
 8000688:	683a      	ldr	r2, [r7, #0]
 800068a:	4413      	add	r3, r2
 800068c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000690:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i <16; i++){
 8000692:	7bfb      	ldrb	r3, [r7, #15]
 8000694:	3301      	adds	r3, #1
 8000696:	73fb      	strb	r3, [r7, #15]
 8000698:	7bfb      	ldrb	r3, [r7, #15]
 800069a:	2b0f      	cmp	r3, #15
 800069c:	d9d9      	bls.n	8000652 <DshotFrameToMemBuffer+0x12>
        }
	}
}
 800069e:	bf00      	nop
 80006a0:	bf00      	nop
 80006a2:	3714      	adds	r7, #20
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr

080006ac <get_BDshot_response>:

uint32_t get_BDshot_response(uint32_t raw_buffer[], const uint8_t motor_shift)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b089      	sub	sp, #36	@ 0x24
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	460b      	mov	r3, r1
 80006b6:	70fb      	strb	r3, [r7, #3]
    uint32_t* buffer_end = raw_buffer + 300;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	f503 6396 	add.w	r3, r3, #1200	@ 0x4b0
 80006be:	613b      	str	r3, [r7, #16]
    while (raw_buffer < buffer_end)
 80006c0:	e131      	b.n	8000926 <get_BDshot_response+0x27a>
    {
        // reception starts just after transmission, so there is a lot of HIGH samples. Find first LOW bit:
        if (__builtin_expect(!(*raw_buffer++ & (1 << motor_shift)), 0) ||
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	1d1a      	adds	r2, r3, #4
 80006c6:	607a      	str	r2, [r7, #4]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	78fa      	ldrb	r2, [r7, #3]
 80006cc:	2101      	movs	r1, #1
 80006ce:	fa01 f202 	lsl.w	r2, r1, r2
 80006d2:	4013      	ands	r3, r2
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	bf0c      	ite	eq
 80006d8:	2301      	moveq	r3, #1
 80006da:	2300      	movne	r3, #0
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d130      	bne.n	8000744 <get_BDshot_response+0x98>
            __builtin_expect(!(*raw_buffer++ & (1 << motor_shift)), 0) ||
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	1d1a      	adds	r2, r3, #4
 80006e6:	607a      	str	r2, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	78fa      	ldrb	r2, [r7, #3]
 80006ec:	2101      	movs	r1, #1
 80006ee:	fa01 f202 	lsl.w	r2, r1, r2
 80006f2:	4013      	ands	r3, r2
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	bf0c      	ite	eq
 80006f8:	2301      	moveq	r3, #1
 80006fa:	2300      	movne	r3, #0
 80006fc:	b2db      	uxtb	r3, r3
        if (__builtin_expect(!(*raw_buffer++ & (1 << motor_shift)), 0) ||
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d120      	bne.n	8000744 <get_BDshot_response+0x98>
            __builtin_expect(!(*raw_buffer++ & (1 << motor_shift)), 0) ||
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	1d1a      	adds	r2, r3, #4
 8000706:	607a      	str	r2, [r7, #4]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	78fa      	ldrb	r2, [r7, #3]
 800070c:	2101      	movs	r1, #1
 800070e:	fa01 f202 	lsl.w	r2, r1, r2
 8000712:	4013      	ands	r3, r2
 8000714:	2b00      	cmp	r3, #0
 8000716:	bf0c      	ite	eq
 8000718:	2301      	moveq	r3, #1
 800071a:	2300      	movne	r3, #0
 800071c:	b2db      	uxtb	r3, r3
            __builtin_expect(!(*raw_buffer++ & (1 << motor_shift)), 0) ||
 800071e:	2b00      	cmp	r3, #0
 8000720:	d110      	bne.n	8000744 <get_BDshot_response+0x98>
            __builtin_expect(!(*raw_buffer++ & (1 << motor_shift)), 0))
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	1d1a      	adds	r2, r3, #4
 8000726:	607a      	str	r2, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	78fa      	ldrb	r2, [r7, #3]
 800072c:	2101      	movs	r1, #1
 800072e:	fa01 f202 	lsl.w	r2, r1, r2
 8000732:	4013      	ands	r3, r2
 8000734:	2b00      	cmp	r3, #0
 8000736:	bf0c      	ite	eq
 8000738:	2301      	moveq	r3, #1
 800073a:	2300      	movne	r3, #0
 800073c:	b2db      	uxtb	r3, r3
            __builtin_expect(!(*raw_buffer++ & (1 << motor_shift)), 0) ||
 800073e:	2b00      	cmp	r3, #0
 8000740:	f000 80f1 	beq.w	8000926 <get_BDshot_response+0x27a>
        {   // if LOW edge was detected:
            uint32_t* buffer_previous = raw_buffer - 1;
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	3b04      	subs	r3, #4
 8000748:	61fb      	str	r3, [r7, #28]
            // set buffer end as current buffer + length of BDshot response:
            buffer_end = raw_buffer + BDSHOT_RESPONSE_LENGTH * 6;
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8000750:	613b      	str	r3, [r7, #16]
            uint32_t motor_response = 0;
 8000752:	2300      	movs	r3, #0
 8000754:	61bb      	str	r3, [r7, #24]
            uint8_t bits = 0;
 8000756:	2300      	movs	r3, #0
 8000758:	75fb      	strb	r3, [r7, #23]
            while (raw_buffer <= buffer_end)
 800075a:	e0c5      	b.n	80008e8 <get_BDshot_response+0x23c>
            {
                // look for the high edge:
                if (__builtin_expect((*raw_buffer++ & (1 << motor_shift)), 0) ||
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	1d1a      	adds	r2, r3, #4
 8000760:	607a      	str	r2, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	78fa      	ldrb	r2, [r7, #3]
 8000766:	2101      	movs	r1, #1
 8000768:	fa01 f202 	lsl.w	r2, r1, r2
 800076c:	4013      	ands	r3, r2
 800076e:	2b00      	cmp	r3, #0
 8000770:	d121      	bne.n	80007b6 <get_BDshot_response+0x10a>
                    __builtin_expect((*raw_buffer++ & (1 << motor_shift)), 0) ||
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	1d1a      	adds	r2, r3, #4
 8000776:	607a      	str	r2, [r7, #4]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	78fa      	ldrb	r2, [r7, #3]
 800077c:	2101      	movs	r1, #1
 800077e:	fa01 f202 	lsl.w	r2, r1, r2
 8000782:	4013      	ands	r3, r2
                if (__builtin_expect((*raw_buffer++ & (1 << motor_shift)), 0) ||
 8000784:	2b00      	cmp	r3, #0
 8000786:	d116      	bne.n	80007b6 <get_BDshot_response+0x10a>
                    __builtin_expect((*raw_buffer++ & (1 << motor_shift)), 0) ||
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	1d1a      	adds	r2, r3, #4
 800078c:	607a      	str	r2, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	78fa      	ldrb	r2, [r7, #3]
 8000792:	2101      	movs	r1, #1
 8000794:	fa01 f202 	lsl.w	r2, r1, r2
 8000798:	4013      	ands	r3, r2
                    __builtin_expect((*raw_buffer++ & (1 << motor_shift)), 0) ||
 800079a:	2b00      	cmp	r3, #0
 800079c:	d10b      	bne.n	80007b6 <get_BDshot_response+0x10a>
                    __builtin_expect((*raw_buffer++ & (1 << motor_shift)), 0))
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	1d1a      	adds	r2, r3, #4
 80007a2:	607a      	str	r2, [r7, #4]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	78fa      	ldrb	r2, [r7, #3]
 80007a8:	2101      	movs	r1, #1
 80007aa:	fa01 f202 	lsl.w	r2, r1, r2
 80007ae:	4013      	ands	r3, r2
                    __builtin_expect((*raw_buffer++ & (1 << motor_shift)), 0) ||
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	f000 8099 	beq.w	80008e8 <get_BDshot_response+0x23c>
                {
                    if (raw_buffer <= buffer_end) {
 80007b6:	687a      	ldr	r2, [r7, #4]
 80007b8:	693b      	ldr	r3, [r7, #16]
 80007ba:	429a      	cmp	r2, r3
 80007bc:	f200 8094 	bhi.w	80008e8 <get_BDshot_response+0x23c>
                        uint8_t len = MAX(((raw_buffer - buffer_previous)+3) / 6, 1); // how many bits has the same value (for int rounding 1 is added)
 80007c0:	687a      	ldr	r2, [r7, #4]
 80007c2:	69fb      	ldr	r3, [r7, #28]
 80007c4:	1ad3      	subs	r3, r2, r3
 80007c6:	2b20      	cmp	r3, #32
 80007c8:	dd0b      	ble.n	80007e2 <get_BDshot_response+0x136>
 80007ca:	687a      	ldr	r2, [r7, #4]
 80007cc:	69fb      	ldr	r3, [r7, #28]
 80007ce:	1ad3      	subs	r3, r2, r3
 80007d0:	109b      	asrs	r3, r3, #2
 80007d2:	3303      	adds	r3, #3
 80007d4:	4a5a      	ldr	r2, [pc, #360]	@ (8000940 <get_BDshot_response+0x294>)
 80007d6:	fb82 1203 	smull	r1, r2, r2, r3
 80007da:	17db      	asrs	r3, r3, #31
 80007dc:	1ad3      	subs	r3, r2, r3
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	e000      	b.n	80007e4 <get_BDshot_response+0x138>
 80007e2:	2301      	movs	r3, #1
 80007e4:	73fb      	strb	r3, [r7, #15]
                        bits += len;
 80007e6:	7dfa      	ldrb	r2, [r7, #23]
 80007e8:	7bfb      	ldrb	r3, [r7, #15]
 80007ea:	4413      	add	r3, r2
 80007ec:	75fb      	strb	r3, [r7, #23]
                        motor_response <<= len;
 80007ee:	7bfb      	ldrb	r3, [r7, #15]
 80007f0:	69ba      	ldr	r2, [r7, #24]
 80007f2:	fa02 f303 	lsl.w	r3, r2, r3
 80007f6:	61bb      	str	r3, [r7, #24]
                        buffer_previous = raw_buffer - 1;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	3b04      	subs	r3, #4
 80007fc:	61fb      	str	r3, [r7, #28]
                        // then look for the low edge:
                        while (raw_buffer < buffer_end)
 80007fe:	e06d      	b.n	80008dc <get_BDshot_response+0x230>
                        {
                            if (__builtin_expect(!(*raw_buffer++ & (1 << motor_shift)), 0) ||
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	1d1a      	adds	r2, r3, #4
 8000804:	607a      	str	r2, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	78fa      	ldrb	r2, [r7, #3]
 800080a:	2101      	movs	r1, #1
 800080c:	fa01 f202 	lsl.w	r2, r1, r2
 8000810:	4013      	ands	r3, r2
 8000812:	2b00      	cmp	r3, #0
 8000814:	bf0c      	ite	eq
 8000816:	2301      	moveq	r3, #1
 8000818:	2300      	movne	r3, #0
 800081a:	b2db      	uxtb	r3, r3
 800081c:	2b00      	cmp	r3, #0
 800081e:	d12f      	bne.n	8000880 <get_BDshot_response+0x1d4>
                                __builtin_expect(!(*raw_buffer++ & (1 << motor_shift)), 0) ||
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	1d1a      	adds	r2, r3, #4
 8000824:	607a      	str	r2, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	78fa      	ldrb	r2, [r7, #3]
 800082a:	2101      	movs	r1, #1
 800082c:	fa01 f202 	lsl.w	r2, r1, r2
 8000830:	4013      	ands	r3, r2
 8000832:	2b00      	cmp	r3, #0
 8000834:	bf0c      	ite	eq
 8000836:	2301      	moveq	r3, #1
 8000838:	2300      	movne	r3, #0
 800083a:	b2db      	uxtb	r3, r3
                            if (__builtin_expect(!(*raw_buffer++ & (1 << motor_shift)), 0) ||
 800083c:	2b00      	cmp	r3, #0
 800083e:	d11f      	bne.n	8000880 <get_BDshot_response+0x1d4>
                                __builtin_expect(!(*raw_buffer++ & (1 << motor_shift)), 0) ||
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	1d1a      	adds	r2, r3, #4
 8000844:	607a      	str	r2, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	78fa      	ldrb	r2, [r7, #3]
 800084a:	2101      	movs	r1, #1
 800084c:	fa01 f202 	lsl.w	r2, r1, r2
 8000850:	4013      	ands	r3, r2
 8000852:	2b00      	cmp	r3, #0
 8000854:	bf0c      	ite	eq
 8000856:	2301      	moveq	r3, #1
 8000858:	2300      	movne	r3, #0
 800085a:	b2db      	uxtb	r3, r3
                                __builtin_expect(!(*raw_buffer++ & (1 << motor_shift)), 0) ||
 800085c:	2b00      	cmp	r3, #0
 800085e:	d10f      	bne.n	8000880 <get_BDshot_response+0x1d4>
                                __builtin_expect(!(*raw_buffer++ & (1 << motor_shift)), 0)) {
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	1d1a      	adds	r2, r3, #4
 8000864:	607a      	str	r2, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	78fa      	ldrb	r2, [r7, #3]
 800086a:	2101      	movs	r1, #1
 800086c:	fa01 f202 	lsl.w	r2, r1, r2
 8000870:	4013      	ands	r3, r2
 8000872:	2b00      	cmp	r3, #0
 8000874:	bf0c      	ite	eq
 8000876:	2301      	moveq	r3, #1
 8000878:	2300      	movne	r3, #0
 800087a:	b2db      	uxtb	r3, r3
                                __builtin_expect(!(*raw_buffer++ & (1 << motor_shift)), 0) ||
 800087c:	2b00      	cmp	r3, #0
 800087e:	d02d      	beq.n	80008dc <get_BDshot_response+0x230>
                                if (raw_buffer <= buffer_end) {
 8000880:	687a      	ldr	r2, [r7, #4]
 8000882:	693b      	ldr	r3, [r7, #16]
 8000884:	429a      	cmp	r2, r3
 8000886:	d82e      	bhi.n	80008e6 <get_BDshot_response+0x23a>
                                    len = MAX(((raw_buffer - buffer_previous)+3) / 6, 1); // how many bits has the same value (for int rounding 1 is added)
 8000888:	687a      	ldr	r2, [r7, #4]
 800088a:	69fb      	ldr	r3, [r7, #28]
 800088c:	1ad3      	subs	r3, r2, r3
 800088e:	2b20      	cmp	r3, #32
 8000890:	dd0b      	ble.n	80008aa <get_BDshot_response+0x1fe>
 8000892:	687a      	ldr	r2, [r7, #4]
 8000894:	69fb      	ldr	r3, [r7, #28]
 8000896:	1ad3      	subs	r3, r2, r3
 8000898:	109b      	asrs	r3, r3, #2
 800089a:	3303      	adds	r3, #3
 800089c:	4a28      	ldr	r2, [pc, #160]	@ (8000940 <get_BDshot_response+0x294>)
 800089e:	fb82 1203 	smull	r1, r2, r2, r3
 80008a2:	17db      	asrs	r3, r3, #31
 80008a4:	1ad3      	subs	r3, r2, r3
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	e000      	b.n	80008ac <get_BDshot_response+0x200>
 80008aa:	2301      	movs	r3, #1
 80008ac:	73fb      	strb	r3, [r7, #15]
                                    bits += len;
 80008ae:	7dfa      	ldrb	r2, [r7, #23]
 80008b0:	7bfb      	ldrb	r3, [r7, #15]
 80008b2:	4413      	add	r3, r2
 80008b4:	75fb      	strb	r3, [r7, #23]
                                    motor_response <<= len;
 80008b6:	7bfb      	ldrb	r3, [r7, #15]
 80008b8:	69ba      	ldr	r2, [r7, #24]
 80008ba:	fa02 f303 	lsl.w	r3, r2, r3
 80008be:	61bb      	str	r3, [r7, #24]
                                    motor_response |= 0x1FFFFF >> (BDSHOT_RESPONSE_LENGTH - len);
 80008c0:	7bfb      	ldrb	r3, [r7, #15]
 80008c2:	f1c3 0315 	rsb	r3, r3, #21
 80008c6:	4a1f      	ldr	r2, [pc, #124]	@ (8000944 <get_BDshot_response+0x298>)
 80008c8:	fa42 f303 	asr.w	r3, r2, r3
 80008cc:	461a      	mov	r2, r3
 80008ce:	69bb      	ldr	r3, [r7, #24]
 80008d0:	4313      	orrs	r3, r2
 80008d2:	61bb      	str	r3, [r7, #24]
                                    buffer_previous = raw_buffer - 1;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	3b04      	subs	r3, #4
 80008d8:	61fb      	str	r3, [r7, #28]
                                }
                                break;
 80008da:	e004      	b.n	80008e6 <get_BDshot_response+0x23a>
                        while (raw_buffer < buffer_end)
 80008dc:	687a      	ldr	r2, [r7, #4]
 80008de:	693b      	ldr	r3, [r7, #16]
 80008e0:	429a      	cmp	r2, r3
 80008e2:	d38d      	bcc.n	8000800 <get_BDshot_response+0x154>
 80008e4:	e000      	b.n	80008e8 <get_BDshot_response+0x23c>
                                break;
 80008e6:	bf00      	nop
            while (raw_buffer <= buffer_end)
 80008e8:	687a      	ldr	r2, [r7, #4]
 80008ea:	693b      	ldr	r3, [r7, #16]
 80008ec:	429a      	cmp	r2, r3
 80008ee:	f67f af35 	bls.w	800075c <get_BDshot_response+0xb0>
                        }
                    }
                }
            }
            // if last bits were 1 they were not added so far
            motor_response <<= (BDSHOT_RESPONSE_LENGTH - bits);
 80008f2:	7dfb      	ldrb	r3, [r7, #23]
 80008f4:	f1c3 0315 	rsb	r3, r3, #21
 80008f8:	69ba      	ldr	r2, [r7, #24]
 80008fa:	fa02 f303 	lsl.w	r3, r2, r3
 80008fe:	61bb      	str	r3, [r7, #24]
            if (*buffer_previous & (1 << motor_shift)) {
 8000900:	69fb      	ldr	r3, [r7, #28]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	78fa      	ldrb	r2, [r7, #3]
 8000906:	2101      	movs	r1, #1
 8000908:	fa01 f202 	lsl.w	r2, r1, r2
 800090c:	4013      	ands	r3, r2
 800090e:	2b00      	cmp	r3, #0
 8000910:	d007      	beq.n	8000922 <get_BDshot_response+0x276>
                motor_response |= 0x1FFFFF >> bits; // 21 ones right-shifted
 8000912:	7dfb      	ldrb	r3, [r7, #23]
 8000914:	4a0b      	ldr	r2, [pc, #44]	@ (8000944 <get_BDshot_response+0x298>)
 8000916:	fa42 f303 	asr.w	r3, r2, r3
 800091a:	461a      	mov	r2, r3
 800091c:	69bb      	ldr	r3, [r7, #24]
 800091e:	4313      	orrs	r3, r2
 8000920:	61bb      	str	r3, [r7, #24]
            }
            return motor_response;
 8000922:	69bb      	ldr	r3, [r7, #24]
 8000924:	e006      	b.n	8000934 <get_BDshot_response+0x288>
    while (raw_buffer < buffer_end)
 8000926:	687a      	ldr	r2, [r7, #4]
 8000928:	693b      	ldr	r3, [r7, #16]
 800092a:	429a      	cmp	r2, r3
 800092c:	f4ff aec9 	bcc.w	80006c2 <get_BDshot_response+0x16>
        }
    }
    // if LOW edge was not found return incorrect motor response:
    return 0xFFFFFFFF;
 8000930:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000934:	4618      	mov	r0, r3
 8000936:	3724      	adds	r7, #36	@ 0x24
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr
 8000940:	2aaaaaab 	.word	0x2aaaaaab
 8000944:	001fffff 	.word	0x001fffff

08000948 <BDshot_check_checksum>:


static uint8_t BDshot_check_checksum(uint16_t value)
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	4603      	mov	r3, r0
 8000950:	80fb      	strh	r3, [r7, #6]
    // BDshot frame has 4 last bits CRC:
    if (((value ^ (value >> 4) ^ (value >> 8) ^ (value >> 12)) & 0x0F) == 0x0F)
 8000952:	88fb      	ldrh	r3, [r7, #6]
 8000954:	091b      	lsrs	r3, r3, #4
 8000956:	b29a      	uxth	r2, r3
 8000958:	88fb      	ldrh	r3, [r7, #6]
 800095a:	4053      	eors	r3, r2
 800095c:	b29a      	uxth	r2, r3
 800095e:	88fb      	ldrh	r3, [r7, #6]
 8000960:	0a1b      	lsrs	r3, r3, #8
 8000962:	b29b      	uxth	r3, r3
 8000964:	4053      	eors	r3, r2
 8000966:	b29a      	uxth	r2, r3
 8000968:	88fb      	ldrh	r3, [r7, #6]
 800096a:	0b1b      	lsrs	r3, r3, #12
 800096c:	b29b      	uxth	r3, r3
 800096e:	4053      	eors	r3, r2
 8000970:	b29b      	uxth	r3, r3
 8000972:	f003 030f 	and.w	r3, r3, #15
 8000976:	2b0f      	cmp	r3, #15
 8000978:	d101      	bne.n	800097e <BDshot_check_checksum+0x36>
    {
        return 1;
 800097a:	2301      	movs	r3, #1
 800097c:	e000      	b.n	8000980 <BDshot_check_checksum+0x38>
    }
    else
    {
        return 0;
 800097e:	2300      	movs	r3, #0
    }
}
 8000980:	4618      	mov	r0, r3
 8000982:	370c      	adds	r7, #12
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr

0800098c <rawBdShot_to_raw16bit>:
		iv, 9, 10, 11, iv, 13, 14, 15,
		iv, iv, 2, 3, iv, 5, 6, 7,
		iv, 0, 8, 1, iv, 4, 12, iv};

uint16_t rawBdShot_to_raw16bit(uint32_t value, uint16_t* last_known_rpm)
{
 800098c:	b480      	push	{r7}
 800098e:	b087      	sub	sp, #28
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
 8000994:	6039      	str	r1, [r7, #0]
    // 12-bit eRPM value has 3 first bits od left shifting and 9-bit mantisa.

    // put nibbles in the array in places of mapped values (to reduce empty elements smallest mapped value will always be subtracted)
    // now it is easy to create real value - mapped value indicate array element which contain nibble value:

	if (value == 0xFFFFFFFF){
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800099c:	d102      	bne.n	80009a4 <rawBdShot_to_raw16bit+0x18>
		return *last_known_rpm;
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	881b      	ldrh	r3, [r3, #0]
 80009a2:	e03c      	b.n	8000a1e <rawBdShot_to_raw16bit+0x92>
	}

    value = (value ^ (value >> 1)); // 21BIT -> bit 0 and 20bit
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	085b      	lsrs	r3, r3, #1
 80009a8:	687a      	ldr	r2, [r7, #4]
 80009aa:	4053      	eors	r3, r2
 80009ac:	607b      	str	r3, [r7, #4]
    value = value & 0xFFFFF; // bit 0 and 20 bits to 20 bits
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80009b4:	607b      	str	r3, [r7, #4]
    uint16_t decoded_value = 0;
 80009b6:	2300      	movs	r3, #0
 80009b8:	82fb      	strh	r3, [r7, #22]
    for (int i = 0; i <= 3; i++){
 80009ba:	2300      	movs	r3, #0
 80009bc:	613b      	str	r3, [r7, #16]
 80009be:	e027      	b.n	8000a10 <rawBdShot_to_raw16bit+0x84>
    	uint8_t GRC_code = (value >> (15-i*5)) & 0x1F;
 80009c0:	693a      	ldr	r2, [r7, #16]
 80009c2:	4613      	mov	r3, r2
 80009c4:	079b      	lsls	r3, r3, #30
 80009c6:	1a9b      	subs	r3, r3, r2
 80009c8:	009b      	lsls	r3, r3, #2
 80009ca:	1a9b      	subs	r3, r3, r2
 80009cc:	330f      	adds	r3, #15
 80009ce:	687a      	ldr	r2, [r7, #4]
 80009d0:	fa22 f303 	lsr.w	r3, r2, r3
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	f003 031f 	and.w	r3, r3, #31
 80009da:	73fb      	strb	r3, [r7, #15]
    	int nibble = GCR_table[GRC_code];
 80009dc:	7bfb      	ldrb	r3, [r7, #15]
 80009de:	4a13      	ldr	r2, [pc, #76]	@ (8000a2c <rawBdShot_to_raw16bit+0xa0>)
 80009e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009e4:	60bb      	str	r3, [r7, #8]

    	if (nibble == iv) return *last_known_rpm;
 80009e6:	68bb      	ldr	r3, [r7, #8]
 80009e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009ec:	d102      	bne.n	80009f4 <rawBdShot_to_raw16bit+0x68>
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	881b      	ldrh	r3, [r3, #0]
 80009f2:	e014      	b.n	8000a1e <rawBdShot_to_raw16bit+0x92>
    	decoded_value = (decoded_value << 4) | (nibble & 0xF);
 80009f4:	8afb      	ldrh	r3, [r7, #22]
 80009f6:	011b      	lsls	r3, r3, #4
 80009f8:	b21a      	sxth	r2, r3
 80009fa:	68bb      	ldr	r3, [r7, #8]
 80009fc:	b21b      	sxth	r3, r3
 80009fe:	f003 030f 	and.w	r3, r3, #15
 8000a02:	b21b      	sxth	r3, r3
 8000a04:	4313      	orrs	r3, r2
 8000a06:	b21b      	sxth	r3, r3
 8000a08:	82fb      	strh	r3, [r7, #22]
    for (int i = 0; i <= 3; i++){
 8000a0a:	693b      	ldr	r3, [r7, #16]
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	613b      	str	r3, [r7, #16]
 8000a10:	693b      	ldr	r3, [r7, #16]
 8000a12:	2b03      	cmp	r3, #3
 8000a14:	ddd4      	ble.n	80009c0 <rawBdShot_to_raw16bit+0x34>

    }
    *last_known_rpm = decoded_value;
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	8afa      	ldrh	r2, [r7, #22]
 8000a1a:	801a      	strh	r2, [r3, #0]

    return decoded_value;
 8000a1c:	8afb      	ldrh	r3, [r7, #22]
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	371c      	adds	r7, #28
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	08005e68 	.word	0x08005e68

08000a30 <raw16bit_to_motorRpm>:

uint16_t raw16bit_to_motorRpm(uint16_t raw16bit, volatile uint16_t* last_rpm_val){
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b084      	sub	sp, #16
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	4603      	mov	r3, r0
 8000a38:	6039      	str	r1, [r7, #0]
 8000a3a:	80fb      	strh	r3, [r7, #6]
	//CRC check
	if(BDshot_check_checksum(raw16bit)){
 8000a3c:	88fb      	ldrh	r3, [r7, #6]
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f7ff ff82 	bl	8000948 <BDshot_check_checksum>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d030      	beq.n	8000aac <raw16bit_to_motorRpm+0x7c>
		//CRC check is correct -> remove the 4 crc bits
		uint16_t raw12bit = (raw16bit) >> 4; //eee mmmmmmmmm
 8000a4a:	88fb      	ldrh	r3, [r7, #6]
 8000a4c:	091b      	lsrs	r3, r3, #4
 8000a4e:	81fb      	strh	r3, [r7, #14]
		if (raw12bit == 0xFFF) {
 8000a50:	89fb      	ldrh	r3, [r7, #14]
 8000a52:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d104      	bne.n	8000a64 <raw16bit_to_motorRpm+0x34>
			*last_rpm_val = 0;
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	801a      	strh	r2, [r3, #0]
			return 0; 	 //Special case -> 0 RPM
 8000a60:	2300      	movs	r3, #0
 8000a62:	e026      	b.n	8000ab2 <raw16bit_to_motorRpm+0x82>
		}

		raw12bit = (raw12bit & 0x1FF) << (raw12bit >>9);
 8000a64:	89fb      	ldrh	r3, [r7, #14]
 8000a66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000a6a:	89fa      	ldrh	r2, [r7, #14]
 8000a6c:	0a52      	lsrs	r2, r2, #9
 8000a6e:	b292      	uxth	r2, r2
 8000a70:	4093      	lsls	r3, r2
 8000a72:	81fb      	strh	r3, [r7, #14]

		if (!raw12bit) return -1;
 8000a74:	89fb      	ldrh	r3, [r7, #14]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d102      	bne.n	8000a80 <raw16bit_to_motorRpm+0x50>
 8000a7a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000a7e:	e018      	b.n	8000ab2 <raw16bit_to_motorRpm+0x82>

		uint16_t mechanical_rpm = ((60000000 + 50 * raw12bit) / raw12bit)/7;
 8000a80:	89fb      	ldrh	r3, [r7, #14]
 8000a82:	2232      	movs	r2, #50	@ 0x32
 8000a84:	fb03 f202 	mul.w	r2, r3, r2
 8000a88:	4b0c      	ldr	r3, [pc, #48]	@ (8000abc <raw16bit_to_motorRpm+0x8c>)
 8000a8a:	4413      	add	r3, r2
 8000a8c:	89fa      	ldrh	r2, [r7, #14]
 8000a8e:	fb93 f3f2 	sdiv	r3, r3, r2
 8000a92:	4a0b      	ldr	r2, [pc, #44]	@ (8000ac0 <raw16bit_to_motorRpm+0x90>)
 8000a94:	fb82 1203 	smull	r1, r2, r2, r3
 8000a98:	441a      	add	r2, r3
 8000a9a:	1092      	asrs	r2, r2, #2
 8000a9c:	17db      	asrs	r3, r3, #31
 8000a9e:	1ad3      	subs	r3, r2, r3
 8000aa0:	81bb      	strh	r3, [r7, #12]
		*last_rpm_val = mechanical_rpm;
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	89ba      	ldrh	r2, [r7, #12]
 8000aa6:	801a      	strh	r2, [r3, #0]
		return mechanical_rpm;
 8000aa8:	89bb      	ldrh	r3, [r7, #12]
 8000aaa:	e002      	b.n	8000ab2 <raw16bit_to_motorRpm+0x82>

	}
	else{
		return *last_rpm_val;
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	881b      	ldrh	r3, [r3, #0]
 8000ab0:	b29b      	uxth	r3, r3
	}

}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3710      	adds	r7, #16
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	03938700 	.word	0x03938700
 8000ac0:	92492493 	.word	0x92492493

08000ac4 <HAL_DMA_TxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_DMA_TxCpltCallback(DMA_HandleTypeDef *hdma)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
    if (hdma->Instance == DMA2_Stream5)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a0c      	ldr	r2, [pc, #48]	@ (8000b04 <HAL_DMA_TxCpltCallback+0x40>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d110      	bne.n	8000af8 <HAL_DMA_TxCpltCallback+0x34>
    {
    	if (appState == STATE_TX_TRANSFERING) appState = STATE_RX_INIT;
 8000ad6:	4b0c      	ldr	r3, [pc, #48]	@ (8000b08 <HAL_DMA_TxCpltCallback+0x44>)
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	b2db      	uxtb	r3, r3
 8000adc:	2b01      	cmp	r3, #1
 8000ade:	d103      	bne.n	8000ae8 <HAL_DMA_TxCpltCallback+0x24>
 8000ae0:	4b09      	ldr	r3, [pc, #36]	@ (8000b08 <HAL_DMA_TxCpltCallback+0x44>)
 8000ae2:	2202      	movs	r2, #2
 8000ae4:	701a      	strb	r2, [r3, #0]
    	else if (appState == STATE_RX_TRANSFERING) appState = STATE_READ_RPM;
    }
}
 8000ae6:	e007      	b.n	8000af8 <HAL_DMA_TxCpltCallback+0x34>
    	else if (appState == STATE_RX_TRANSFERING) appState = STATE_READ_RPM;
 8000ae8:	4b07      	ldr	r3, [pc, #28]	@ (8000b08 <HAL_DMA_TxCpltCallback+0x44>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	2b03      	cmp	r3, #3
 8000af0:	d102      	bne.n	8000af8 <HAL_DMA_TxCpltCallback+0x34>
 8000af2:	4b05      	ldr	r3, [pc, #20]	@ (8000b08 <HAL_DMA_TxCpltCallback+0x44>)
 8000af4:	2204      	movs	r2, #4
 8000af6:	701a      	strb	r2, [r3, #0]
}
 8000af8:	bf00      	nop
 8000afa:	370c      	adds	r7, #12
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr
 8000b04:	40026488 	.word	0x40026488
 8000b08:	200000ca 	.word	0x200000ca

08000b0c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
	pot_value = HAL_ADC_GetValue(&hadc1); // Read & Update The ADC Result
 8000b14:	4805      	ldr	r0, [pc, #20]	@ (8000b2c <HAL_ADC_ConvCpltCallback+0x20>)
 8000b16:	f001 f8d1 	bl	8001cbc <HAL_ADC_GetValue>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	b29a      	uxth	r2, r3
 8000b1e:	4b04      	ldr	r3, [pc, #16]	@ (8000b30 <HAL_ADC_ConvCpltCallback+0x24>)
 8000b20:	801a      	strh	r2, [r3, #0]
}
 8000b22:	bf00      	nop
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	200000cc 	.word	0x200000cc
 8000b30:	200000c8 	.word	0x200000c8

08000b34 <potValue_to_value>:
uint32_t potValue_to_value(volatile uint16_t potValue){
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	80fb      	strh	r3, [r7, #6]
	return potValue*2000/256 + 48;
 8000b3e:	88fb      	ldrh	r3, [r7, #6]
 8000b40:	b29b      	uxth	r3, r3
 8000b42:	461a      	mov	r2, r3
 8000b44:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000b48:	fb02 f303 	mul.w	r3, r2, r3
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	da00      	bge.n	8000b52 <potValue_to_value+0x1e>
 8000b50:	33ff      	adds	r3, #255	@ 0xff
 8000b52:	121b      	asrs	r3, r3, #8
 8000b54:	3330      	adds	r3, #48	@ 0x30
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	370c      	adds	r7, #12
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
	...

08000b64 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a0d      	ldr	r2, [pc, #52]	@ (8000ba8 <HAL_UART_TxCpltCallback+0x44>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d113      	bne.n	8000b9e <HAL_UART_TxCpltCallback+0x3a>
		{
			sprintf(uart_rpm_buffer, "%u,%u\r\n", rpm, value);
 8000b76:	4b0d      	ldr	r3, [pc, #52]	@ (8000bac <HAL_UART_TxCpltCallback+0x48>)
 8000b78:	881b      	ldrh	r3, [r3, #0]
 8000b7a:	b29b      	uxth	r3, r3
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb0 <HAL_UART_TxCpltCallback+0x4c>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	490c      	ldr	r1, [pc, #48]	@ (8000bb4 <HAL_UART_TxCpltCallback+0x50>)
 8000b84:	480c      	ldr	r0, [pc, #48]	@ (8000bb8 <HAL_UART_TxCpltCallback+0x54>)
 8000b86:	f004 fcbf 	bl	8005508 <siprintf>
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)uart_rpm_buffer, strlen(uart_rpm_buffer));
 8000b8a:	480b      	ldr	r0, [pc, #44]	@ (8000bb8 <HAL_UART_TxCpltCallback+0x54>)
 8000b8c:	f7ff fb20 	bl	80001d0 <strlen>
 8000b90:	4603      	mov	r3, r0
 8000b92:	b29b      	uxth	r3, r3
 8000b94:	461a      	mov	r2, r3
 8000b96:	4908      	ldr	r1, [pc, #32]	@ (8000bb8 <HAL_UART_TxCpltCallback+0x54>)
 8000b98:	4808      	ldr	r0, [pc, #32]	@ (8000bbc <HAL_UART_TxCpltCallback+0x58>)
 8000b9a:	f003 fcab 	bl	80044f4 <HAL_UART_Transmit_DMA>
		}
}
 8000b9e:	bf00      	nop
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40004400 	.word	0x40004400
 8000bac:	2000007c 	.word	0x2000007c
 8000bb0:	20000078 	.word	0x20000078
 8000bb4:	08005e60 	.word	0x08005e60
 8000bb8:	20000080 	.word	0x20000080
 8000bbc:	20000204 	.word	0x20000204

08000bc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bc4:	f000 fdd6 	bl	8001774 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bc8:	f000 f938 	bl	8000e3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bcc:	f000 fb44 	bl	8001258 <MX_GPIO_Init>
  MX_DMA_Init();
 8000bd0:	f000 fb0c 	bl	80011ec <MX_DMA_Init>
  MX_TIM1_Init();
 8000bd4:	f000 f9f0 	bl	8000fb8 <MX_TIM1_Init>
  MX_ADC1_Init();
 8000bd8:	f000 f99a 	bl	8000f10 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000bdc:	f000 fa90 	bl	8001100 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000be0:	f000 fada 	bl	8001198 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2); // Start Timer2 (Trigger Source For ADC1)
 8000be4:	4881      	ldr	r0, [pc, #516]	@ (8000dec <main+0x22c>)
 8000be6:	f002 fe65 	bl	80038b4 <HAL_TIM_Base_Start>
  HAL_ADC_Start_IT(&hadc1); // Start ADC Conversion
 8000bea:	4881      	ldr	r0, [pc, #516]	@ (8000df0 <main+0x230>)
 8000bec:	f000 fe78 	bl	80018e0 <HAL_ADC_Start_IT>
  hdma_tim1_up.XferCpltCallback = HAL_DMA_TxCpltCallback;
 8000bf0:	4b80      	ldr	r3, [pc, #512]	@ (8000df4 <main+0x234>)
 8000bf2:	4a81      	ldr	r2, [pc, #516]	@ (8000df8 <main+0x238>)
 8000bf4:	63da      	str	r2, [r3, #60]	@ 0x3c


  MemBuffer_init(DMA_Buffer);
 8000bf6:	4881      	ldr	r0, [pc, #516]	@ (8000dfc <main+0x23c>)
 8000bf8:	f7ff fcba 	bl	8000570 <MemBuffer_init>
  //sprintf(uart_rpm_buffer, "%u\n", rpm);
  sprintf(uart_rpm_buffer, "%u,%u\r\n", rpm, value);
 8000bfc:	4b80      	ldr	r3, [pc, #512]	@ (8000e00 <main+0x240>)
 8000bfe:	881b      	ldrh	r3, [r3, #0]
 8000c00:	b29b      	uxth	r3, r3
 8000c02:	461a      	mov	r2, r3
 8000c04:	4b7f      	ldr	r3, [pc, #508]	@ (8000e04 <main+0x244>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	497f      	ldr	r1, [pc, #508]	@ (8000e08 <main+0x248>)
 8000c0a:	4880      	ldr	r0, [pc, #512]	@ (8000e0c <main+0x24c>)
 8000c0c:	f004 fc7c 	bl	8005508 <siprintf>
  HAL_UART_Transmit_DMA(&huart2, (uint8_t*)uart_rpm_buffer, strlen(uart_rpm_buffer));
 8000c10:	487e      	ldr	r0, [pc, #504]	@ (8000e0c <main+0x24c>)
 8000c12:	f7ff fadd 	bl	80001d0 <strlen>
 8000c16:	4603      	mov	r3, r0
 8000c18:	b29b      	uxth	r3, r3
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	497b      	ldr	r1, [pc, #492]	@ (8000e0c <main+0x24c>)
 8000c1e:	487c      	ldr	r0, [pc, #496]	@ (8000e10 <main+0x250>)
 8000c20:	f003 fc68 	bl	80044f4 <HAL_UART_Transmit_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  appState = STATE_TX_INIT;
 8000c24:	4b7b      	ldr	r3, [pc, #492]	@ (8000e14 <main+0x254>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	701a      	strb	r2, [r3, #0]
  while (1)
  {

		switch (appState){
 8000c2a:	4b7a      	ldr	r3, [pc, #488]	@ (8000e14 <main+0x254>)
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	2b04      	cmp	r3, #4
 8000c32:	d8fa      	bhi.n	8000c2a <main+0x6a>
 8000c34:	a201      	add	r2, pc, #4	@ (adr r2, 8000c3c <main+0x7c>)
 8000c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c3a:	bf00      	nop
 8000c3c:	08000c51 	.word	0x08000c51
 8000c40:	08000c2b 	.word	0x08000c2b
 8000c44:	08000d0d 	.word	0x08000d0d
 8000c48:	08000c2b 	.word	0x08000c2b
 8000c4c:	08000d9f 	.word	0x08000d9f
			case STATE_TX_INIT:
				//Tat timer
				HAL_TIM_Base_Stop(&htim1);
 8000c50:	4871      	ldr	r0, [pc, #452]	@ (8000e18 <main+0x258>)
 8000c52:	f002 fe97 	bl	8003984 <HAL_TIM_Base_Stop>

			  	value = potValue_to_value(pot_value);
 8000c56:	4b71      	ldr	r3, [pc, #452]	@ (8000e1c <main+0x25c>)
 8000c58:	881b      	ldrh	r3, [r3, #0]
 8000c5a:	b29b      	uxth	r3, r3
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f7ff ff69 	bl	8000b34 <potValue_to_value>
 8000c62:	4603      	mov	r3, r0
 8000c64:	4a67      	ldr	r2, [pc, #412]	@ (8000e04 <main+0x244>)
 8000c66:	6013      	str	r3, [r2, #0]
				//value = 48;
			  	DshotFrameToMemBuffer(getDshotFrame(value), DMA_Buffer);
 8000c68:	4b66      	ldr	r3, [pc, #408]	@ (8000e04 <main+0x244>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	b29b      	uxth	r3, r3
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f7ff fcd1 	bl	8000616 <getDshotFrame>
 8000c74:	4603      	mov	r3, r0
 8000c76:	4961      	ldr	r1, [pc, #388]	@ (8000dfc <main+0x23c>)
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f7ff fce1 	bl	8000640 <DshotFrameToMemBuffer>

				//Chuyen GPIO sang output, no pullup pulldown
				GPIOE->MODER &= ~GPIO_MODER_MODER9;
 8000c7e:	4b68      	ldr	r3, [pc, #416]	@ (8000e20 <main+0x260>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4a67      	ldr	r2, [pc, #412]	@ (8000e20 <main+0x260>)
 8000c84:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 8000c88:	6013      	str	r3, [r2, #0]
	            GPIOE->MODER |= GPIO_MODER_MODER9_0;
 8000c8a:	4b65      	ldr	r3, [pc, #404]	@ (8000e20 <main+0x260>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4a64      	ldr	r2, [pc, #400]	@ (8000e20 <main+0x260>)
 8000c90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c94:	6013      	str	r3, [r2, #0]

	            //Config lai thong so cua tim1
	            __HAL_TIM_SET_AUTORELOAD(&htim1, 168000/BitRate/BitSectionNumber -1);
 8000c96:	4b60      	ldr	r3, [pc, #384]	@ (8000e18 <main+0x258>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	2245      	movs	r2, #69	@ 0x45
 8000c9c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000c9e:	4b5e      	ldr	r3, [pc, #376]	@ (8000e18 <main+0x258>)
 8000ca0:	2245      	movs	r2, #69	@ 0x45
 8000ca2:	60da      	str	r2, [r3, #12]
	            __HAL_TIM_SET_PRESCALER(&htim1, 1-1);
 8000ca4:	4b5c      	ldr	r3, [pc, #368]	@ (8000e18 <main+0x258>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	2200      	movs	r2, #0
 8000caa:	629a      	str	r2, [r3, #40]	@ 0x28

	            //Tat DMA
			    __HAL_DMA_DISABLE(&hdma_tim1_up);
 8000cac:	4b51      	ldr	r3, [pc, #324]	@ (8000df4 <main+0x234>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	681a      	ldr	r2, [r3, #0]
 8000cb2:	4b50      	ldr	r3, [pc, #320]	@ (8000df4 <main+0x234>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f022 0201 	bic.w	r2, r2, #1
 8000cba:	601a      	str	r2, [r3, #0]

				//Cai dat cho DMA
				hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000cbc:	4b4d      	ldr	r3, [pc, #308]	@ (8000df4 <main+0x234>)
 8000cbe:	2240      	movs	r2, #64	@ 0x40
 8000cc0:	609a      	str	r2, [r3, #8]
				hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 8000cc2:	4b4c      	ldr	r3, [pc, #304]	@ (8000df4 <main+0x234>)
 8000cc4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000cc8:	611a      	str	r2, [r3, #16]
				hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cca:	4b4a      	ldr	r3, [pc, #296]	@ (8000df4 <main+0x234>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	60da      	str	r2, [r3, #12]
				hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000cd0:	4b48      	ldr	r3, [pc, #288]	@ (8000df4 <main+0x234>)
 8000cd2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000cd6:	615a      	str	r2, [r3, #20]
				hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000cd8:	4b46      	ldr	r3, [pc, #280]	@ (8000df4 <main+0x234>)
 8000cda:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000cde:	619a      	str	r2, [r3, #24]
				HAL_DMA_Init(&hdma_tim1_up);
 8000ce0:	4844      	ldr	r0, [pc, #272]	@ (8000df4 <main+0x234>)
 8000ce2:	f001 fb47 	bl	8002374 <HAL_DMA_Init>

				//Bat dma va timer
				HAL_DMA_Start_IT(&hdma_tim1_up, (uint32_t)DMA_Buffer, (uint32_t)&(GPIOE->BSRR), FRAME_BIT_NUMBER * BIT_SECTION_NUMBER);
 8000ce6:	4945      	ldr	r1, [pc, #276]	@ (8000dfc <main+0x23c>)
 8000ce8:	2390      	movs	r3, #144	@ 0x90
 8000cea:	4a4e      	ldr	r2, [pc, #312]	@ (8000e24 <main+0x264>)
 8000cec:	4841      	ldr	r0, [pc, #260]	@ (8000df4 <main+0x234>)
 8000cee:	f001 fbef 	bl	80024d0 <HAL_DMA_Start_IT>
				TIM1->EGR |= TIM_EGR_UG;
 8000cf2:	4b4d      	ldr	r3, [pc, #308]	@ (8000e28 <main+0x268>)
 8000cf4:	695b      	ldr	r3, [r3, #20]
 8000cf6:	4a4c      	ldr	r2, [pc, #304]	@ (8000e28 <main+0x268>)
 8000cf8:	f043 0301 	orr.w	r3, r3, #1
 8000cfc:	6153      	str	r3, [r2, #20]
				HAL_TIM_Base_Start(&htim1);
 8000cfe:	4846      	ldr	r0, [pc, #280]	@ (8000e18 <main+0x258>)
 8000d00:	f002 fdd8 	bl	80038b4 <HAL_TIM_Base_Start>
				appState = STATE_TX_TRANSFERING;
 8000d04:	4b43      	ldr	r3, [pc, #268]	@ (8000e14 <main+0x254>)
 8000d06:	2201      	movs	r2, #1
 8000d08:	701a      	strb	r2, [r3, #0]
				break;
 8000d0a:	e06e      	b.n	8000dea <main+0x22a>
			case STATE_TX_TRANSFERING:
				break;

			case STATE_RX_INIT:
				//Tat timer
				HAL_TIM_Base_Stop(&htim1);
 8000d0c:	4842      	ldr	r0, [pc, #264]	@ (8000e18 <main+0x258>)
 8000d0e:	f002 fe39 	bl	8003984 <HAL_TIM_Base_Stop>

				//Chuyen gpio sang input mode, pull up
				GPIOE->MODER &= ~GPIO_MODER_MODER9;
 8000d12:	4b43      	ldr	r3, [pc, #268]	@ (8000e20 <main+0x260>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a42      	ldr	r2, [pc, #264]	@ (8000e20 <main+0x260>)
 8000d18:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 8000d1c:	6013      	str	r3, [r2, #0]
	            GPIOE->PUPDR &= ~GPIO_PUPDR_PUPDR9;
 8000d1e:	4b40      	ldr	r3, [pc, #256]	@ (8000e20 <main+0x260>)
 8000d20:	68db      	ldr	r3, [r3, #12]
 8000d22:	4a3f      	ldr	r2, [pc, #252]	@ (8000e20 <main+0x260>)
 8000d24:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 8000d28:	60d3      	str	r3, [r2, #12]
	            GPIOE->PUPDR |= GPIO_PUPDR_PUPDR9_0;
 8000d2a:	4b3d      	ldr	r3, [pc, #244]	@ (8000e20 <main+0x260>)
 8000d2c:	68db      	ldr	r3, [r3, #12]
 8000d2e:	4a3c      	ldr	r2, [pc, #240]	@ (8000e20 <main+0x260>)
 8000d30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d34:	60d3      	str	r3, [r2, #12]

	            //Config lai thong so cua tim1 sao cho bang 4 lan tan so cua eRPM (tieu chuan Nyquist?)
	            __HAL_TIM_SET_AUTORELOAD(&htim1, 168000/375/6 -1);
 8000d36:	4b38      	ldr	r3, [pc, #224]	@ (8000e18 <main+0x258>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	2249      	movs	r2, #73	@ 0x49
 8000d3c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000d3e:	4b36      	ldr	r3, [pc, #216]	@ (8000e18 <main+0x258>)
 8000d40:	2249      	movs	r2, #73	@ 0x49
 8000d42:	60da      	str	r2, [r3, #12]
	            __HAL_TIM_SET_PRESCALER(&htim1, 1-1);
 8000d44:	4b34      	ldr	r3, [pc, #208]	@ (8000e18 <main+0x258>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	2200      	movs	r2, #0
 8000d4a:	629a      	str	r2, [r3, #40]	@ 0x28

				//Cai dat lai DMA
				hdma_tim1_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d4c:	4b29      	ldr	r3, [pc, #164]	@ (8000df4 <main+0x234>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	609a      	str	r2, [r3, #8]
				hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 8000d52:	4b28      	ldr	r3, [pc, #160]	@ (8000df4 <main+0x234>)
 8000d54:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d58:	611a      	str	r2, [r3, #16]
				hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d5a:	4b26      	ldr	r3, [pc, #152]	@ (8000df4 <main+0x234>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	60da      	str	r2, [r3, #12]
				hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000d60:	4b24      	ldr	r3, [pc, #144]	@ (8000df4 <main+0x234>)
 8000d62:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000d66:	615a      	str	r2, [r3, #20]
				hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000d68:	4b22      	ldr	r3, [pc, #136]	@ (8000df4 <main+0x234>)
 8000d6a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000d6e:	619a      	str	r2, [r3, #24]
				HAL_DMA_Init(&hdma_tim1_up);
 8000d70:	4820      	ldr	r0, [pc, #128]	@ (8000df4 <main+0x234>)
 8000d72:	f001 faff 	bl	8002374 <HAL_DMA_Init>

				//Bat dma va timer
				HAL_DMA_Start_IT(&hdma_tim1_up, (uint32_t)&(GPIOE->IDR), (uint32_t)RX_Buffer, 300);
 8000d76:	4a2d      	ldr	r2, [pc, #180]	@ (8000e2c <main+0x26c>)
 8000d78:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8000d7c:	492c      	ldr	r1, [pc, #176]	@ (8000e30 <main+0x270>)
 8000d7e:	481d      	ldr	r0, [pc, #116]	@ (8000df4 <main+0x234>)
 8000d80:	f001 fba6 	bl	80024d0 <HAL_DMA_Start_IT>
				TIM1->EGR |= TIM_EGR_UG;
 8000d84:	4b28      	ldr	r3, [pc, #160]	@ (8000e28 <main+0x268>)
 8000d86:	695b      	ldr	r3, [r3, #20]
 8000d88:	4a27      	ldr	r2, [pc, #156]	@ (8000e28 <main+0x268>)
 8000d8a:	f043 0301 	orr.w	r3, r3, #1
 8000d8e:	6153      	str	r3, [r2, #20]
				HAL_TIM_Base_Start(&htim1);
 8000d90:	4821      	ldr	r0, [pc, #132]	@ (8000e18 <main+0x258>)
 8000d92:	f002 fd8f 	bl	80038b4 <HAL_TIM_Base_Start>
				appState = STATE_RX_TRANSFERING;
 8000d96:	4b1f      	ldr	r3, [pc, #124]	@ (8000e14 <main+0x254>)
 8000d98:	2203      	movs	r2, #3
 8000d9a:	701a      	strb	r2, [r3, #0]

				break;
 8000d9c:	e025      	b.n	8000dea <main+0x22a>

			case STATE_RX_TRANSFERING:
				break;

			case STATE_READ_RPM:
				raw_signal =  get_BDshot_response(RX_Buffer, 9);
 8000d9e:	2109      	movs	r1, #9
 8000da0:	4822      	ldr	r0, [pc, #136]	@ (8000e2c <main+0x26c>)
 8000da2:	f7ff fc83 	bl	80006ac <get_BDshot_response>
 8000da6:	4603      	mov	r3, r0
 8000da8:	4a22      	ldr	r2, [pc, #136]	@ (8000e34 <main+0x274>)
 8000daa:	6013      	str	r3, [r2, #0]
				raw_16bit = rawBdShot_to_raw16bit(raw_signal, &raw_16bit);
 8000dac:	4b21      	ldr	r3, [pc, #132]	@ (8000e34 <main+0x274>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4921      	ldr	r1, [pc, #132]	@ (8000e38 <main+0x278>)
 8000db2:	4618      	mov	r0, r3
 8000db4:	f7ff fdea 	bl	800098c <rawBdShot_to_raw16bit>
 8000db8:	4603      	mov	r3, r0
 8000dba:	461a      	mov	r2, r3
 8000dbc:	4b1e      	ldr	r3, [pc, #120]	@ (8000e38 <main+0x278>)
 8000dbe:	801a      	strh	r2, [r3, #0]
				rpm = raw16bit_to_motorRpm(raw_16bit, &rpm);
 8000dc0:	4b1d      	ldr	r3, [pc, #116]	@ (8000e38 <main+0x278>)
 8000dc2:	881b      	ldrh	r3, [r3, #0]
 8000dc4:	490e      	ldr	r1, [pc, #56]	@ (8000e00 <main+0x240>)
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff fe32 	bl	8000a30 <raw16bit_to_motorRpm>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	461a      	mov	r2, r3
 8000dd0:	4b0b      	ldr	r3, [pc, #44]	@ (8000e00 <main+0x240>)
 8000dd2:	801a      	strh	r2, [r3, #0]

				appState = STATE_TX_INIT;
 8000dd4:	4b0f      	ldr	r3, [pc, #60]	@ (8000e14 <main+0x254>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	701a      	strb	r2, [r3, #0]
				GPIOE->ODR |= GPIO_ODR_OD9;
 8000dda:	4b11      	ldr	r3, [pc, #68]	@ (8000e20 <main+0x260>)
 8000ddc:	695b      	ldr	r3, [r3, #20]
 8000dde:	4a10      	ldr	r2, [pc, #64]	@ (8000e20 <main+0x260>)
 8000de0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000de4:	6153      	str	r3, [r2, #20]
				break;
 8000de6:	bf00      	nop
 8000de8:	e71f      	b.n	8000c2a <main+0x6a>
		switch (appState){
 8000dea:	e71e      	b.n	8000c2a <main+0x6a>
 8000dec:	2000015c 	.word	0x2000015c
 8000df0:	200000cc 	.word	0x200000cc
 8000df4:	200001a4 	.word	0x200001a4
 8000df8:	08000ac5 	.word	0x08000ac5
 8000dfc:	200002ac 	.word	0x200002ac
 8000e00:	2000007c 	.word	0x2000007c
 8000e04:	20000078 	.word	0x20000078
 8000e08:	08005e60 	.word	0x08005e60
 8000e0c:	20000080 	.word	0x20000080
 8000e10:	20000204 	.word	0x20000204
 8000e14:	200000ca 	.word	0x200000ca
 8000e18:	20000114 	.word	0x20000114
 8000e1c:	200000c8 	.word	0x200000c8
 8000e20:	40021000 	.word	0x40021000
 8000e24:	40021018 	.word	0x40021018
 8000e28:	40010000 	.word	0x40010000
 8000e2c:	200004ec 	.word	0x200004ec
 8000e30:	40021010 	.word	0x40021010
 8000e34:	200000c4 	.word	0x200000c4
 8000e38:	200000c0 	.word	0x200000c0

08000e3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b094      	sub	sp, #80	@ 0x50
 8000e40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e42:	f107 0320 	add.w	r3, r7, #32
 8000e46:	2230      	movs	r2, #48	@ 0x30
 8000e48:	2100      	movs	r1, #0
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f004 fb7c 	bl	8005548 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e50:	f107 030c 	add.w	r3, r7, #12
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
 8000e5e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e60:	2300      	movs	r3, #0
 8000e62:	60bb      	str	r3, [r7, #8]
 8000e64:	4b28      	ldr	r3, [pc, #160]	@ (8000f08 <SystemClock_Config+0xcc>)
 8000e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e68:	4a27      	ldr	r2, [pc, #156]	@ (8000f08 <SystemClock_Config+0xcc>)
 8000e6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e6e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e70:	4b25      	ldr	r3, [pc, #148]	@ (8000f08 <SystemClock_Config+0xcc>)
 8000e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e78:	60bb      	str	r3, [r7, #8]
 8000e7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	607b      	str	r3, [r7, #4]
 8000e80:	4b22      	ldr	r3, [pc, #136]	@ (8000f0c <SystemClock_Config+0xd0>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a21      	ldr	r2, [pc, #132]	@ (8000f0c <SystemClock_Config+0xd0>)
 8000e86:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e8a:	6013      	str	r3, [r2, #0]
 8000e8c:	4b1f      	ldr	r3, [pc, #124]	@ (8000f0c <SystemClock_Config+0xd0>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e94:	607b      	str	r3, [r7, #4]
 8000e96:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e9c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ea0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ea6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000eaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000eac:	2304      	movs	r3, #4
 8000eae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000eb0:	23a8      	movs	r3, #168	@ 0xa8
 8000eb2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000eb8:	2307      	movs	r3, #7
 8000eba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ebc:	f107 0320 	add.w	r3, r7, #32
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f002 f80f 	bl	8002ee4 <HAL_RCC_OscConfig>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ecc:	f000 fa24 	bl	8001318 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ed0:	230f      	movs	r3, #15
 8000ed2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000edc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000ee0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ee2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ee6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ee8:	f107 030c 	add.w	r3, r7, #12
 8000eec:	2105      	movs	r1, #5
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f002 fa70 	bl	80033d4 <HAL_RCC_ClockConfig>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000efa:	f000 fa0d 	bl	8001318 <Error_Handler>
  }
}
 8000efe:	bf00      	nop
 8000f00:	3750      	adds	r7, #80	@ 0x50
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40023800 	.word	0x40023800
 8000f0c:	40007000 	.word	0x40007000

08000f10 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f16:	463b      	mov	r3, r7
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f22:	4b23      	ldr	r3, [pc, #140]	@ (8000fb0 <MX_ADC1_Init+0xa0>)
 8000f24:	4a23      	ldr	r2, [pc, #140]	@ (8000fb4 <MX_ADC1_Init+0xa4>)
 8000f26:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f28:	4b21      	ldr	r3, [pc, #132]	@ (8000fb0 <MX_ADC1_Init+0xa0>)
 8000f2a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000f2e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000f30:	4b1f      	ldr	r3, [pc, #124]	@ (8000fb0 <MX_ADC1_Init+0xa0>)
 8000f32:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000f36:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000f38:	4b1d      	ldr	r3, [pc, #116]	@ (8000fb0 <MX_ADC1_Init+0xa0>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f3e:	4b1c      	ldr	r3, [pc, #112]	@ (8000fb0 <MX_ADC1_Init+0xa0>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f44:	4b1a      	ldr	r3, [pc, #104]	@ (8000fb0 <MX_ADC1_Init+0xa0>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000f4c:	4b18      	ldr	r3, [pc, #96]	@ (8000fb0 <MX_ADC1_Init+0xa0>)
 8000f4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000f52:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000f54:	4b16      	ldr	r3, [pc, #88]	@ (8000fb0 <MX_ADC1_Init+0xa0>)
 8000f56:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8000f5a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f5c:	4b14      	ldr	r3, [pc, #80]	@ (8000fb0 <MX_ADC1_Init+0xa0>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f62:	4b13      	ldr	r3, [pc, #76]	@ (8000fb0 <MX_ADC1_Init+0xa0>)
 8000f64:	2201      	movs	r2, #1
 8000f66:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f68:	4b11      	ldr	r3, [pc, #68]	@ (8000fb0 <MX_ADC1_Init+0xa0>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f70:	4b0f      	ldr	r3, [pc, #60]	@ (8000fb0 <MX_ADC1_Init+0xa0>)
 8000f72:	2201      	movs	r2, #1
 8000f74:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f76:	480e      	ldr	r0, [pc, #56]	@ (8000fb0 <MX_ADC1_Init+0xa0>)
 8000f78:	f000 fc6e 	bl	8001858 <HAL_ADC_Init>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_ADC1_Init+0x76>
  {
    Error_Handler();
 8000f82:	f000 f9c9 	bl	8001318 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000f86:	2307      	movs	r3, #7
 8000f88:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f92:	463b      	mov	r3, r7
 8000f94:	4619      	mov	r1, r3
 8000f96:	4806      	ldr	r0, [pc, #24]	@ (8000fb0 <MX_ADC1_Init+0xa0>)
 8000f98:	f000 feb2 	bl	8001d00 <HAL_ADC_ConfigChannel>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8000fa2:	f000 f9b9 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fa6:	bf00      	nop
 8000fa8:	3710      	adds	r7, #16
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	200000cc 	.word	0x200000cc
 8000fb4:	40012000 	.word	0x40012000

08000fb8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b096      	sub	sp, #88	@ 0x58
 8000fbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fbe:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	605a      	str	r2, [r3, #4]
 8000fc8:	609a      	str	r2, [r3, #8]
 8000fca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fcc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fd6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	605a      	str	r2, [r3, #4]
 8000fe0:	609a      	str	r2, [r3, #8]
 8000fe2:	60da      	str	r2, [r3, #12]
 8000fe4:	611a      	str	r2, [r3, #16]
 8000fe6:	615a      	str	r2, [r3, #20]
 8000fe8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000fea:	1d3b      	adds	r3, r7, #4
 8000fec:	2220      	movs	r2, #32
 8000fee:	2100      	movs	r1, #0
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f004 faa9 	bl	8005548 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ff6:	4b40      	ldr	r3, [pc, #256]	@ (80010f8 <MX_TIM1_Init+0x140>)
 8000ff8:	4a40      	ldr	r2, [pc, #256]	@ (80010fc <MX_TIM1_Init+0x144>)
 8000ffa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1-1;
 8000ffc:	4b3e      	ldr	r3, [pc, #248]	@ (80010f8 <MX_TIM1_Init+0x140>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001002:	4b3d      	ldr	r3, [pc, #244]	@ (80010f8 <MX_TIM1_Init+0x140>)
 8001004:	2200      	movs	r2, #0
 8001006:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 168000/BitRate/BitSectionNumber -1;
 8001008:	4b3b      	ldr	r3, [pc, #236]	@ (80010f8 <MX_TIM1_Init+0x140>)
 800100a:	2245      	movs	r2, #69	@ 0x45
 800100c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800100e:	4b3a      	ldr	r3, [pc, #232]	@ (80010f8 <MX_TIM1_Init+0x140>)
 8001010:	2200      	movs	r2, #0
 8001012:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001014:	4b38      	ldr	r3, [pc, #224]	@ (80010f8 <MX_TIM1_Init+0x140>)
 8001016:	2200      	movs	r2, #0
 8001018:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800101a:	4b37      	ldr	r3, [pc, #220]	@ (80010f8 <MX_TIM1_Init+0x140>)
 800101c:	2200      	movs	r2, #0
 800101e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001020:	4835      	ldr	r0, [pc, #212]	@ (80010f8 <MX_TIM1_Init+0x140>)
 8001022:	f002 fbf7 	bl	8003814 <HAL_TIM_Base_Init>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 800102c:	f000 f974 	bl	8001318 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001030:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001034:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001036:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800103a:	4619      	mov	r1, r3
 800103c:	482e      	ldr	r0, [pc, #184]	@ (80010f8 <MX_TIM1_Init+0x140>)
 800103e:	f002 fd7d 	bl	8003b3c <HAL_TIM_ConfigClockSource>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001048:	f000 f966 	bl	8001318 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800104c:	482a      	ldr	r0, [pc, #168]	@ (80010f8 <MX_TIM1_Init+0x140>)
 800104e:	f002 fcc0 	bl	80039d2 <HAL_TIM_OC_Init>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001058:	f000 f95e 	bl	8001318 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800105c:	2320      	movs	r3, #32
 800105e:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001060:	2300      	movs	r3, #0
 8001062:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001064:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001068:	4619      	mov	r1, r3
 800106a:	4823      	ldr	r0, [pc, #140]	@ (80010f8 <MX_TIM1_Init+0x140>)
 800106c:	f003 f924 	bl	80042b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8001076:	f000 f94f 	bl	8001318 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800107a:	2300      	movs	r3, #0
 800107c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800107e:	2300      	movs	r3, #0
 8001080:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001082:	2300      	movs	r3, #0
 8001084:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001086:	2300      	movs	r3, #0
 8001088:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800108a:	2300      	movs	r3, #0
 800108c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800108e:	2300      	movs	r3, #0
 8001090:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001092:	2300      	movs	r3, #0
 8001094:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001096:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800109a:	2200      	movs	r2, #0
 800109c:	4619      	mov	r1, r3
 800109e:	4816      	ldr	r0, [pc, #88]	@ (80010f8 <MX_TIM1_Init+0x140>)
 80010a0:	f002 fcf0 	bl	8003a84 <HAL_TIM_OC_ConfigChannel>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80010aa:	f000 f935 	bl	8001318 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010ae:	2300      	movs	r3, #0
 80010b0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010b2:	2300      	movs	r3, #0
 80010b4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010b6:	2300      	movs	r3, #0
 80010b8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010ba:	2300      	movs	r3, #0
 80010bc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010be:	2300      	movs	r3, #0
 80010c0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010c6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010c8:	2300      	movs	r3, #0
 80010ca:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80010cc:	1d3b      	adds	r3, r7, #4
 80010ce:	4619      	mov	r1, r3
 80010d0:	4809      	ldr	r0, [pc, #36]	@ (80010f8 <MX_TIM1_Init+0x140>)
 80010d2:	f003 f96d 	bl	80043b0 <HAL_TIMEx_ConfigBreakDeadTime>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80010dc:	f000 f91c 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  __HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 80010e0:	4b05      	ldr	r3, [pc, #20]	@ (80010f8 <MX_TIM1_Init+0x140>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	68da      	ldr	r2, [r3, #12]
 80010e6:	4b04      	ldr	r3, [pc, #16]	@ (80010f8 <MX_TIM1_Init+0x140>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80010ee:	60da      	str	r2, [r3, #12]
  /* USER CODE END TIM1_Init 2 */

}
 80010f0:	bf00      	nop
 80010f2:	3758      	adds	r7, #88	@ 0x58
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	20000114 	.word	0x20000114
 80010fc:	40010000 	.word	0x40010000

08001100 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001106:	f107 0308 	add.w	r3, r7, #8
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	605a      	str	r2, [r3, #4]
 8001110:	609a      	str	r2, [r3, #8]
 8001112:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001114:	463b      	mov	r3, r7
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800111c:	4b1d      	ldr	r3, [pc, #116]	@ (8001194 <MX_TIM2_Init+0x94>)
 800111e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001122:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8001124:	4b1b      	ldr	r3, [pc, #108]	@ (8001194 <MX_TIM2_Init+0x94>)
 8001126:	2253      	movs	r2, #83	@ 0x53
 8001128:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800112a:	4b1a      	ldr	r3, [pc, #104]	@ (8001194 <MX_TIM2_Init+0x94>)
 800112c:	2200      	movs	r2, #0
 800112e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8001130:	4b18      	ldr	r3, [pc, #96]	@ (8001194 <MX_TIM2_Init+0x94>)
 8001132:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001136:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001138:	4b16      	ldr	r3, [pc, #88]	@ (8001194 <MX_TIM2_Init+0x94>)
 800113a:	2200      	movs	r2, #0
 800113c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800113e:	4b15      	ldr	r3, [pc, #84]	@ (8001194 <MX_TIM2_Init+0x94>)
 8001140:	2280      	movs	r2, #128	@ 0x80
 8001142:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001144:	4813      	ldr	r0, [pc, #76]	@ (8001194 <MX_TIM2_Init+0x94>)
 8001146:	f002 fb65 	bl	8003814 <HAL_TIM_Base_Init>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001150:	f000 f8e2 	bl	8001318 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001154:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001158:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800115a:	f107 0308 	add.w	r3, r7, #8
 800115e:	4619      	mov	r1, r3
 8001160:	480c      	ldr	r0, [pc, #48]	@ (8001194 <MX_TIM2_Init+0x94>)
 8001162:	f002 fceb 	bl	8003b3c <HAL_TIM_ConfigClockSource>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800116c:	f000 f8d4 	bl	8001318 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001170:	2320      	movs	r3, #32
 8001172:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001174:	2300      	movs	r3, #0
 8001176:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001178:	463b      	mov	r3, r7
 800117a:	4619      	mov	r1, r3
 800117c:	4805      	ldr	r0, [pc, #20]	@ (8001194 <MX_TIM2_Init+0x94>)
 800117e:	f003 f89b 	bl	80042b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001188:	f000 f8c6 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800118c:	bf00      	nop
 800118e:	3718      	adds	r7, #24
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	2000015c 	.word	0x2000015c

08001198 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800119c:	4b11      	ldr	r3, [pc, #68]	@ (80011e4 <MX_USART2_UART_Init+0x4c>)
 800119e:	4a12      	ldr	r2, [pc, #72]	@ (80011e8 <MX_USART2_UART_Init+0x50>)
 80011a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011a2:	4b10      	ldr	r3, [pc, #64]	@ (80011e4 <MX_USART2_UART_Init+0x4c>)
 80011a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011aa:	4b0e      	ldr	r3, [pc, #56]	@ (80011e4 <MX_USART2_UART_Init+0x4c>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011b0:	4b0c      	ldr	r3, [pc, #48]	@ (80011e4 <MX_USART2_UART_Init+0x4c>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011b6:	4b0b      	ldr	r3, [pc, #44]	@ (80011e4 <MX_USART2_UART_Init+0x4c>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011bc:	4b09      	ldr	r3, [pc, #36]	@ (80011e4 <MX_USART2_UART_Init+0x4c>)
 80011be:	220c      	movs	r2, #12
 80011c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011c2:	4b08      	ldr	r3, [pc, #32]	@ (80011e4 <MX_USART2_UART_Init+0x4c>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011c8:	4b06      	ldr	r3, [pc, #24]	@ (80011e4 <MX_USART2_UART_Init+0x4c>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011ce:	4805      	ldr	r0, [pc, #20]	@ (80011e4 <MX_USART2_UART_Init+0x4c>)
 80011d0:	f003 f940 	bl	8004454 <HAL_UART_Init>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011da:	f000 f89d 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	20000204 	.word	0x20000204
 80011e8:	40004400 	.word	0x40004400

080011ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	607b      	str	r3, [r7, #4]
 80011f6:	4b17      	ldr	r3, [pc, #92]	@ (8001254 <MX_DMA_Init+0x68>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fa:	4a16      	ldr	r2, [pc, #88]	@ (8001254 <MX_DMA_Init+0x68>)
 80011fc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001200:	6313      	str	r3, [r2, #48]	@ 0x30
 8001202:	4b14      	ldr	r3, [pc, #80]	@ (8001254 <MX_DMA_Init+0x68>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001206:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800120a:	607b      	str	r3, [r7, #4]
 800120c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	603b      	str	r3, [r7, #0]
 8001212:	4b10      	ldr	r3, [pc, #64]	@ (8001254 <MX_DMA_Init+0x68>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001216:	4a0f      	ldr	r2, [pc, #60]	@ (8001254 <MX_DMA_Init+0x68>)
 8001218:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800121c:	6313      	str	r3, [r2, #48]	@ 0x30
 800121e:	4b0d      	ldr	r3, [pc, #52]	@ (8001254 <MX_DMA_Init+0x68>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001222:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001226:	603b      	str	r3, [r7, #0]
 8001228:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800122a:	2200      	movs	r2, #0
 800122c:	2100      	movs	r1, #0
 800122e:	2011      	movs	r0, #17
 8001230:	f001 f869 	bl	8002306 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001234:	2011      	movs	r0, #17
 8001236:	f001 f882 	bl	800233e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 800123a:	2200      	movs	r2, #0
 800123c:	2100      	movs	r1, #0
 800123e:	2044      	movs	r0, #68	@ 0x44
 8001240:	f001 f861 	bl	8002306 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8001244:	2044      	movs	r0, #68	@ 0x44
 8001246:	f001 f87a 	bl	800233e <HAL_NVIC_EnableIRQ>

}
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	40023800 	.word	0x40023800

08001258 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b08a      	sub	sp, #40	@ 0x28
 800125c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125e:	f107 0314 	add.w	r3, r7, #20
 8001262:	2200      	movs	r2, #0
 8001264:	601a      	str	r2, [r3, #0]
 8001266:	605a      	str	r2, [r3, #4]
 8001268:	609a      	str	r2, [r3, #8]
 800126a:	60da      	str	r2, [r3, #12]
 800126c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	613b      	str	r3, [r7, #16]
 8001272:	4b27      	ldr	r3, [pc, #156]	@ (8001310 <MX_GPIO_Init+0xb8>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001276:	4a26      	ldr	r2, [pc, #152]	@ (8001310 <MX_GPIO_Init+0xb8>)
 8001278:	f043 0304 	orr.w	r3, r3, #4
 800127c:	6313      	str	r3, [r2, #48]	@ 0x30
 800127e:	4b24      	ldr	r3, [pc, #144]	@ (8001310 <MX_GPIO_Init+0xb8>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001282:	f003 0304 	and.w	r3, r3, #4
 8001286:	613b      	str	r3, [r7, #16]
 8001288:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	4b20      	ldr	r3, [pc, #128]	@ (8001310 <MX_GPIO_Init+0xb8>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001292:	4a1f      	ldr	r2, [pc, #124]	@ (8001310 <MX_GPIO_Init+0xb8>)
 8001294:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001298:	6313      	str	r3, [r2, #48]	@ 0x30
 800129a:	4b1d      	ldr	r3, [pc, #116]	@ (8001310 <MX_GPIO_Init+0xb8>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	60bb      	str	r3, [r7, #8]
 80012aa:	4b19      	ldr	r3, [pc, #100]	@ (8001310 <MX_GPIO_Init+0xb8>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ae:	4a18      	ldr	r2, [pc, #96]	@ (8001310 <MX_GPIO_Init+0xb8>)
 80012b0:	f043 0301 	orr.w	r3, r3, #1
 80012b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012b6:	4b16      	ldr	r3, [pc, #88]	@ (8001310 <MX_GPIO_Init+0xb8>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	60bb      	str	r3, [r7, #8]
 80012c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	607b      	str	r3, [r7, #4]
 80012c6:	4b12      	ldr	r3, [pc, #72]	@ (8001310 <MX_GPIO_Init+0xb8>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ca:	4a11      	ldr	r2, [pc, #68]	@ (8001310 <MX_GPIO_Init+0xb8>)
 80012cc:	f043 0310 	orr.w	r3, r3, #16
 80012d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001310 <MX_GPIO_Init+0xb8>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d6:	f003 0310 	and.w	r3, r3, #16
 80012da:	607b      	str	r3, [r7, #4]
 80012dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 80012de:	2200      	movs	r2, #0
 80012e0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012e4:	480b      	ldr	r0, [pc, #44]	@ (8001314 <MX_GPIO_Init+0xbc>)
 80012e6:	f001 fde3 	bl	8002eb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012ea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80012ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f0:	2301      	movs	r3, #1
 80012f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f4:	2300      	movs	r3, #0
 80012f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80012f8:	2301      	movs	r3, #1
 80012fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012fc:	f107 0314 	add.w	r3, r7, #20
 8001300:	4619      	mov	r1, r3
 8001302:	4804      	ldr	r0, [pc, #16]	@ (8001314 <MX_GPIO_Init+0xbc>)
 8001304:	f001 fc38 	bl	8002b78 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001308:	bf00      	nop
 800130a:	3728      	adds	r7, #40	@ 0x28
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	40023800 	.word	0x40023800
 8001314:	40021000 	.word	0x40021000

08001318 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800131c:	b672      	cpsid	i
}
 800131e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001320:	bf00      	nop
 8001322:	e7fd      	b.n	8001320 <Error_Handler+0x8>

08001324 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	607b      	str	r3, [r7, #4]
 800132e:	4b10      	ldr	r3, [pc, #64]	@ (8001370 <HAL_MspInit+0x4c>)
 8001330:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001332:	4a0f      	ldr	r2, [pc, #60]	@ (8001370 <HAL_MspInit+0x4c>)
 8001334:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001338:	6453      	str	r3, [r2, #68]	@ 0x44
 800133a:	4b0d      	ldr	r3, [pc, #52]	@ (8001370 <HAL_MspInit+0x4c>)
 800133c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800133e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001342:	607b      	str	r3, [r7, #4]
 8001344:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	603b      	str	r3, [r7, #0]
 800134a:	4b09      	ldr	r3, [pc, #36]	@ (8001370 <HAL_MspInit+0x4c>)
 800134c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800134e:	4a08      	ldr	r2, [pc, #32]	@ (8001370 <HAL_MspInit+0x4c>)
 8001350:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001354:	6413      	str	r3, [r2, #64]	@ 0x40
 8001356:	4b06      	ldr	r3, [pc, #24]	@ (8001370 <HAL_MspInit+0x4c>)
 8001358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800135a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800135e:	603b      	str	r3, [r7, #0]
 8001360:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001362:	2007      	movs	r0, #7
 8001364:	f000 ffc4 	bl	80022f0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001368:	bf00      	nop
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	40023800 	.word	0x40023800

08001374 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b08a      	sub	sp, #40	@ 0x28
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800137c:	f107 0314 	add.w	r3, r7, #20
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	605a      	str	r2, [r3, #4]
 8001386:	609a      	str	r2, [r3, #8]
 8001388:	60da      	str	r2, [r3, #12]
 800138a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a1b      	ldr	r2, [pc, #108]	@ (8001400 <HAL_ADC_MspInit+0x8c>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d12f      	bne.n	80013f6 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	613b      	str	r3, [r7, #16]
 800139a:	4b1a      	ldr	r3, [pc, #104]	@ (8001404 <HAL_ADC_MspInit+0x90>)
 800139c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800139e:	4a19      	ldr	r2, [pc, #100]	@ (8001404 <HAL_ADC_MspInit+0x90>)
 80013a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80013a6:	4b17      	ldr	r3, [pc, #92]	@ (8001404 <HAL_ADC_MspInit+0x90>)
 80013a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013ae:	613b      	str	r3, [r7, #16]
 80013b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	60fb      	str	r3, [r7, #12]
 80013b6:	4b13      	ldr	r3, [pc, #76]	@ (8001404 <HAL_ADC_MspInit+0x90>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ba:	4a12      	ldr	r2, [pc, #72]	@ (8001404 <HAL_ADC_MspInit+0x90>)
 80013bc:	f043 0301 	orr.w	r3, r3, #1
 80013c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013c2:	4b10      	ldr	r3, [pc, #64]	@ (8001404 <HAL_ADC_MspInit+0x90>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80013ce:	2380      	movs	r3, #128	@ 0x80
 80013d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013d2:	2303      	movs	r3, #3
 80013d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d6:	2300      	movs	r3, #0
 80013d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013da:	f107 0314 	add.w	r3, r7, #20
 80013de:	4619      	mov	r1, r3
 80013e0:	4809      	ldr	r0, [pc, #36]	@ (8001408 <HAL_ADC_MspInit+0x94>)
 80013e2:	f001 fbc9 	bl	8002b78 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80013e6:	2200      	movs	r2, #0
 80013e8:	2100      	movs	r1, #0
 80013ea:	2012      	movs	r0, #18
 80013ec:	f000 ff8b 	bl	8002306 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80013f0:	2012      	movs	r0, #18
 80013f2:	f000 ffa4 	bl	800233e <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80013f6:	bf00      	nop
 80013f8:	3728      	adds	r7, #40	@ 0x28
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	40012000 	.word	0x40012000
 8001404:	40023800 	.word	0x40023800
 8001408:	40020000 	.word	0x40020000

0800140c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a2c      	ldr	r2, [pc, #176]	@ (80014cc <HAL_TIM_Base_MspInit+0xc0>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d13f      	bne.n	800149e <HAL_TIM_Base_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	60fb      	str	r3, [r7, #12]
 8001422:	4b2b      	ldr	r3, [pc, #172]	@ (80014d0 <HAL_TIM_Base_MspInit+0xc4>)
 8001424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001426:	4a2a      	ldr	r2, [pc, #168]	@ (80014d0 <HAL_TIM_Base_MspInit+0xc4>)
 8001428:	f043 0301 	orr.w	r3, r3, #1
 800142c:	6453      	str	r3, [r2, #68]	@ 0x44
 800142e:	4b28      	ldr	r3, [pc, #160]	@ (80014d0 <HAL_TIM_Base_MspInit+0xc4>)
 8001430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	60fb      	str	r3, [r7, #12]
 8001438:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA2_Stream5;
 800143a:	4b26      	ldr	r3, [pc, #152]	@ (80014d4 <HAL_TIM_Base_MspInit+0xc8>)
 800143c:	4a26      	ldr	r2, [pc, #152]	@ (80014d8 <HAL_TIM_Base_MspInit+0xcc>)
 800143e:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Channel = DMA_CHANNEL_6;
 8001440:	4b24      	ldr	r3, [pc, #144]	@ (80014d4 <HAL_TIM_Base_MspInit+0xc8>)
 8001442:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8001446:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001448:	4b22      	ldr	r3, [pc, #136]	@ (80014d4 <HAL_TIM_Base_MspInit+0xc8>)
 800144a:	2240      	movs	r2, #64	@ 0x40
 800144c:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800144e:	4b21      	ldr	r3, [pc, #132]	@ (80014d4 <HAL_TIM_Base_MspInit+0xc8>)
 8001450:	2200      	movs	r2, #0
 8001452:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 8001454:	4b1f      	ldr	r3, [pc, #124]	@ (80014d4 <HAL_TIM_Base_MspInit+0xc8>)
 8001456:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800145a:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800145c:	4b1d      	ldr	r3, [pc, #116]	@ (80014d4 <HAL_TIM_Base_MspInit+0xc8>)
 800145e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001462:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001464:	4b1b      	ldr	r3, [pc, #108]	@ (80014d4 <HAL_TIM_Base_MspInit+0xc8>)
 8001466:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800146a:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_NORMAL;
 800146c:	4b19      	ldr	r3, [pc, #100]	@ (80014d4 <HAL_TIM_Base_MspInit+0xc8>)
 800146e:	2200      	movs	r2, #0
 8001470:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_HIGH;
 8001472:	4b18      	ldr	r3, [pc, #96]	@ (80014d4 <HAL_TIM_Base_MspInit+0xc8>)
 8001474:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001478:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800147a:	4b16      	ldr	r3, [pc, #88]	@ (80014d4 <HAL_TIM_Base_MspInit+0xc8>)
 800147c:	2200      	movs	r2, #0
 800147e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 8001480:	4814      	ldr	r0, [pc, #80]	@ (80014d4 <HAL_TIM_Base_MspInit+0xc8>)
 8001482:	f000 ff77 	bl	8002374 <HAL_DMA_Init>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 800148c:	f7ff ff44 	bl	8001318 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	4a10      	ldr	r2, [pc, #64]	@ (80014d4 <HAL_TIM_Base_MspInit+0xc8>)
 8001494:	621a      	str	r2, [r3, #32]
 8001496:	4a0f      	ldr	r2, [pc, #60]	@ (80014d4 <HAL_TIM_Base_MspInit+0xc8>)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800149c:	e012      	b.n	80014c4 <HAL_TIM_Base_MspInit+0xb8>
  else if(htim_base->Instance==TIM2)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80014a6:	d10d      	bne.n	80014c4 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014a8:	2300      	movs	r3, #0
 80014aa:	60bb      	str	r3, [r7, #8]
 80014ac:	4b08      	ldr	r3, [pc, #32]	@ (80014d0 <HAL_TIM_Base_MspInit+0xc4>)
 80014ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b0:	4a07      	ldr	r2, [pc, #28]	@ (80014d0 <HAL_TIM_Base_MspInit+0xc4>)
 80014b2:	f043 0301 	orr.w	r3, r3, #1
 80014b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80014b8:	4b05      	ldr	r3, [pc, #20]	@ (80014d0 <HAL_TIM_Base_MspInit+0xc4>)
 80014ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014bc:	f003 0301 	and.w	r3, r3, #1
 80014c0:	60bb      	str	r3, [r7, #8]
 80014c2:	68bb      	ldr	r3, [r7, #8]
}
 80014c4:	bf00      	nop
 80014c6:	3710      	adds	r7, #16
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	40010000 	.word	0x40010000
 80014d0:	40023800 	.word	0x40023800
 80014d4:	200001a4 	.word	0x200001a4
 80014d8:	40026488 	.word	0x40026488

080014dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b08a      	sub	sp, #40	@ 0x28
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e4:	f107 0314 	add.w	r3, r7, #20
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]
 80014f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a34      	ldr	r2, [pc, #208]	@ (80015cc <HAL_UART_MspInit+0xf0>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d161      	bne.n	80015c2 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	613b      	str	r3, [r7, #16]
 8001502:	4b33      	ldr	r3, [pc, #204]	@ (80015d0 <HAL_UART_MspInit+0xf4>)
 8001504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001506:	4a32      	ldr	r2, [pc, #200]	@ (80015d0 <HAL_UART_MspInit+0xf4>)
 8001508:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800150c:	6413      	str	r3, [r2, #64]	@ 0x40
 800150e:	4b30      	ldr	r3, [pc, #192]	@ (80015d0 <HAL_UART_MspInit+0xf4>)
 8001510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001512:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001516:	613b      	str	r3, [r7, #16]
 8001518:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	60fb      	str	r3, [r7, #12]
 800151e:	4b2c      	ldr	r3, [pc, #176]	@ (80015d0 <HAL_UART_MspInit+0xf4>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001522:	4a2b      	ldr	r2, [pc, #172]	@ (80015d0 <HAL_UART_MspInit+0xf4>)
 8001524:	f043 0301 	orr.w	r3, r3, #1
 8001528:	6313      	str	r3, [r2, #48]	@ 0x30
 800152a:	4b29      	ldr	r3, [pc, #164]	@ (80015d0 <HAL_UART_MspInit+0xf4>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001536:	230c      	movs	r3, #12
 8001538:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153a:	2302      	movs	r3, #2
 800153c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153e:	2300      	movs	r3, #0
 8001540:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001542:	2303      	movs	r3, #3
 8001544:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001546:	2307      	movs	r3, #7
 8001548:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800154a:	f107 0314 	add.w	r3, r7, #20
 800154e:	4619      	mov	r1, r3
 8001550:	4820      	ldr	r0, [pc, #128]	@ (80015d4 <HAL_UART_MspInit+0xf8>)
 8001552:	f001 fb11 	bl	8002b78 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001556:	4b20      	ldr	r3, [pc, #128]	@ (80015d8 <HAL_UART_MspInit+0xfc>)
 8001558:	4a20      	ldr	r2, [pc, #128]	@ (80015dc <HAL_UART_MspInit+0x100>)
 800155a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800155c:	4b1e      	ldr	r3, [pc, #120]	@ (80015d8 <HAL_UART_MspInit+0xfc>)
 800155e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001562:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001564:	4b1c      	ldr	r3, [pc, #112]	@ (80015d8 <HAL_UART_MspInit+0xfc>)
 8001566:	2240      	movs	r2, #64	@ 0x40
 8001568:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800156a:	4b1b      	ldr	r3, [pc, #108]	@ (80015d8 <HAL_UART_MspInit+0xfc>)
 800156c:	2200      	movs	r2, #0
 800156e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001570:	4b19      	ldr	r3, [pc, #100]	@ (80015d8 <HAL_UART_MspInit+0xfc>)
 8001572:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001576:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001578:	4b17      	ldr	r3, [pc, #92]	@ (80015d8 <HAL_UART_MspInit+0xfc>)
 800157a:	2200      	movs	r2, #0
 800157c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800157e:	4b16      	ldr	r3, [pc, #88]	@ (80015d8 <HAL_UART_MspInit+0xfc>)
 8001580:	2200      	movs	r2, #0
 8001582:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001584:	4b14      	ldr	r3, [pc, #80]	@ (80015d8 <HAL_UART_MspInit+0xfc>)
 8001586:	2200      	movs	r2, #0
 8001588:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800158a:	4b13      	ldr	r3, [pc, #76]	@ (80015d8 <HAL_UART_MspInit+0xfc>)
 800158c:	2200      	movs	r2, #0
 800158e:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001590:	4b11      	ldr	r3, [pc, #68]	@ (80015d8 <HAL_UART_MspInit+0xfc>)
 8001592:	2200      	movs	r2, #0
 8001594:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001596:	4810      	ldr	r0, [pc, #64]	@ (80015d8 <HAL_UART_MspInit+0xfc>)
 8001598:	f000 feec 	bl	8002374 <HAL_DMA_Init>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80015a2:	f7ff feb9 	bl	8001318 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4a0b      	ldr	r2, [pc, #44]	@ (80015d8 <HAL_UART_MspInit+0xfc>)
 80015aa:	639a      	str	r2, [r3, #56]	@ 0x38
 80015ac:	4a0a      	ldr	r2, [pc, #40]	@ (80015d8 <HAL_UART_MspInit+0xfc>)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80015b2:	2200      	movs	r2, #0
 80015b4:	2100      	movs	r1, #0
 80015b6:	2026      	movs	r0, #38	@ 0x26
 80015b8:	f000 fea5 	bl	8002306 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80015bc:	2026      	movs	r0, #38	@ 0x26
 80015be:	f000 febe 	bl	800233e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80015c2:	bf00      	nop
 80015c4:	3728      	adds	r7, #40	@ 0x28
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40004400 	.word	0x40004400
 80015d0:	40023800 	.word	0x40023800
 80015d4:	40020000 	.word	0x40020000
 80015d8:	2000024c 	.word	0x2000024c
 80015dc:	400260a0 	.word	0x400260a0

080015e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015e4:	bf00      	nop
 80015e6:	e7fd      	b.n	80015e4 <NMI_Handler+0x4>

080015e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ec:	bf00      	nop
 80015ee:	e7fd      	b.n	80015ec <HardFault_Handler+0x4>

080015f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015f4:	bf00      	nop
 80015f6:	e7fd      	b.n	80015f4 <MemManage_Handler+0x4>

080015f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015fc:	bf00      	nop
 80015fe:	e7fd      	b.n	80015fc <BusFault_Handler+0x4>

08001600 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001604:	bf00      	nop
 8001606:	e7fd      	b.n	8001604 <UsageFault_Handler+0x4>

08001608 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800160c:	bf00      	nop
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr

08001616 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001616:	b480      	push	{r7}
 8001618:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001628:	bf00      	nop
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr

08001632 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001632:	b580      	push	{r7, lr}
 8001634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001636:	f000 f8ef 	bl	8001818 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
	...

08001640 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001644:	4802      	ldr	r0, [pc, #8]	@ (8001650 <DMA1_Stream6_IRQHandler+0x10>)
 8001646:	f001 f82d 	bl	80026a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	2000024c 	.word	0x2000024c

08001654 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001658:	4802      	ldr	r0, [pc, #8]	@ (8001664 <ADC_IRQHandler+0x10>)
 800165a:	f000 fa1f 	bl	8001a9c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	200000cc 	.word	0x200000cc

08001668 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800166c:	4802      	ldr	r0, [pc, #8]	@ (8001678 <USART2_IRQHandler+0x10>)
 800166e:	f002 ffb1 	bl	80045d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	20000204 	.word	0x20000204

0800167c <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 8001680:	4802      	ldr	r0, [pc, #8]	@ (800168c <DMA2_Stream5_IRQHandler+0x10>)
 8001682:	f001 f80f 	bl	80026a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8001686:	bf00      	nop
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	200001a4 	.word	0x200001a4

08001690 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b086      	sub	sp, #24
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001698:	4a14      	ldr	r2, [pc, #80]	@ (80016ec <_sbrk+0x5c>)
 800169a:	4b15      	ldr	r3, [pc, #84]	@ (80016f0 <_sbrk+0x60>)
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016a4:	4b13      	ldr	r3, [pc, #76]	@ (80016f4 <_sbrk+0x64>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d102      	bne.n	80016b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016ac:	4b11      	ldr	r3, [pc, #68]	@ (80016f4 <_sbrk+0x64>)
 80016ae:	4a12      	ldr	r2, [pc, #72]	@ (80016f8 <_sbrk+0x68>)
 80016b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016b2:	4b10      	ldr	r3, [pc, #64]	@ (80016f4 <_sbrk+0x64>)
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4413      	add	r3, r2
 80016ba:	693a      	ldr	r2, [r7, #16]
 80016bc:	429a      	cmp	r2, r3
 80016be:	d207      	bcs.n	80016d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016c0:	f003 ff4a 	bl	8005558 <__errno>
 80016c4:	4603      	mov	r3, r0
 80016c6:	220c      	movs	r2, #12
 80016c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016ca:	f04f 33ff 	mov.w	r3, #4294967295
 80016ce:	e009      	b.n	80016e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016d0:	4b08      	ldr	r3, [pc, #32]	@ (80016f4 <_sbrk+0x64>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016d6:	4b07      	ldr	r3, [pc, #28]	@ (80016f4 <_sbrk+0x64>)
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4413      	add	r3, r2
 80016de:	4a05      	ldr	r2, [pc, #20]	@ (80016f4 <_sbrk+0x64>)
 80016e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016e2:	68fb      	ldr	r3, [r7, #12]
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3718      	adds	r7, #24
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	20020000 	.word	0x20020000
 80016f0:	00000400 	.word	0x00000400
 80016f4:	2000099c 	.word	0x2000099c
 80016f8:	20000af0 	.word	0x20000af0

080016fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001700:	4b06      	ldr	r3, [pc, #24]	@ (800171c <SystemInit+0x20>)
 8001702:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001706:	4a05      	ldr	r2, [pc, #20]	@ (800171c <SystemInit+0x20>)
 8001708:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800170c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001710:	bf00      	nop
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	e000ed00 	.word	0xe000ed00

08001720 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001720:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001758 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001724:	f7ff ffea 	bl	80016fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001728:	480c      	ldr	r0, [pc, #48]	@ (800175c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800172a:	490d      	ldr	r1, [pc, #52]	@ (8001760 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800172c:	4a0d      	ldr	r2, [pc, #52]	@ (8001764 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800172e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001730:	e002      	b.n	8001738 <LoopCopyDataInit>

08001732 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001732:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001734:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001736:	3304      	adds	r3, #4

08001738 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001738:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800173a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800173c:	d3f9      	bcc.n	8001732 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800173e:	4a0a      	ldr	r2, [pc, #40]	@ (8001768 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001740:	4c0a      	ldr	r4, [pc, #40]	@ (800176c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001742:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001744:	e001      	b.n	800174a <LoopFillZerobss>

08001746 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001746:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001748:	3204      	adds	r2, #4

0800174a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800174a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800174c:	d3fb      	bcc.n	8001746 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800174e:	f003 ff09 	bl	8005564 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001752:	f7ff fa35 	bl	8000bc0 <main>
  bx  lr    
 8001756:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001758:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800175c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001760:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001764:	08005f4c 	.word	0x08005f4c
  ldr r2, =_sbss
 8001768:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800176c:	20000aec 	.word	0x20000aec

08001770 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001770:	e7fe      	b.n	8001770 <CAN1_RX0_IRQHandler>
	...

08001774 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001778:	4b0e      	ldr	r3, [pc, #56]	@ (80017b4 <HAL_Init+0x40>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a0d      	ldr	r2, [pc, #52]	@ (80017b4 <HAL_Init+0x40>)
 800177e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001782:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001784:	4b0b      	ldr	r3, [pc, #44]	@ (80017b4 <HAL_Init+0x40>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a0a      	ldr	r2, [pc, #40]	@ (80017b4 <HAL_Init+0x40>)
 800178a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800178e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001790:	4b08      	ldr	r3, [pc, #32]	@ (80017b4 <HAL_Init+0x40>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a07      	ldr	r2, [pc, #28]	@ (80017b4 <HAL_Init+0x40>)
 8001796:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800179a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800179c:	2003      	movs	r0, #3
 800179e:	f000 fda7 	bl	80022f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017a2:	2000      	movs	r0, #0
 80017a4:	f000 f808 	bl	80017b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017a8:	f7ff fdbc 	bl	8001324 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40023c00 	.word	0x40023c00

080017b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017c0:	4b12      	ldr	r3, [pc, #72]	@ (800180c <HAL_InitTick+0x54>)
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	4b12      	ldr	r3, [pc, #72]	@ (8001810 <HAL_InitTick+0x58>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	4619      	mov	r1, r3
 80017ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80017d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017d6:	4618      	mov	r0, r3
 80017d8:	f000 fdbf 	bl	800235a <HAL_SYSTICK_Config>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e00e      	b.n	8001804 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2b0f      	cmp	r3, #15
 80017ea:	d80a      	bhi.n	8001802 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017ec:	2200      	movs	r2, #0
 80017ee:	6879      	ldr	r1, [r7, #4]
 80017f0:	f04f 30ff 	mov.w	r0, #4294967295
 80017f4:	f000 fd87 	bl	8002306 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017f8:	4a06      	ldr	r2, [pc, #24]	@ (8001814 <HAL_InitTick+0x5c>)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017fe:	2300      	movs	r3, #0
 8001800:	e000      	b.n	8001804 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
}
 8001804:	4618      	mov	r0, r3
 8001806:	3708      	adds	r7, #8
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	20000000 	.word	0x20000000
 8001810:	20000008 	.word	0x20000008
 8001814:	20000004 	.word	0x20000004

08001818 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800181c:	4b06      	ldr	r3, [pc, #24]	@ (8001838 <HAL_IncTick+0x20>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	461a      	mov	r2, r3
 8001822:	4b06      	ldr	r3, [pc, #24]	@ (800183c <HAL_IncTick+0x24>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4413      	add	r3, r2
 8001828:	4a04      	ldr	r2, [pc, #16]	@ (800183c <HAL_IncTick+0x24>)
 800182a:	6013      	str	r3, [r2, #0]
}
 800182c:	bf00      	nop
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	20000008 	.word	0x20000008
 800183c:	200009a0 	.word	0x200009a0

08001840 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  return uwTick;
 8001844:	4b03      	ldr	r3, [pc, #12]	@ (8001854 <HAL_GetTick+0x14>)
 8001846:	681b      	ldr	r3, [r3, #0]
}
 8001848:	4618      	mov	r0, r3
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	200009a0 	.word	0x200009a0

08001858 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001860:	2300      	movs	r3, #0
 8001862:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d101      	bne.n	800186e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e033      	b.n	80018d6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001872:	2b00      	cmp	r3, #0
 8001874:	d109      	bne.n	800188a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f7ff fd7c 	bl	8001374 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2200      	movs	r2, #0
 8001880:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2200      	movs	r2, #0
 8001886:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800188e:	f003 0310 	and.w	r3, r3, #16
 8001892:	2b00      	cmp	r3, #0
 8001894:	d118      	bne.n	80018c8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800189a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800189e:	f023 0302 	bic.w	r3, r3, #2
 80018a2:	f043 0202 	orr.w	r2, r3, #2
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f000 fb4a 	bl	8001f44 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2200      	movs	r2, #0
 80018b4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ba:	f023 0303 	bic.w	r3, r3, #3
 80018be:	f043 0201 	orr.w	r2, r3, #1
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	641a      	str	r2, [r3, #64]	@ 0x40
 80018c6:	e001      	b.n	80018cc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2200      	movs	r2, #0
 80018d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80018d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
	...

080018e0 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80018e8:	2300      	movs	r3, #0
 80018ea:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d101      	bne.n	80018fa <HAL_ADC_Start_IT+0x1a>
 80018f6:	2302      	movs	r3, #2
 80018f8:	e0bd      	b.n	8001a76 <HAL_ADC_Start_IT+0x196>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2201      	movs	r2, #1
 80018fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	f003 0301 	and.w	r3, r3, #1
 800190c:	2b01      	cmp	r3, #1
 800190e:	d018      	beq.n	8001942 <HAL_ADC_Start_IT+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	689a      	ldr	r2, [r3, #8]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f042 0201 	orr.w	r2, r2, #1
 800191e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001920:	4b58      	ldr	r3, [pc, #352]	@ (8001a84 <HAL_ADC_Start_IT+0x1a4>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a58      	ldr	r2, [pc, #352]	@ (8001a88 <HAL_ADC_Start_IT+0x1a8>)
 8001926:	fba2 2303 	umull	r2, r3, r2, r3
 800192a:	0c9a      	lsrs	r2, r3, #18
 800192c:	4613      	mov	r3, r2
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	4413      	add	r3, r2
 8001932:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001934:	e002      	b.n	800193c <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	3b01      	subs	r3, #1
 800193a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d1f9      	bne.n	8001936 <HAL_ADC_Start_IT+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	f003 0301 	and.w	r3, r3, #1
 800194c:	2b01      	cmp	r3, #1
 800194e:	f040 8085 	bne.w	8001a5c <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001956:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800195a:	f023 0301 	bic.w	r3, r3, #1
 800195e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001970:	2b00      	cmp	r3, #0
 8001972:	d007      	beq.n	8001984 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001978:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800197c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001988:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800198c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001990:	d106      	bne.n	80019a0 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001996:	f023 0206 	bic.w	r2, r3, #6
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	645a      	str	r2, [r3, #68]	@ 0x44
 800199e:	e002      	b.n	80019a6 <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2200      	movs	r2, #0
 80019a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2200      	movs	r2, #0
 80019aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019ae:	4b37      	ldr	r3, [pc, #220]	@ (8001a8c <HAL_ADC_Start_IT+0x1ac>)
 80019b0:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80019ba:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	6812      	ldr	r2, [r2, #0]
 80019c6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80019ca:	f043 0320 	orr.w	r3, r3, #32
 80019ce:	6053      	str	r3, [r2, #4]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f003 031f 	and.w	r3, r3, #31
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d12a      	bne.n	8001a32 <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a2b      	ldr	r2, [pc, #172]	@ (8001a90 <HAL_ADC_Start_IT+0x1b0>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d015      	beq.n	8001a12 <HAL_ADC_Start_IT+0x132>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a2a      	ldr	r2, [pc, #168]	@ (8001a94 <HAL_ADC_Start_IT+0x1b4>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d105      	bne.n	80019fc <HAL_ADC_Start_IT+0x11c>
 80019f0:	4b26      	ldr	r3, [pc, #152]	@ (8001a8c <HAL_ADC_Start_IT+0x1ac>)
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f003 031f 	and.w	r3, r3, #31
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d00a      	beq.n	8001a12 <HAL_ADC_Start_IT+0x132>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a25      	ldr	r2, [pc, #148]	@ (8001a98 <HAL_ADC_Start_IT+0x1b8>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d136      	bne.n	8001a74 <HAL_ADC_Start_IT+0x194>
 8001a06:	4b21      	ldr	r3, [pc, #132]	@ (8001a8c <HAL_ADC_Start_IT+0x1ac>)
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f003 0310 	and.w	r3, r3, #16
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d130      	bne.n	8001a74 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d129      	bne.n	8001a74 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	689a      	ldr	r2, [r3, #8]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001a2e:	609a      	str	r2, [r3, #8]
 8001a30:	e020      	b.n	8001a74 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a16      	ldr	r2, [pc, #88]	@ (8001a90 <HAL_ADC_Start_IT+0x1b0>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d11b      	bne.n	8001a74 <HAL_ADC_Start_IT+0x194>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d114      	bne.n	8001a74 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	689a      	ldr	r2, [r3, #8]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001a58:	609a      	str	r2, [r3, #8]
 8001a5a:	e00b      	b.n	8001a74 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a60:	f043 0210 	orr.w	r2, r3, #16
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a6c:	f043 0201 	orr.w	r2, r3, #1
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3714      	adds	r7, #20
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	20000000 	.word	0x20000000
 8001a88:	431bde83 	.word	0x431bde83
 8001a8c:	40012300 	.word	0x40012300
 8001a90:	40012000 	.word	0x40012000
 8001a94:	40012100 	.word	0x40012100
 8001a98:	40012200 	.word	0x40012200

08001a9c <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b086      	sub	sp, #24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	617b      	str	r3, [r7, #20]
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	f003 0320 	and.w	r3, r3, #32
 8001aca:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d049      	beq.n	8001b66 <HAL_ADC_IRQHandler+0xca>
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d046      	beq.n	8001b66 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001adc:	f003 0310 	and.w	r3, r3, #16
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d105      	bne.n	8001af0 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d12b      	bne.n	8001b56 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d127      	bne.n	8001b56 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b0c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d006      	beq.n	8001b22 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d119      	bne.n	8001b56 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	685a      	ldr	r2, [r3, #4]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f022 0220 	bic.w	r2, r2, #32
 8001b30:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b36:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b42:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d105      	bne.n	8001b56 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b4e:	f043 0201 	orr.w	r2, r3, #1
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f7fe ffd8 	bl	8000b0c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f06f 0212 	mvn.w	r2, #18
 8001b64:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	f003 0304 	and.w	r3, r3, #4
 8001b6c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b74:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d057      	beq.n	8001c2c <HAL_ADC_IRQHandler+0x190>
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d054      	beq.n	8001c2c <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b86:	f003 0310 	and.w	r3, r3, #16
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d105      	bne.n	8001b9a <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b92:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d139      	bne.n	8001c1c <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bae:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d006      	beq.n	8001bc4 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d12b      	bne.n	8001c1c <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d124      	bne.n	8001c1c <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d11d      	bne.n	8001c1c <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d119      	bne.n	8001c1c <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	685a      	ldr	r2, [r3, #4]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001bf6:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bfc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d105      	bne.n	8001c1c <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c14:	f043 0201 	orr.w	r2, r3, #1
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f000 fa8d 	bl	800213c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f06f 020c 	mvn.w	r2, #12
 8001c2a:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	f003 0301 	and.w	r3, r3, #1
 8001c32:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c3a:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d017      	beq.n	8001c72 <HAL_ADC_IRQHandler+0x1d6>
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d014      	beq.n	8001c72 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d10d      	bne.n	8001c72 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c5a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f000 f837 	bl	8001cd6 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f06f 0201 	mvn.w	r2, #1
 8001c70:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	f003 0320 	and.w	r3, r3, #32
 8001c78:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001c80:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d015      	beq.n	8001cb4 <HAL_ADC_IRQHandler+0x218>
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d012      	beq.n	8001cb4 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c92:	f043 0202 	orr.w	r2, r3, #2
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f06f 0220 	mvn.w	r2, #32
 8001ca2:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f000 f820 	bl	8001cea <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f06f 0220 	mvn.w	r2, #32
 8001cb2:	601a      	str	r2, [r3, #0]
  }
}
 8001cb4:	bf00      	nop
 8001cb6:	3718      	adds	r7, #24
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr

08001cd6 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	b083      	sub	sp, #12
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001cde:	bf00      	nop
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr

08001cea <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001cea:	b480      	push	{r7}
 8001cec:	b083      	sub	sp, #12
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001cf2:	bf00      	nop
 8001cf4:	370c      	adds	r7, #12
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
	...

08001d00 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b085      	sub	sp, #20
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d101      	bne.n	8001d1c <HAL_ADC_ConfigChannel+0x1c>
 8001d18:	2302      	movs	r3, #2
 8001d1a:	e105      	b.n	8001f28 <HAL_ADC_ConfigChannel+0x228>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2b09      	cmp	r3, #9
 8001d2a:	d925      	bls.n	8001d78 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	68d9      	ldr	r1, [r3, #12]
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	461a      	mov	r2, r3
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	4413      	add	r3, r2
 8001d40:	3b1e      	subs	r3, #30
 8001d42:	2207      	movs	r2, #7
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	43da      	mvns	r2, r3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	400a      	ands	r2, r1
 8001d50:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	68d9      	ldr	r1, [r3, #12]
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	689a      	ldr	r2, [r3, #8]
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	4618      	mov	r0, r3
 8001d64:	4603      	mov	r3, r0
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	4403      	add	r3, r0
 8001d6a:	3b1e      	subs	r3, #30
 8001d6c:	409a      	lsls	r2, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	430a      	orrs	r2, r1
 8001d74:	60da      	str	r2, [r3, #12]
 8001d76:	e022      	b.n	8001dbe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	6919      	ldr	r1, [r3, #16]
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	461a      	mov	r2, r3
 8001d86:	4613      	mov	r3, r2
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	4413      	add	r3, r2
 8001d8c:	2207      	movs	r2, #7
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	43da      	mvns	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	400a      	ands	r2, r1
 8001d9a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	6919      	ldr	r1, [r3, #16]
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	689a      	ldr	r2, [r3, #8]
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	4618      	mov	r0, r3
 8001dae:	4603      	mov	r3, r0
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	4403      	add	r3, r0
 8001db4:	409a      	lsls	r2, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	2b06      	cmp	r3, #6
 8001dc4:	d824      	bhi.n	8001e10 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685a      	ldr	r2, [r3, #4]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	4413      	add	r3, r2
 8001dd6:	3b05      	subs	r3, #5
 8001dd8:	221f      	movs	r2, #31
 8001dda:	fa02 f303 	lsl.w	r3, r2, r3
 8001dde:	43da      	mvns	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	400a      	ands	r2, r1
 8001de6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	4618      	mov	r0, r3
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	685a      	ldr	r2, [r3, #4]
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	4413      	add	r3, r2
 8001e00:	3b05      	subs	r3, #5
 8001e02:	fa00 f203 	lsl.w	r2, r0, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	430a      	orrs	r2, r1
 8001e0c:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e0e:	e04c      	b.n	8001eaa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	2b0c      	cmp	r3, #12
 8001e16:	d824      	bhi.n	8001e62 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	685a      	ldr	r2, [r3, #4]
 8001e22:	4613      	mov	r3, r2
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	4413      	add	r3, r2
 8001e28:	3b23      	subs	r3, #35	@ 0x23
 8001e2a:	221f      	movs	r2, #31
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	43da      	mvns	r2, r3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	400a      	ands	r2, r1
 8001e38:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	b29b      	uxth	r3, r3
 8001e46:	4618      	mov	r0, r3
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685a      	ldr	r2, [r3, #4]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	4413      	add	r3, r2
 8001e52:	3b23      	subs	r3, #35	@ 0x23
 8001e54:	fa00 f203 	lsl.w	r2, r0, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001e60:	e023      	b.n	8001eaa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685a      	ldr	r2, [r3, #4]
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	4413      	add	r3, r2
 8001e72:	3b41      	subs	r3, #65	@ 0x41
 8001e74:	221f      	movs	r2, #31
 8001e76:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7a:	43da      	mvns	r2, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	400a      	ands	r2, r1
 8001e82:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	4618      	mov	r0, r3
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685a      	ldr	r2, [r3, #4]
 8001e96:	4613      	mov	r3, r2
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	4413      	add	r3, r2
 8001e9c:	3b41      	subs	r3, #65	@ 0x41
 8001e9e:	fa00 f203 	lsl.w	r2, r0, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	430a      	orrs	r2, r1
 8001ea8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001eaa:	4b22      	ldr	r3, [pc, #136]	@ (8001f34 <HAL_ADC_ConfigChannel+0x234>)
 8001eac:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a21      	ldr	r2, [pc, #132]	@ (8001f38 <HAL_ADC_ConfigChannel+0x238>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d109      	bne.n	8001ecc <HAL_ADC_ConfigChannel+0x1cc>
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2b12      	cmp	r3, #18
 8001ebe:	d105      	bne.n	8001ecc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a19      	ldr	r2, [pc, #100]	@ (8001f38 <HAL_ADC_ConfigChannel+0x238>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d123      	bne.n	8001f1e <HAL_ADC_ConfigChannel+0x21e>
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	2b10      	cmp	r3, #16
 8001edc:	d003      	beq.n	8001ee6 <HAL_ADC_ConfigChannel+0x1e6>
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	2b11      	cmp	r3, #17
 8001ee4:	d11b      	bne.n	8001f1e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	2b10      	cmp	r3, #16
 8001ef8:	d111      	bne.n	8001f1e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001efa:	4b10      	ldr	r3, [pc, #64]	@ (8001f3c <HAL_ADC_ConfigChannel+0x23c>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a10      	ldr	r2, [pc, #64]	@ (8001f40 <HAL_ADC_ConfigChannel+0x240>)
 8001f00:	fba2 2303 	umull	r2, r3, r2, r3
 8001f04:	0c9a      	lsrs	r2, r3, #18
 8001f06:	4613      	mov	r3, r2
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	4413      	add	r3, r2
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001f10:	e002      	b.n	8001f18 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	3b01      	subs	r3, #1
 8001f16:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d1f9      	bne.n	8001f12 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001f26:	2300      	movs	r3, #0
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3714      	adds	r7, #20
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr
 8001f34:	40012300 	.word	0x40012300
 8001f38:	40012000 	.word	0x40012000
 8001f3c:	20000000 	.word	0x20000000
 8001f40:	431bde83 	.word	0x431bde83

08001f44 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f4c:	4b79      	ldr	r3, [pc, #484]	@ (8002134 <ADC_Init+0x1f0>)
 8001f4e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	685a      	ldr	r2, [r3, #4]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	431a      	orrs	r2, r3
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	685a      	ldr	r2, [r3, #4]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001f78:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	6859      	ldr	r1, [r3, #4]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	691b      	ldr	r3, [r3, #16]
 8001f84:	021a      	lsls	r2, r3, #8
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	430a      	orrs	r2, r1
 8001f8c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	685a      	ldr	r2, [r3, #4]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001f9c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	6859      	ldr	r1, [r3, #4]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	689a      	ldr	r2, [r3, #8]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	430a      	orrs	r2, r1
 8001fae:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	689a      	ldr	r2, [r3, #8]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001fbe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	6899      	ldr	r1, [r3, #8]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	68da      	ldr	r2, [r3, #12]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	430a      	orrs	r2, r1
 8001fd0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fd6:	4a58      	ldr	r2, [pc, #352]	@ (8002138 <ADC_Init+0x1f4>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d022      	beq.n	8002022 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	689a      	ldr	r2, [r3, #8]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001fea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	6899      	ldr	r1, [r3, #8]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	430a      	orrs	r2, r1
 8001ffc:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	689a      	ldr	r2, [r3, #8]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800200c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	6899      	ldr	r1, [r3, #8]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	430a      	orrs	r2, r1
 800201e:	609a      	str	r2, [r3, #8]
 8002020:	e00f      	b.n	8002042 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	689a      	ldr	r2, [r3, #8]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002030:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	689a      	ldr	r2, [r3, #8]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002040:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	689a      	ldr	r2, [r3, #8]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f022 0202 	bic.w	r2, r2, #2
 8002050:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	6899      	ldr	r1, [r3, #8]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	7e1b      	ldrb	r3, [r3, #24]
 800205c:	005a      	lsls	r2, r3, #1
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	430a      	orrs	r2, r1
 8002064:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f893 3020 	ldrb.w	r3, [r3, #32]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d01b      	beq.n	80020a8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	685a      	ldr	r2, [r3, #4]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800207e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	685a      	ldr	r2, [r3, #4]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800208e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	6859      	ldr	r1, [r3, #4]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800209a:	3b01      	subs	r3, #1
 800209c:	035a      	lsls	r2, r3, #13
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	430a      	orrs	r2, r1
 80020a4:	605a      	str	r2, [r3, #4]
 80020a6:	e007      	b.n	80020b8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	685a      	ldr	r2, [r3, #4]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80020b6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80020c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	69db      	ldr	r3, [r3, #28]
 80020d2:	3b01      	subs	r3, #1
 80020d4:	051a      	lsls	r2, r3, #20
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	430a      	orrs	r2, r1
 80020dc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	689a      	ldr	r2, [r3, #8]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80020ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	6899      	ldr	r1, [r3, #8]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80020fa:	025a      	lsls	r2, r3, #9
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	430a      	orrs	r2, r1
 8002102:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	689a      	ldr	r2, [r3, #8]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002112:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	6899      	ldr	r1, [r3, #8]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	695b      	ldr	r3, [r3, #20]
 800211e:	029a      	lsls	r2, r3, #10
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	430a      	orrs	r2, r1
 8002126:	609a      	str	r2, [r3, #8]
}
 8002128:	bf00      	nop
 800212a:	3714      	adds	r7, #20
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr
 8002134:	40012300 	.word	0x40012300
 8002138:	0f000001 	.word	0x0f000001

0800213c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002150:	b480      	push	{r7}
 8002152:	b085      	sub	sp, #20
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f003 0307 	and.w	r3, r3, #7
 800215e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002160:	4b0c      	ldr	r3, [pc, #48]	@ (8002194 <__NVIC_SetPriorityGrouping+0x44>)
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002166:	68ba      	ldr	r2, [r7, #8]
 8002168:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800216c:	4013      	ands	r3, r2
 800216e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002178:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800217c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002180:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002182:	4a04      	ldr	r2, [pc, #16]	@ (8002194 <__NVIC_SetPriorityGrouping+0x44>)
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	60d3      	str	r3, [r2, #12]
}
 8002188:	bf00      	nop
 800218a:	3714      	adds	r7, #20
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr
 8002194:	e000ed00 	.word	0xe000ed00

08002198 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800219c:	4b04      	ldr	r3, [pc, #16]	@ (80021b0 <__NVIC_GetPriorityGrouping+0x18>)
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	0a1b      	lsrs	r3, r3, #8
 80021a2:	f003 0307 	and.w	r3, r3, #7
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr
 80021b0:	e000ed00 	.word	0xe000ed00

080021b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	4603      	mov	r3, r0
 80021bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	db0b      	blt.n	80021de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021c6:	79fb      	ldrb	r3, [r7, #7]
 80021c8:	f003 021f 	and.w	r2, r3, #31
 80021cc:	4907      	ldr	r1, [pc, #28]	@ (80021ec <__NVIC_EnableIRQ+0x38>)
 80021ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d2:	095b      	lsrs	r3, r3, #5
 80021d4:	2001      	movs	r0, #1
 80021d6:	fa00 f202 	lsl.w	r2, r0, r2
 80021da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021de:	bf00      	nop
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	e000e100 	.word	0xe000e100

080021f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	4603      	mov	r3, r0
 80021f8:	6039      	str	r1, [r7, #0]
 80021fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002200:	2b00      	cmp	r3, #0
 8002202:	db0a      	blt.n	800221a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	b2da      	uxtb	r2, r3
 8002208:	490c      	ldr	r1, [pc, #48]	@ (800223c <__NVIC_SetPriority+0x4c>)
 800220a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800220e:	0112      	lsls	r2, r2, #4
 8002210:	b2d2      	uxtb	r2, r2
 8002212:	440b      	add	r3, r1
 8002214:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002218:	e00a      	b.n	8002230 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	b2da      	uxtb	r2, r3
 800221e:	4908      	ldr	r1, [pc, #32]	@ (8002240 <__NVIC_SetPriority+0x50>)
 8002220:	79fb      	ldrb	r3, [r7, #7]
 8002222:	f003 030f 	and.w	r3, r3, #15
 8002226:	3b04      	subs	r3, #4
 8002228:	0112      	lsls	r2, r2, #4
 800222a:	b2d2      	uxtb	r2, r2
 800222c:	440b      	add	r3, r1
 800222e:	761a      	strb	r2, [r3, #24]
}
 8002230:	bf00      	nop
 8002232:	370c      	adds	r7, #12
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr
 800223c:	e000e100 	.word	0xe000e100
 8002240:	e000ed00 	.word	0xe000ed00

08002244 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002244:	b480      	push	{r7}
 8002246:	b089      	sub	sp, #36	@ 0x24
 8002248:	af00      	add	r7, sp, #0
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	60b9      	str	r1, [r7, #8]
 800224e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	f003 0307 	and.w	r3, r3, #7
 8002256:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	f1c3 0307 	rsb	r3, r3, #7
 800225e:	2b04      	cmp	r3, #4
 8002260:	bf28      	it	cs
 8002262:	2304      	movcs	r3, #4
 8002264:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	3304      	adds	r3, #4
 800226a:	2b06      	cmp	r3, #6
 800226c:	d902      	bls.n	8002274 <NVIC_EncodePriority+0x30>
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	3b03      	subs	r3, #3
 8002272:	e000      	b.n	8002276 <NVIC_EncodePriority+0x32>
 8002274:	2300      	movs	r3, #0
 8002276:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002278:	f04f 32ff 	mov.w	r2, #4294967295
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	fa02 f303 	lsl.w	r3, r2, r3
 8002282:	43da      	mvns	r2, r3
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	401a      	ands	r2, r3
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800228c:	f04f 31ff 	mov.w	r1, #4294967295
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	fa01 f303 	lsl.w	r3, r1, r3
 8002296:	43d9      	mvns	r1, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800229c:	4313      	orrs	r3, r2
         );
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3724      	adds	r7, #36	@ 0x24
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
	...

080022ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	3b01      	subs	r3, #1
 80022b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022bc:	d301      	bcc.n	80022c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022be:	2301      	movs	r3, #1
 80022c0:	e00f      	b.n	80022e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022c2:	4a0a      	ldr	r2, [pc, #40]	@ (80022ec <SysTick_Config+0x40>)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	3b01      	subs	r3, #1
 80022c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022ca:	210f      	movs	r1, #15
 80022cc:	f04f 30ff 	mov.w	r0, #4294967295
 80022d0:	f7ff ff8e 	bl	80021f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022d4:	4b05      	ldr	r3, [pc, #20]	@ (80022ec <SysTick_Config+0x40>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022da:	4b04      	ldr	r3, [pc, #16]	@ (80022ec <SysTick_Config+0x40>)
 80022dc:	2207      	movs	r2, #7
 80022de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3708      	adds	r7, #8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	e000e010 	.word	0xe000e010

080022f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f7ff ff29 	bl	8002150 <__NVIC_SetPriorityGrouping>
}
 80022fe:	bf00      	nop
 8002300:	3708      	adds	r7, #8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}

08002306 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002306:	b580      	push	{r7, lr}
 8002308:	b086      	sub	sp, #24
 800230a:	af00      	add	r7, sp, #0
 800230c:	4603      	mov	r3, r0
 800230e:	60b9      	str	r1, [r7, #8]
 8002310:	607a      	str	r2, [r7, #4]
 8002312:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002314:	2300      	movs	r3, #0
 8002316:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002318:	f7ff ff3e 	bl	8002198 <__NVIC_GetPriorityGrouping>
 800231c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	68b9      	ldr	r1, [r7, #8]
 8002322:	6978      	ldr	r0, [r7, #20]
 8002324:	f7ff ff8e 	bl	8002244 <NVIC_EncodePriority>
 8002328:	4602      	mov	r2, r0
 800232a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800232e:	4611      	mov	r1, r2
 8002330:	4618      	mov	r0, r3
 8002332:	f7ff ff5d 	bl	80021f0 <__NVIC_SetPriority>
}
 8002336:	bf00      	nop
 8002338:	3718      	adds	r7, #24
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800233e:	b580      	push	{r7, lr}
 8002340:	b082      	sub	sp, #8
 8002342:	af00      	add	r7, sp, #0
 8002344:	4603      	mov	r3, r0
 8002346:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002348:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800234c:	4618      	mov	r0, r3
 800234e:	f7ff ff31 	bl	80021b4 <__NVIC_EnableIRQ>
}
 8002352:	bf00      	nop
 8002354:	3708      	adds	r7, #8
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}

0800235a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800235a:	b580      	push	{r7, lr}
 800235c:	b082      	sub	sp, #8
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f7ff ffa2 	bl	80022ac <SysTick_Config>
 8002368:	4603      	mov	r3, r0
}
 800236a:	4618      	mov	r0, r3
 800236c:	3708      	adds	r7, #8
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
	...

08002374 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b086      	sub	sp, #24
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800237c:	2300      	movs	r3, #0
 800237e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002380:	f7ff fa5e 	bl	8001840 <HAL_GetTick>
 8002384:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d101      	bne.n	8002390 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e099      	b.n	80024c4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2202      	movs	r2, #2
 8002394:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f022 0201 	bic.w	r2, r2, #1
 80023ae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023b0:	e00f      	b.n	80023d2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023b2:	f7ff fa45 	bl	8001840 <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	2b05      	cmp	r3, #5
 80023be:	d908      	bls.n	80023d2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2220      	movs	r2, #32
 80023c4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2203      	movs	r2, #3
 80023ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e078      	b.n	80024c4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0301 	and.w	r3, r3, #1
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d1e8      	bne.n	80023b2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80023e8:	697a      	ldr	r2, [r7, #20]
 80023ea:	4b38      	ldr	r3, [pc, #224]	@ (80024cc <HAL_DMA_Init+0x158>)
 80023ec:	4013      	ands	r3, r2
 80023ee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685a      	ldr	r2, [r3, #4]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	691b      	ldr	r3, [r3, #16]
 8002404:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800240a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	699b      	ldr	r3, [r3, #24]
 8002410:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002416:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a1b      	ldr	r3, [r3, #32]
 800241c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800241e:	697a      	ldr	r2, [r7, #20]
 8002420:	4313      	orrs	r3, r2
 8002422:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002428:	2b04      	cmp	r3, #4
 800242a:	d107      	bne.n	800243c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002434:	4313      	orrs	r3, r2
 8002436:	697a      	ldr	r2, [r7, #20]
 8002438:	4313      	orrs	r3, r2
 800243a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	697a      	ldr	r2, [r7, #20]
 8002442:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	695b      	ldr	r3, [r3, #20]
 800244a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	f023 0307 	bic.w	r3, r3, #7
 8002452:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002458:	697a      	ldr	r2, [r7, #20]
 800245a:	4313      	orrs	r3, r2
 800245c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002462:	2b04      	cmp	r3, #4
 8002464:	d117      	bne.n	8002496 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800246a:	697a      	ldr	r2, [r7, #20]
 800246c:	4313      	orrs	r3, r2
 800246e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002474:	2b00      	cmp	r3, #0
 8002476:	d00e      	beq.n	8002496 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f000 fb01 	bl	8002a80 <DMA_CheckFifoParam>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d008      	beq.n	8002496 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2240      	movs	r2, #64	@ 0x40
 8002488:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2201      	movs	r2, #1
 800248e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002492:	2301      	movs	r3, #1
 8002494:	e016      	b.n	80024c4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	697a      	ldr	r2, [r7, #20]
 800249c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f000 fab8 	bl	8002a14 <DMA_CalcBaseAndBitshift>
 80024a4:	4603      	mov	r3, r0
 80024a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024ac:	223f      	movs	r2, #63	@ 0x3f
 80024ae:	409a      	lsls	r2, r3
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2201      	movs	r2, #1
 80024be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3718      	adds	r7, #24
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	f010803f 	.word	0xf010803f

080024d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b086      	sub	sp, #24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	60b9      	str	r1, [r7, #8]
 80024da:	607a      	str	r2, [r7, #4]
 80024dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024de:	2300      	movs	r3, #0
 80024e0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024e6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d101      	bne.n	80024f6 <HAL_DMA_Start_IT+0x26>
 80024f2:	2302      	movs	r3, #2
 80024f4:	e040      	b.n	8002578 <HAL_DMA_Start_IT+0xa8>
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2201      	movs	r2, #1
 80024fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002504:	b2db      	uxtb	r3, r3
 8002506:	2b01      	cmp	r3, #1
 8002508:	d12f      	bne.n	800256a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2202      	movs	r2, #2
 800250e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2200      	movs	r2, #0
 8002516:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	68b9      	ldr	r1, [r7, #8]
 800251e:	68f8      	ldr	r0, [r7, #12]
 8002520:	f000 fa4a 	bl	80029b8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002528:	223f      	movs	r2, #63	@ 0x3f
 800252a:	409a      	lsls	r2, r3
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f042 0216 	orr.w	r2, r2, #22
 800253e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002544:	2b00      	cmp	r3, #0
 8002546:	d007      	beq.n	8002558 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f042 0208 	orr.w	r2, r2, #8
 8002556:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f042 0201 	orr.w	r2, r2, #1
 8002566:	601a      	str	r2, [r3, #0]
 8002568:	e005      	b.n	8002576 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2200      	movs	r2, #0
 800256e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002572:	2302      	movs	r3, #2
 8002574:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002576:	7dfb      	ldrb	r3, [r7, #23]
}
 8002578:	4618      	mov	r0, r3
 800257a:	3718      	adds	r7, #24
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800258c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800258e:	f7ff f957 	bl	8001840 <HAL_GetTick>
 8002592:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800259a:	b2db      	uxtb	r3, r3
 800259c:	2b02      	cmp	r3, #2
 800259e:	d008      	beq.n	80025b2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2280      	movs	r2, #128	@ 0x80
 80025a4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e052      	b.n	8002658 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f022 0216 	bic.w	r2, r2, #22
 80025c0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	695a      	ldr	r2, [r3, #20]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80025d0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d103      	bne.n	80025e2 <HAL_DMA_Abort+0x62>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d007      	beq.n	80025f2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f022 0208 	bic.w	r2, r2, #8
 80025f0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f022 0201 	bic.w	r2, r2, #1
 8002600:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002602:	e013      	b.n	800262c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002604:	f7ff f91c 	bl	8001840 <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	2b05      	cmp	r3, #5
 8002610:	d90c      	bls.n	800262c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2220      	movs	r2, #32
 8002616:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2203      	movs	r2, #3
 800261c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2200      	movs	r2, #0
 8002624:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e015      	b.n	8002658 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0301 	and.w	r3, r3, #1
 8002636:	2b00      	cmp	r3, #0
 8002638:	d1e4      	bne.n	8002604 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800263e:	223f      	movs	r2, #63	@ 0x3f
 8002640:	409a      	lsls	r2, r3
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2201      	movs	r2, #1
 800264a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002656:	2300      	movs	r3, #0
}
 8002658:	4618      	mov	r0, r3
 800265a:	3710      	adds	r7, #16
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}

08002660 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800266e:	b2db      	uxtb	r3, r3
 8002670:	2b02      	cmp	r3, #2
 8002672:	d004      	beq.n	800267e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2280      	movs	r2, #128	@ 0x80
 8002678:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e00c      	b.n	8002698 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2205      	movs	r2, #5
 8002682:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f022 0201 	bic.w	r2, r2, #1
 8002694:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002696:	2300      	movs	r3, #0
}
 8002698:	4618      	mov	r0, r3
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b086      	sub	sp, #24
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80026ac:	2300      	movs	r3, #0
 80026ae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80026b0:	4b8e      	ldr	r3, [pc, #568]	@ (80028ec <HAL_DMA_IRQHandler+0x248>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a8e      	ldr	r2, [pc, #568]	@ (80028f0 <HAL_DMA_IRQHandler+0x24c>)
 80026b6:	fba2 2303 	umull	r2, r3, r2, r3
 80026ba:	0a9b      	lsrs	r3, r3, #10
 80026bc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026c2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026ce:	2208      	movs	r2, #8
 80026d0:	409a      	lsls	r2, r3
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	4013      	ands	r3, r2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d01a      	beq.n	8002710 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0304 	and.w	r3, r3, #4
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d013      	beq.n	8002710 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f022 0204 	bic.w	r2, r2, #4
 80026f6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026fc:	2208      	movs	r2, #8
 80026fe:	409a      	lsls	r2, r3
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002708:	f043 0201 	orr.w	r2, r3, #1
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002714:	2201      	movs	r2, #1
 8002716:	409a      	lsls	r2, r3
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	4013      	ands	r3, r2
 800271c:	2b00      	cmp	r3, #0
 800271e:	d012      	beq.n	8002746 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	695b      	ldr	r3, [r3, #20]
 8002726:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800272a:	2b00      	cmp	r3, #0
 800272c:	d00b      	beq.n	8002746 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002732:	2201      	movs	r2, #1
 8002734:	409a      	lsls	r2, r3
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800273e:	f043 0202 	orr.w	r2, r3, #2
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800274a:	2204      	movs	r2, #4
 800274c:	409a      	lsls	r2, r3
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	4013      	ands	r3, r2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d012      	beq.n	800277c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0302 	and.w	r3, r3, #2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d00b      	beq.n	800277c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002768:	2204      	movs	r2, #4
 800276a:	409a      	lsls	r2, r3
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002774:	f043 0204 	orr.w	r2, r3, #4
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002780:	2210      	movs	r2, #16
 8002782:	409a      	lsls	r2, r3
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	4013      	ands	r3, r2
 8002788:	2b00      	cmp	r3, #0
 800278a:	d043      	beq.n	8002814 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0308 	and.w	r3, r3, #8
 8002796:	2b00      	cmp	r3, #0
 8002798:	d03c      	beq.n	8002814 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800279e:	2210      	movs	r2, #16
 80027a0:	409a      	lsls	r2, r3
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d018      	beq.n	80027e6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d108      	bne.n	80027d4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d024      	beq.n	8002814 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	4798      	blx	r3
 80027d2:	e01f      	b.n	8002814 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d01b      	beq.n	8002814 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	4798      	blx	r3
 80027e4:	e016      	b.n	8002814 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d107      	bne.n	8002804 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f022 0208 	bic.w	r2, r2, #8
 8002802:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002808:	2b00      	cmp	r3, #0
 800280a:	d003      	beq.n	8002814 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002818:	2220      	movs	r2, #32
 800281a:	409a      	lsls	r2, r3
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	4013      	ands	r3, r2
 8002820:	2b00      	cmp	r3, #0
 8002822:	f000 808f 	beq.w	8002944 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0310 	and.w	r3, r3, #16
 8002830:	2b00      	cmp	r3, #0
 8002832:	f000 8087 	beq.w	8002944 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800283a:	2220      	movs	r2, #32
 800283c:	409a      	lsls	r2, r3
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002848:	b2db      	uxtb	r3, r3
 800284a:	2b05      	cmp	r3, #5
 800284c:	d136      	bne.n	80028bc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f022 0216 	bic.w	r2, r2, #22
 800285c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	695a      	ldr	r2, [r3, #20]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800286c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002872:	2b00      	cmp	r3, #0
 8002874:	d103      	bne.n	800287e <HAL_DMA_IRQHandler+0x1da>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800287a:	2b00      	cmp	r3, #0
 800287c:	d007      	beq.n	800288e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f022 0208 	bic.w	r2, r2, #8
 800288c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002892:	223f      	movs	r2, #63	@ 0x3f
 8002894:	409a      	lsls	r2, r3
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2201      	movs	r2, #1
 800289e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d07e      	beq.n	80029b0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	4798      	blx	r3
        }
        return;
 80028ba:	e079      	b.n	80029b0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d01d      	beq.n	8002906 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d10d      	bne.n	80028f4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d031      	beq.n	8002944 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	4798      	blx	r3
 80028e8:	e02c      	b.n	8002944 <HAL_DMA_IRQHandler+0x2a0>
 80028ea:	bf00      	nop
 80028ec:	20000000 	.word	0x20000000
 80028f0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d023      	beq.n	8002944 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	4798      	blx	r3
 8002904:	e01e      	b.n	8002944 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002910:	2b00      	cmp	r3, #0
 8002912:	d10f      	bne.n	8002934 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f022 0210 	bic.w	r2, r2, #16
 8002922:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002938:	2b00      	cmp	r3, #0
 800293a:	d003      	beq.n	8002944 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002948:	2b00      	cmp	r3, #0
 800294a:	d032      	beq.n	80029b2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002950:	f003 0301 	and.w	r3, r3, #1
 8002954:	2b00      	cmp	r3, #0
 8002956:	d022      	beq.n	800299e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2205      	movs	r2, #5
 800295c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f022 0201 	bic.w	r2, r2, #1
 800296e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	3301      	adds	r3, #1
 8002974:	60bb      	str	r3, [r7, #8]
 8002976:	697a      	ldr	r2, [r7, #20]
 8002978:	429a      	cmp	r2, r3
 800297a:	d307      	bcc.n	800298c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0301 	and.w	r3, r3, #1
 8002986:	2b00      	cmp	r3, #0
 8002988:	d1f2      	bne.n	8002970 <HAL_DMA_IRQHandler+0x2cc>
 800298a:	e000      	b.n	800298e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800298c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2201      	movs	r2, #1
 8002992:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d005      	beq.n	80029b2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	4798      	blx	r3
 80029ae:	e000      	b.n	80029b2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80029b0:	bf00      	nop
    }
  }
}
 80029b2:	3718      	adds	r7, #24
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b085      	sub	sp, #20
 80029bc:	af00      	add	r7, sp, #0
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	607a      	str	r2, [r7, #4]
 80029c4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80029d4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	683a      	ldr	r2, [r7, #0]
 80029dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	2b40      	cmp	r3, #64	@ 0x40
 80029e4:	d108      	bne.n	80029f8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	68ba      	ldr	r2, [r7, #8]
 80029f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80029f6:	e007      	b.n	8002a08 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	68ba      	ldr	r2, [r7, #8]
 80029fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	60da      	str	r2, [r3, #12]
}
 8002a08:	bf00      	nop
 8002a0a:	3714      	adds	r7, #20
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	3b10      	subs	r3, #16
 8002a24:	4a14      	ldr	r2, [pc, #80]	@ (8002a78 <DMA_CalcBaseAndBitshift+0x64>)
 8002a26:	fba2 2303 	umull	r2, r3, r2, r3
 8002a2a:	091b      	lsrs	r3, r3, #4
 8002a2c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a2e:	4a13      	ldr	r2, [pc, #76]	@ (8002a7c <DMA_CalcBaseAndBitshift+0x68>)
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	4413      	add	r3, r2
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	461a      	mov	r2, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2b03      	cmp	r3, #3
 8002a40:	d909      	bls.n	8002a56 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002a4a:	f023 0303 	bic.w	r3, r3, #3
 8002a4e:	1d1a      	adds	r2, r3, #4
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	659a      	str	r2, [r3, #88]	@ 0x58
 8002a54:	e007      	b.n	8002a66 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002a5e:	f023 0303 	bic.w	r3, r3, #3
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3714      	adds	r7, #20
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	aaaaaaab 	.word	0xaaaaaaab
 8002a7c:	08005f00 	.word	0x08005f00

08002a80 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b085      	sub	sp, #20
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a90:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	699b      	ldr	r3, [r3, #24]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d11f      	bne.n	8002ada <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	2b03      	cmp	r3, #3
 8002a9e:	d856      	bhi.n	8002b4e <DMA_CheckFifoParam+0xce>
 8002aa0:	a201      	add	r2, pc, #4	@ (adr r2, 8002aa8 <DMA_CheckFifoParam+0x28>)
 8002aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aa6:	bf00      	nop
 8002aa8:	08002ab9 	.word	0x08002ab9
 8002aac:	08002acb 	.word	0x08002acb
 8002ab0:	08002ab9 	.word	0x08002ab9
 8002ab4:	08002b4f 	.word	0x08002b4f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002abc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d046      	beq.n	8002b52 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ac8:	e043      	b.n	8002b52 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ace:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002ad2:	d140      	bne.n	8002b56 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ad8:	e03d      	b.n	8002b56 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	699b      	ldr	r3, [r3, #24]
 8002ade:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ae2:	d121      	bne.n	8002b28 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	2b03      	cmp	r3, #3
 8002ae8:	d837      	bhi.n	8002b5a <DMA_CheckFifoParam+0xda>
 8002aea:	a201      	add	r2, pc, #4	@ (adr r2, 8002af0 <DMA_CheckFifoParam+0x70>)
 8002aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002af0:	08002b01 	.word	0x08002b01
 8002af4:	08002b07 	.word	0x08002b07
 8002af8:	08002b01 	.word	0x08002b01
 8002afc:	08002b19 	.word	0x08002b19
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	73fb      	strb	r3, [r7, #15]
      break;
 8002b04:	e030      	b.n	8002b68 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b0a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d025      	beq.n	8002b5e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b16:	e022      	b.n	8002b5e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b1c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002b20:	d11f      	bne.n	8002b62 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002b26:	e01c      	b.n	8002b62 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d903      	bls.n	8002b36 <DMA_CheckFifoParam+0xb6>
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	2b03      	cmp	r3, #3
 8002b32:	d003      	beq.n	8002b3c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002b34:	e018      	b.n	8002b68 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	73fb      	strb	r3, [r7, #15]
      break;
 8002b3a:	e015      	b.n	8002b68 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b40:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d00e      	beq.n	8002b66 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b4c:	e00b      	b.n	8002b66 <DMA_CheckFifoParam+0xe6>
      break;
 8002b4e:	bf00      	nop
 8002b50:	e00a      	b.n	8002b68 <DMA_CheckFifoParam+0xe8>
      break;
 8002b52:	bf00      	nop
 8002b54:	e008      	b.n	8002b68 <DMA_CheckFifoParam+0xe8>
      break;
 8002b56:	bf00      	nop
 8002b58:	e006      	b.n	8002b68 <DMA_CheckFifoParam+0xe8>
      break;
 8002b5a:	bf00      	nop
 8002b5c:	e004      	b.n	8002b68 <DMA_CheckFifoParam+0xe8>
      break;
 8002b5e:	bf00      	nop
 8002b60:	e002      	b.n	8002b68 <DMA_CheckFifoParam+0xe8>
      break;   
 8002b62:	bf00      	nop
 8002b64:	e000      	b.n	8002b68 <DMA_CheckFifoParam+0xe8>
      break;
 8002b66:	bf00      	nop
    }
  } 
  
  return status; 
 8002b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3714      	adds	r7, #20
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop

08002b78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b089      	sub	sp, #36	@ 0x24
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b82:	2300      	movs	r3, #0
 8002b84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b86:	2300      	movs	r3, #0
 8002b88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b8e:	2300      	movs	r3, #0
 8002b90:	61fb      	str	r3, [r7, #28]
 8002b92:	e16b      	b.n	8002e6c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b94:	2201      	movs	r2, #1
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	697a      	ldr	r2, [r7, #20]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ba8:	693a      	ldr	r2, [r7, #16]
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	f040 815a 	bne.w	8002e66 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f003 0303 	and.w	r3, r3, #3
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d005      	beq.n	8002bca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d130      	bne.n	8002c2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	2203      	movs	r2, #3
 8002bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bda:	43db      	mvns	r3, r3
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	4013      	ands	r3, r2
 8002be0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	68da      	ldr	r2, [r3, #12]
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	005b      	lsls	r3, r3, #1
 8002bea:	fa02 f303 	lsl.w	r3, r2, r3
 8002bee:	69ba      	ldr	r2, [r7, #24]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	69ba      	ldr	r2, [r7, #24]
 8002bf8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c00:	2201      	movs	r2, #1
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	fa02 f303 	lsl.w	r3, r2, r3
 8002c08:	43db      	mvns	r3, r3
 8002c0a:	69ba      	ldr	r2, [r7, #24]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	091b      	lsrs	r3, r3, #4
 8002c16:	f003 0201 	and.w	r2, r3, #1
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c20:	69ba      	ldr	r2, [r7, #24]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f003 0303 	and.w	r3, r3, #3
 8002c34:	2b03      	cmp	r3, #3
 8002c36:	d017      	beq.n	8002c68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	005b      	lsls	r3, r3, #1
 8002c42:	2203      	movs	r2, #3
 8002c44:	fa02 f303 	lsl.w	r3, r2, r3
 8002c48:	43db      	mvns	r3, r3
 8002c4a:	69ba      	ldr	r2, [r7, #24]
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	689a      	ldr	r2, [r3, #8]
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	005b      	lsls	r3, r3, #1
 8002c58:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5c:	69ba      	ldr	r2, [r7, #24]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	69ba      	ldr	r2, [r7, #24]
 8002c66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f003 0303 	and.w	r3, r3, #3
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d123      	bne.n	8002cbc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	08da      	lsrs	r2, r3, #3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	3208      	adds	r2, #8
 8002c7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	f003 0307 	and.w	r3, r3, #7
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	220f      	movs	r2, #15
 8002c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c90:	43db      	mvns	r3, r3
 8002c92:	69ba      	ldr	r2, [r7, #24]
 8002c94:	4013      	ands	r3, r2
 8002c96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	691a      	ldr	r2, [r3, #16]
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	f003 0307 	and.w	r3, r3, #7
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca8:	69ba      	ldr	r2, [r7, #24]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	08da      	lsrs	r2, r3, #3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	3208      	adds	r2, #8
 8002cb6:	69b9      	ldr	r1, [r7, #24]
 8002cb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	005b      	lsls	r3, r3, #1
 8002cc6:	2203      	movs	r2, #3
 8002cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ccc:	43db      	mvns	r3, r3
 8002cce:	69ba      	ldr	r2, [r7, #24]
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f003 0203 	and.w	r2, r3, #3
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	005b      	lsls	r3, r3, #1
 8002ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	f000 80b4 	beq.w	8002e66 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cfe:	2300      	movs	r3, #0
 8002d00:	60fb      	str	r3, [r7, #12]
 8002d02:	4b60      	ldr	r3, [pc, #384]	@ (8002e84 <HAL_GPIO_Init+0x30c>)
 8002d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d06:	4a5f      	ldr	r2, [pc, #380]	@ (8002e84 <HAL_GPIO_Init+0x30c>)
 8002d08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d0e:	4b5d      	ldr	r3, [pc, #372]	@ (8002e84 <HAL_GPIO_Init+0x30c>)
 8002d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d16:	60fb      	str	r3, [r7, #12]
 8002d18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d1a:	4a5b      	ldr	r2, [pc, #364]	@ (8002e88 <HAL_GPIO_Init+0x310>)
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	089b      	lsrs	r3, r3, #2
 8002d20:	3302      	adds	r3, #2
 8002d22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	f003 0303 	and.w	r3, r3, #3
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	220f      	movs	r2, #15
 8002d32:	fa02 f303 	lsl.w	r3, r2, r3
 8002d36:	43db      	mvns	r3, r3
 8002d38:	69ba      	ldr	r2, [r7, #24]
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a52      	ldr	r2, [pc, #328]	@ (8002e8c <HAL_GPIO_Init+0x314>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d02b      	beq.n	8002d9e <HAL_GPIO_Init+0x226>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a51      	ldr	r2, [pc, #324]	@ (8002e90 <HAL_GPIO_Init+0x318>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d025      	beq.n	8002d9a <HAL_GPIO_Init+0x222>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a50      	ldr	r2, [pc, #320]	@ (8002e94 <HAL_GPIO_Init+0x31c>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d01f      	beq.n	8002d96 <HAL_GPIO_Init+0x21e>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a4f      	ldr	r2, [pc, #316]	@ (8002e98 <HAL_GPIO_Init+0x320>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d019      	beq.n	8002d92 <HAL_GPIO_Init+0x21a>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a4e      	ldr	r2, [pc, #312]	@ (8002e9c <HAL_GPIO_Init+0x324>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d013      	beq.n	8002d8e <HAL_GPIO_Init+0x216>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a4d      	ldr	r2, [pc, #308]	@ (8002ea0 <HAL_GPIO_Init+0x328>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d00d      	beq.n	8002d8a <HAL_GPIO_Init+0x212>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a4c      	ldr	r2, [pc, #304]	@ (8002ea4 <HAL_GPIO_Init+0x32c>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d007      	beq.n	8002d86 <HAL_GPIO_Init+0x20e>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a4b      	ldr	r2, [pc, #300]	@ (8002ea8 <HAL_GPIO_Init+0x330>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d101      	bne.n	8002d82 <HAL_GPIO_Init+0x20a>
 8002d7e:	2307      	movs	r3, #7
 8002d80:	e00e      	b.n	8002da0 <HAL_GPIO_Init+0x228>
 8002d82:	2308      	movs	r3, #8
 8002d84:	e00c      	b.n	8002da0 <HAL_GPIO_Init+0x228>
 8002d86:	2306      	movs	r3, #6
 8002d88:	e00a      	b.n	8002da0 <HAL_GPIO_Init+0x228>
 8002d8a:	2305      	movs	r3, #5
 8002d8c:	e008      	b.n	8002da0 <HAL_GPIO_Init+0x228>
 8002d8e:	2304      	movs	r3, #4
 8002d90:	e006      	b.n	8002da0 <HAL_GPIO_Init+0x228>
 8002d92:	2303      	movs	r3, #3
 8002d94:	e004      	b.n	8002da0 <HAL_GPIO_Init+0x228>
 8002d96:	2302      	movs	r3, #2
 8002d98:	e002      	b.n	8002da0 <HAL_GPIO_Init+0x228>
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e000      	b.n	8002da0 <HAL_GPIO_Init+0x228>
 8002d9e:	2300      	movs	r3, #0
 8002da0:	69fa      	ldr	r2, [r7, #28]
 8002da2:	f002 0203 	and.w	r2, r2, #3
 8002da6:	0092      	lsls	r2, r2, #2
 8002da8:	4093      	lsls	r3, r2
 8002daa:	69ba      	ldr	r2, [r7, #24]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002db0:	4935      	ldr	r1, [pc, #212]	@ (8002e88 <HAL_GPIO_Init+0x310>)
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	089b      	lsrs	r3, r3, #2
 8002db6:	3302      	adds	r3, #2
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dbe:	4b3b      	ldr	r3, [pc, #236]	@ (8002eac <HAL_GPIO_Init+0x334>)
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	43db      	mvns	r3, r3
 8002dc8:	69ba      	ldr	r2, [r7, #24]
 8002dca:	4013      	ands	r3, r2
 8002dcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d003      	beq.n	8002de2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002dda:	69ba      	ldr	r2, [r7, #24]
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002de2:	4a32      	ldr	r2, [pc, #200]	@ (8002eac <HAL_GPIO_Init+0x334>)
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002de8:	4b30      	ldr	r3, [pc, #192]	@ (8002eac <HAL_GPIO_Init+0x334>)
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	43db      	mvns	r3, r3
 8002df2:	69ba      	ldr	r2, [r7, #24]
 8002df4:	4013      	ands	r3, r2
 8002df6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d003      	beq.n	8002e0c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002e04:	69ba      	ldr	r2, [r7, #24]
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e0c:	4a27      	ldr	r2, [pc, #156]	@ (8002eac <HAL_GPIO_Init+0x334>)
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e12:	4b26      	ldr	r3, [pc, #152]	@ (8002eac <HAL_GPIO_Init+0x334>)
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	43db      	mvns	r3, r3
 8002e1c:	69ba      	ldr	r2, [r7, #24]
 8002e1e:	4013      	ands	r3, r2
 8002e20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d003      	beq.n	8002e36 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002e2e:	69ba      	ldr	r2, [r7, #24]
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e36:	4a1d      	ldr	r2, [pc, #116]	@ (8002eac <HAL_GPIO_Init+0x334>)
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e3c:	4b1b      	ldr	r3, [pc, #108]	@ (8002eac <HAL_GPIO_Init+0x334>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	43db      	mvns	r3, r3
 8002e46:	69ba      	ldr	r2, [r7, #24]
 8002e48:	4013      	ands	r3, r2
 8002e4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d003      	beq.n	8002e60 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002e58:	69ba      	ldr	r2, [r7, #24]
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e60:	4a12      	ldr	r2, [pc, #72]	@ (8002eac <HAL_GPIO_Init+0x334>)
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	3301      	adds	r3, #1
 8002e6a:	61fb      	str	r3, [r7, #28]
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	2b0f      	cmp	r3, #15
 8002e70:	f67f ae90 	bls.w	8002b94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e74:	bf00      	nop
 8002e76:	bf00      	nop
 8002e78:	3724      	adds	r7, #36	@ 0x24
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop
 8002e84:	40023800 	.word	0x40023800
 8002e88:	40013800 	.word	0x40013800
 8002e8c:	40020000 	.word	0x40020000
 8002e90:	40020400 	.word	0x40020400
 8002e94:	40020800 	.word	0x40020800
 8002e98:	40020c00 	.word	0x40020c00
 8002e9c:	40021000 	.word	0x40021000
 8002ea0:	40021400 	.word	0x40021400
 8002ea4:	40021800 	.word	0x40021800
 8002ea8:	40021c00 	.word	0x40021c00
 8002eac:	40013c00 	.word	0x40013c00

08002eb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	460b      	mov	r3, r1
 8002eba:	807b      	strh	r3, [r7, #2]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ec0:	787b      	ldrb	r3, [r7, #1]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d003      	beq.n	8002ece <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ec6:	887a      	ldrh	r2, [r7, #2]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ecc:	e003      	b.n	8002ed6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ece:	887b      	ldrh	r3, [r7, #2]
 8002ed0:	041a      	lsls	r2, r3, #16
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	619a      	str	r2, [r3, #24]
}
 8002ed6:	bf00      	nop
 8002ed8:	370c      	adds	r7, #12
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
	...

08002ee4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b086      	sub	sp, #24
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d101      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e267      	b.n	80033c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0301 	and.w	r3, r3, #1
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d075      	beq.n	8002fee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002f02:	4b88      	ldr	r3, [pc, #544]	@ (8003124 <HAL_RCC_OscConfig+0x240>)
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	f003 030c 	and.w	r3, r3, #12
 8002f0a:	2b04      	cmp	r3, #4
 8002f0c:	d00c      	beq.n	8002f28 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f0e:	4b85      	ldr	r3, [pc, #532]	@ (8003124 <HAL_RCC_OscConfig+0x240>)
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002f16:	2b08      	cmp	r3, #8
 8002f18:	d112      	bne.n	8002f40 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f1a:	4b82      	ldr	r3, [pc, #520]	@ (8003124 <HAL_RCC_OscConfig+0x240>)
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f22:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f26:	d10b      	bne.n	8002f40 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f28:	4b7e      	ldr	r3, [pc, #504]	@ (8003124 <HAL_RCC_OscConfig+0x240>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d05b      	beq.n	8002fec <HAL_RCC_OscConfig+0x108>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d157      	bne.n	8002fec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e242      	b.n	80033c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f48:	d106      	bne.n	8002f58 <HAL_RCC_OscConfig+0x74>
 8002f4a:	4b76      	ldr	r3, [pc, #472]	@ (8003124 <HAL_RCC_OscConfig+0x240>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a75      	ldr	r2, [pc, #468]	@ (8003124 <HAL_RCC_OscConfig+0x240>)
 8002f50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f54:	6013      	str	r3, [r2, #0]
 8002f56:	e01d      	b.n	8002f94 <HAL_RCC_OscConfig+0xb0>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f60:	d10c      	bne.n	8002f7c <HAL_RCC_OscConfig+0x98>
 8002f62:	4b70      	ldr	r3, [pc, #448]	@ (8003124 <HAL_RCC_OscConfig+0x240>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a6f      	ldr	r2, [pc, #444]	@ (8003124 <HAL_RCC_OscConfig+0x240>)
 8002f68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f6c:	6013      	str	r3, [r2, #0]
 8002f6e:	4b6d      	ldr	r3, [pc, #436]	@ (8003124 <HAL_RCC_OscConfig+0x240>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a6c      	ldr	r2, [pc, #432]	@ (8003124 <HAL_RCC_OscConfig+0x240>)
 8002f74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f78:	6013      	str	r3, [r2, #0]
 8002f7a:	e00b      	b.n	8002f94 <HAL_RCC_OscConfig+0xb0>
 8002f7c:	4b69      	ldr	r3, [pc, #420]	@ (8003124 <HAL_RCC_OscConfig+0x240>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a68      	ldr	r2, [pc, #416]	@ (8003124 <HAL_RCC_OscConfig+0x240>)
 8002f82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f86:	6013      	str	r3, [r2, #0]
 8002f88:	4b66      	ldr	r3, [pc, #408]	@ (8003124 <HAL_RCC_OscConfig+0x240>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a65      	ldr	r2, [pc, #404]	@ (8003124 <HAL_RCC_OscConfig+0x240>)
 8002f8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d013      	beq.n	8002fc4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f9c:	f7fe fc50 	bl	8001840 <HAL_GetTick>
 8002fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fa2:	e008      	b.n	8002fb6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fa4:	f7fe fc4c 	bl	8001840 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	2b64      	cmp	r3, #100	@ 0x64
 8002fb0:	d901      	bls.n	8002fb6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e207      	b.n	80033c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fb6:	4b5b      	ldr	r3, [pc, #364]	@ (8003124 <HAL_RCC_OscConfig+0x240>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d0f0      	beq.n	8002fa4 <HAL_RCC_OscConfig+0xc0>
 8002fc2:	e014      	b.n	8002fee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc4:	f7fe fc3c 	bl	8001840 <HAL_GetTick>
 8002fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fca:	e008      	b.n	8002fde <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fcc:	f7fe fc38 	bl	8001840 <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	2b64      	cmp	r3, #100	@ 0x64
 8002fd8:	d901      	bls.n	8002fde <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e1f3      	b.n	80033c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fde:	4b51      	ldr	r3, [pc, #324]	@ (8003124 <HAL_RCC_OscConfig+0x240>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d1f0      	bne.n	8002fcc <HAL_RCC_OscConfig+0xe8>
 8002fea:	e000      	b.n	8002fee <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0302 	and.w	r3, r3, #2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d063      	beq.n	80030c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002ffa:	4b4a      	ldr	r3, [pc, #296]	@ (8003124 <HAL_RCC_OscConfig+0x240>)
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f003 030c 	and.w	r3, r3, #12
 8003002:	2b00      	cmp	r3, #0
 8003004:	d00b      	beq.n	800301e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003006:	4b47      	ldr	r3, [pc, #284]	@ (8003124 <HAL_RCC_OscConfig+0x240>)
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800300e:	2b08      	cmp	r3, #8
 8003010:	d11c      	bne.n	800304c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003012:	4b44      	ldr	r3, [pc, #272]	@ (8003124 <HAL_RCC_OscConfig+0x240>)
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d116      	bne.n	800304c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800301e:	4b41      	ldr	r3, [pc, #260]	@ (8003124 <HAL_RCC_OscConfig+0x240>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b00      	cmp	r3, #0
 8003028:	d005      	beq.n	8003036 <HAL_RCC_OscConfig+0x152>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	2b01      	cmp	r3, #1
 8003030:	d001      	beq.n	8003036 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e1c7      	b.n	80033c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003036:	4b3b      	ldr	r3, [pc, #236]	@ (8003124 <HAL_RCC_OscConfig+0x240>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	00db      	lsls	r3, r3, #3
 8003044:	4937      	ldr	r1, [pc, #220]	@ (8003124 <HAL_RCC_OscConfig+0x240>)
 8003046:	4313      	orrs	r3, r2
 8003048:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800304a:	e03a      	b.n	80030c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d020      	beq.n	8003096 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003054:	4b34      	ldr	r3, [pc, #208]	@ (8003128 <HAL_RCC_OscConfig+0x244>)
 8003056:	2201      	movs	r2, #1
 8003058:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800305a:	f7fe fbf1 	bl	8001840 <HAL_GetTick>
 800305e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003060:	e008      	b.n	8003074 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003062:	f7fe fbed 	bl	8001840 <HAL_GetTick>
 8003066:	4602      	mov	r2, r0
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	2b02      	cmp	r3, #2
 800306e:	d901      	bls.n	8003074 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e1a8      	b.n	80033c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003074:	4b2b      	ldr	r3, [pc, #172]	@ (8003124 <HAL_RCC_OscConfig+0x240>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0302 	and.w	r3, r3, #2
 800307c:	2b00      	cmp	r3, #0
 800307e:	d0f0      	beq.n	8003062 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003080:	4b28      	ldr	r3, [pc, #160]	@ (8003124 <HAL_RCC_OscConfig+0x240>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	691b      	ldr	r3, [r3, #16]
 800308c:	00db      	lsls	r3, r3, #3
 800308e:	4925      	ldr	r1, [pc, #148]	@ (8003124 <HAL_RCC_OscConfig+0x240>)
 8003090:	4313      	orrs	r3, r2
 8003092:	600b      	str	r3, [r1, #0]
 8003094:	e015      	b.n	80030c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003096:	4b24      	ldr	r3, [pc, #144]	@ (8003128 <HAL_RCC_OscConfig+0x244>)
 8003098:	2200      	movs	r2, #0
 800309a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800309c:	f7fe fbd0 	bl	8001840 <HAL_GetTick>
 80030a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030a2:	e008      	b.n	80030b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030a4:	f7fe fbcc 	bl	8001840 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e187      	b.n	80033c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030b6:	4b1b      	ldr	r3, [pc, #108]	@ (8003124 <HAL_RCC_OscConfig+0x240>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d1f0      	bne.n	80030a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0308 	and.w	r3, r3, #8
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d036      	beq.n	800313c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	695b      	ldr	r3, [r3, #20]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d016      	beq.n	8003104 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030d6:	4b15      	ldr	r3, [pc, #84]	@ (800312c <HAL_RCC_OscConfig+0x248>)
 80030d8:	2201      	movs	r2, #1
 80030da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030dc:	f7fe fbb0 	bl	8001840 <HAL_GetTick>
 80030e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030e2:	e008      	b.n	80030f6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030e4:	f7fe fbac 	bl	8001840 <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d901      	bls.n	80030f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e167      	b.n	80033c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030f6:	4b0b      	ldr	r3, [pc, #44]	@ (8003124 <HAL_RCC_OscConfig+0x240>)
 80030f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d0f0      	beq.n	80030e4 <HAL_RCC_OscConfig+0x200>
 8003102:	e01b      	b.n	800313c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003104:	4b09      	ldr	r3, [pc, #36]	@ (800312c <HAL_RCC_OscConfig+0x248>)
 8003106:	2200      	movs	r2, #0
 8003108:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800310a:	f7fe fb99 	bl	8001840 <HAL_GetTick>
 800310e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003110:	e00e      	b.n	8003130 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003112:	f7fe fb95 	bl	8001840 <HAL_GetTick>
 8003116:	4602      	mov	r2, r0
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	2b02      	cmp	r3, #2
 800311e:	d907      	bls.n	8003130 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003120:	2303      	movs	r3, #3
 8003122:	e150      	b.n	80033c6 <HAL_RCC_OscConfig+0x4e2>
 8003124:	40023800 	.word	0x40023800
 8003128:	42470000 	.word	0x42470000
 800312c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003130:	4b88      	ldr	r3, [pc, #544]	@ (8003354 <HAL_RCC_OscConfig+0x470>)
 8003132:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003134:	f003 0302 	and.w	r3, r3, #2
 8003138:	2b00      	cmp	r3, #0
 800313a:	d1ea      	bne.n	8003112 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0304 	and.w	r3, r3, #4
 8003144:	2b00      	cmp	r3, #0
 8003146:	f000 8097 	beq.w	8003278 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800314a:	2300      	movs	r3, #0
 800314c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800314e:	4b81      	ldr	r3, [pc, #516]	@ (8003354 <HAL_RCC_OscConfig+0x470>)
 8003150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003152:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d10f      	bne.n	800317a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800315a:	2300      	movs	r3, #0
 800315c:	60bb      	str	r3, [r7, #8]
 800315e:	4b7d      	ldr	r3, [pc, #500]	@ (8003354 <HAL_RCC_OscConfig+0x470>)
 8003160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003162:	4a7c      	ldr	r2, [pc, #496]	@ (8003354 <HAL_RCC_OscConfig+0x470>)
 8003164:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003168:	6413      	str	r3, [r2, #64]	@ 0x40
 800316a:	4b7a      	ldr	r3, [pc, #488]	@ (8003354 <HAL_RCC_OscConfig+0x470>)
 800316c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800316e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003172:	60bb      	str	r3, [r7, #8]
 8003174:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003176:	2301      	movs	r3, #1
 8003178:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800317a:	4b77      	ldr	r3, [pc, #476]	@ (8003358 <HAL_RCC_OscConfig+0x474>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003182:	2b00      	cmp	r3, #0
 8003184:	d118      	bne.n	80031b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003186:	4b74      	ldr	r3, [pc, #464]	@ (8003358 <HAL_RCC_OscConfig+0x474>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a73      	ldr	r2, [pc, #460]	@ (8003358 <HAL_RCC_OscConfig+0x474>)
 800318c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003190:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003192:	f7fe fb55 	bl	8001840 <HAL_GetTick>
 8003196:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003198:	e008      	b.n	80031ac <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800319a:	f7fe fb51 	bl	8001840 <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d901      	bls.n	80031ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80031a8:	2303      	movs	r3, #3
 80031aa:	e10c      	b.n	80033c6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ac:	4b6a      	ldr	r3, [pc, #424]	@ (8003358 <HAL_RCC_OscConfig+0x474>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d0f0      	beq.n	800319a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d106      	bne.n	80031ce <HAL_RCC_OscConfig+0x2ea>
 80031c0:	4b64      	ldr	r3, [pc, #400]	@ (8003354 <HAL_RCC_OscConfig+0x470>)
 80031c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031c4:	4a63      	ldr	r2, [pc, #396]	@ (8003354 <HAL_RCC_OscConfig+0x470>)
 80031c6:	f043 0301 	orr.w	r3, r3, #1
 80031ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80031cc:	e01c      	b.n	8003208 <HAL_RCC_OscConfig+0x324>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	2b05      	cmp	r3, #5
 80031d4:	d10c      	bne.n	80031f0 <HAL_RCC_OscConfig+0x30c>
 80031d6:	4b5f      	ldr	r3, [pc, #380]	@ (8003354 <HAL_RCC_OscConfig+0x470>)
 80031d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031da:	4a5e      	ldr	r2, [pc, #376]	@ (8003354 <HAL_RCC_OscConfig+0x470>)
 80031dc:	f043 0304 	orr.w	r3, r3, #4
 80031e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80031e2:	4b5c      	ldr	r3, [pc, #368]	@ (8003354 <HAL_RCC_OscConfig+0x470>)
 80031e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031e6:	4a5b      	ldr	r2, [pc, #364]	@ (8003354 <HAL_RCC_OscConfig+0x470>)
 80031e8:	f043 0301 	orr.w	r3, r3, #1
 80031ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80031ee:	e00b      	b.n	8003208 <HAL_RCC_OscConfig+0x324>
 80031f0:	4b58      	ldr	r3, [pc, #352]	@ (8003354 <HAL_RCC_OscConfig+0x470>)
 80031f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031f4:	4a57      	ldr	r2, [pc, #348]	@ (8003354 <HAL_RCC_OscConfig+0x470>)
 80031f6:	f023 0301 	bic.w	r3, r3, #1
 80031fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80031fc:	4b55      	ldr	r3, [pc, #340]	@ (8003354 <HAL_RCC_OscConfig+0x470>)
 80031fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003200:	4a54      	ldr	r2, [pc, #336]	@ (8003354 <HAL_RCC_OscConfig+0x470>)
 8003202:	f023 0304 	bic.w	r3, r3, #4
 8003206:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d015      	beq.n	800323c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003210:	f7fe fb16 	bl	8001840 <HAL_GetTick>
 8003214:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003216:	e00a      	b.n	800322e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003218:	f7fe fb12 	bl	8001840 <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003226:	4293      	cmp	r3, r2
 8003228:	d901      	bls.n	800322e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e0cb      	b.n	80033c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800322e:	4b49      	ldr	r3, [pc, #292]	@ (8003354 <HAL_RCC_OscConfig+0x470>)
 8003230:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003232:	f003 0302 	and.w	r3, r3, #2
 8003236:	2b00      	cmp	r3, #0
 8003238:	d0ee      	beq.n	8003218 <HAL_RCC_OscConfig+0x334>
 800323a:	e014      	b.n	8003266 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800323c:	f7fe fb00 	bl	8001840 <HAL_GetTick>
 8003240:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003242:	e00a      	b.n	800325a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003244:	f7fe fafc 	bl	8001840 <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003252:	4293      	cmp	r3, r2
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e0b5      	b.n	80033c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800325a:	4b3e      	ldr	r3, [pc, #248]	@ (8003354 <HAL_RCC_OscConfig+0x470>)
 800325c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d1ee      	bne.n	8003244 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003266:	7dfb      	ldrb	r3, [r7, #23]
 8003268:	2b01      	cmp	r3, #1
 800326a:	d105      	bne.n	8003278 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800326c:	4b39      	ldr	r3, [pc, #228]	@ (8003354 <HAL_RCC_OscConfig+0x470>)
 800326e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003270:	4a38      	ldr	r2, [pc, #224]	@ (8003354 <HAL_RCC_OscConfig+0x470>)
 8003272:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003276:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	699b      	ldr	r3, [r3, #24]
 800327c:	2b00      	cmp	r3, #0
 800327e:	f000 80a1 	beq.w	80033c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003282:	4b34      	ldr	r3, [pc, #208]	@ (8003354 <HAL_RCC_OscConfig+0x470>)
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f003 030c 	and.w	r3, r3, #12
 800328a:	2b08      	cmp	r3, #8
 800328c:	d05c      	beq.n	8003348 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	699b      	ldr	r3, [r3, #24]
 8003292:	2b02      	cmp	r3, #2
 8003294:	d141      	bne.n	800331a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003296:	4b31      	ldr	r3, [pc, #196]	@ (800335c <HAL_RCC_OscConfig+0x478>)
 8003298:	2200      	movs	r2, #0
 800329a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800329c:	f7fe fad0 	bl	8001840 <HAL_GetTick>
 80032a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032a2:	e008      	b.n	80032b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032a4:	f7fe facc 	bl	8001840 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e087      	b.n	80033c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032b6:	4b27      	ldr	r3, [pc, #156]	@ (8003354 <HAL_RCC_OscConfig+0x470>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d1f0      	bne.n	80032a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	69da      	ldr	r2, [r3, #28]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a1b      	ldr	r3, [r3, #32]
 80032ca:	431a      	orrs	r2, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d0:	019b      	lsls	r3, r3, #6
 80032d2:	431a      	orrs	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032d8:	085b      	lsrs	r3, r3, #1
 80032da:	3b01      	subs	r3, #1
 80032dc:	041b      	lsls	r3, r3, #16
 80032de:	431a      	orrs	r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032e4:	061b      	lsls	r3, r3, #24
 80032e6:	491b      	ldr	r1, [pc, #108]	@ (8003354 <HAL_RCC_OscConfig+0x470>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032ec:	4b1b      	ldr	r3, [pc, #108]	@ (800335c <HAL_RCC_OscConfig+0x478>)
 80032ee:	2201      	movs	r2, #1
 80032f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f2:	f7fe faa5 	bl	8001840 <HAL_GetTick>
 80032f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032f8:	e008      	b.n	800330c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032fa:	f7fe faa1 	bl	8001840 <HAL_GetTick>
 80032fe:	4602      	mov	r2, r0
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	2b02      	cmp	r3, #2
 8003306:	d901      	bls.n	800330c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	e05c      	b.n	80033c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800330c:	4b11      	ldr	r3, [pc, #68]	@ (8003354 <HAL_RCC_OscConfig+0x470>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d0f0      	beq.n	80032fa <HAL_RCC_OscConfig+0x416>
 8003318:	e054      	b.n	80033c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800331a:	4b10      	ldr	r3, [pc, #64]	@ (800335c <HAL_RCC_OscConfig+0x478>)
 800331c:	2200      	movs	r2, #0
 800331e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003320:	f7fe fa8e 	bl	8001840 <HAL_GetTick>
 8003324:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003326:	e008      	b.n	800333a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003328:	f7fe fa8a 	bl	8001840 <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	2b02      	cmp	r3, #2
 8003334:	d901      	bls.n	800333a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e045      	b.n	80033c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800333a:	4b06      	ldr	r3, [pc, #24]	@ (8003354 <HAL_RCC_OscConfig+0x470>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d1f0      	bne.n	8003328 <HAL_RCC_OscConfig+0x444>
 8003346:	e03d      	b.n	80033c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	699b      	ldr	r3, [r3, #24]
 800334c:	2b01      	cmp	r3, #1
 800334e:	d107      	bne.n	8003360 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e038      	b.n	80033c6 <HAL_RCC_OscConfig+0x4e2>
 8003354:	40023800 	.word	0x40023800
 8003358:	40007000 	.word	0x40007000
 800335c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003360:	4b1b      	ldr	r3, [pc, #108]	@ (80033d0 <HAL_RCC_OscConfig+0x4ec>)
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	699b      	ldr	r3, [r3, #24]
 800336a:	2b01      	cmp	r3, #1
 800336c:	d028      	beq.n	80033c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003378:	429a      	cmp	r2, r3
 800337a:	d121      	bne.n	80033c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003386:	429a      	cmp	r2, r3
 8003388:	d11a      	bne.n	80033c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800338a:	68fa      	ldr	r2, [r7, #12]
 800338c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003390:	4013      	ands	r3, r2
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003396:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003398:	4293      	cmp	r3, r2
 800339a:	d111      	bne.n	80033c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033a6:	085b      	lsrs	r3, r3, #1
 80033a8:	3b01      	subs	r3, #1
 80033aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d107      	bne.n	80033c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033bc:	429a      	cmp	r2, r3
 80033be:	d001      	beq.n	80033c4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e000      	b.n	80033c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3718      	adds	r7, #24
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	40023800 	.word	0x40023800

080033d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d101      	bne.n	80033e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e0cc      	b.n	8003582 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033e8:	4b68      	ldr	r3, [pc, #416]	@ (800358c <HAL_RCC_ClockConfig+0x1b8>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0307 	and.w	r3, r3, #7
 80033f0:	683a      	ldr	r2, [r7, #0]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d90c      	bls.n	8003410 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033f6:	4b65      	ldr	r3, [pc, #404]	@ (800358c <HAL_RCC_ClockConfig+0x1b8>)
 80033f8:	683a      	ldr	r2, [r7, #0]
 80033fa:	b2d2      	uxtb	r2, r2
 80033fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033fe:	4b63      	ldr	r3, [pc, #396]	@ (800358c <HAL_RCC_ClockConfig+0x1b8>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0307 	and.w	r3, r3, #7
 8003406:	683a      	ldr	r2, [r7, #0]
 8003408:	429a      	cmp	r2, r3
 800340a:	d001      	beq.n	8003410 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e0b8      	b.n	8003582 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0302 	and.w	r3, r3, #2
 8003418:	2b00      	cmp	r3, #0
 800341a:	d020      	beq.n	800345e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0304 	and.w	r3, r3, #4
 8003424:	2b00      	cmp	r3, #0
 8003426:	d005      	beq.n	8003434 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003428:	4b59      	ldr	r3, [pc, #356]	@ (8003590 <HAL_RCC_ClockConfig+0x1bc>)
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	4a58      	ldr	r2, [pc, #352]	@ (8003590 <HAL_RCC_ClockConfig+0x1bc>)
 800342e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003432:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0308 	and.w	r3, r3, #8
 800343c:	2b00      	cmp	r3, #0
 800343e:	d005      	beq.n	800344c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003440:	4b53      	ldr	r3, [pc, #332]	@ (8003590 <HAL_RCC_ClockConfig+0x1bc>)
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	4a52      	ldr	r2, [pc, #328]	@ (8003590 <HAL_RCC_ClockConfig+0x1bc>)
 8003446:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800344a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800344c:	4b50      	ldr	r3, [pc, #320]	@ (8003590 <HAL_RCC_ClockConfig+0x1bc>)
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	494d      	ldr	r1, [pc, #308]	@ (8003590 <HAL_RCC_ClockConfig+0x1bc>)
 800345a:	4313      	orrs	r3, r2
 800345c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0301 	and.w	r3, r3, #1
 8003466:	2b00      	cmp	r3, #0
 8003468:	d044      	beq.n	80034f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	2b01      	cmp	r3, #1
 8003470:	d107      	bne.n	8003482 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003472:	4b47      	ldr	r3, [pc, #284]	@ (8003590 <HAL_RCC_ClockConfig+0x1bc>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d119      	bne.n	80034b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e07f      	b.n	8003582 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	2b02      	cmp	r3, #2
 8003488:	d003      	beq.n	8003492 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800348e:	2b03      	cmp	r3, #3
 8003490:	d107      	bne.n	80034a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003492:	4b3f      	ldr	r3, [pc, #252]	@ (8003590 <HAL_RCC_ClockConfig+0x1bc>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d109      	bne.n	80034b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e06f      	b.n	8003582 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034a2:	4b3b      	ldr	r3, [pc, #236]	@ (8003590 <HAL_RCC_ClockConfig+0x1bc>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0302 	and.w	r3, r3, #2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d101      	bne.n	80034b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e067      	b.n	8003582 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034b2:	4b37      	ldr	r3, [pc, #220]	@ (8003590 <HAL_RCC_ClockConfig+0x1bc>)
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	f023 0203 	bic.w	r2, r3, #3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	4934      	ldr	r1, [pc, #208]	@ (8003590 <HAL_RCC_ClockConfig+0x1bc>)
 80034c0:	4313      	orrs	r3, r2
 80034c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034c4:	f7fe f9bc 	bl	8001840 <HAL_GetTick>
 80034c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ca:	e00a      	b.n	80034e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034cc:	f7fe f9b8 	bl	8001840 <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034da:	4293      	cmp	r3, r2
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e04f      	b.n	8003582 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034e2:	4b2b      	ldr	r3, [pc, #172]	@ (8003590 <HAL_RCC_ClockConfig+0x1bc>)
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	f003 020c 	and.w	r2, r3, #12
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d1eb      	bne.n	80034cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034f4:	4b25      	ldr	r3, [pc, #148]	@ (800358c <HAL_RCC_ClockConfig+0x1b8>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0307 	and.w	r3, r3, #7
 80034fc:	683a      	ldr	r2, [r7, #0]
 80034fe:	429a      	cmp	r2, r3
 8003500:	d20c      	bcs.n	800351c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003502:	4b22      	ldr	r3, [pc, #136]	@ (800358c <HAL_RCC_ClockConfig+0x1b8>)
 8003504:	683a      	ldr	r2, [r7, #0]
 8003506:	b2d2      	uxtb	r2, r2
 8003508:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800350a:	4b20      	ldr	r3, [pc, #128]	@ (800358c <HAL_RCC_ClockConfig+0x1b8>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0307 	and.w	r3, r3, #7
 8003512:	683a      	ldr	r2, [r7, #0]
 8003514:	429a      	cmp	r2, r3
 8003516:	d001      	beq.n	800351c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e032      	b.n	8003582 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0304 	and.w	r3, r3, #4
 8003524:	2b00      	cmp	r3, #0
 8003526:	d008      	beq.n	800353a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003528:	4b19      	ldr	r3, [pc, #100]	@ (8003590 <HAL_RCC_ClockConfig+0x1bc>)
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	4916      	ldr	r1, [pc, #88]	@ (8003590 <HAL_RCC_ClockConfig+0x1bc>)
 8003536:	4313      	orrs	r3, r2
 8003538:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0308 	and.w	r3, r3, #8
 8003542:	2b00      	cmp	r3, #0
 8003544:	d009      	beq.n	800355a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003546:	4b12      	ldr	r3, [pc, #72]	@ (8003590 <HAL_RCC_ClockConfig+0x1bc>)
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	00db      	lsls	r3, r3, #3
 8003554:	490e      	ldr	r1, [pc, #56]	@ (8003590 <HAL_RCC_ClockConfig+0x1bc>)
 8003556:	4313      	orrs	r3, r2
 8003558:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800355a:	f000 f821 	bl	80035a0 <HAL_RCC_GetSysClockFreq>
 800355e:	4602      	mov	r2, r0
 8003560:	4b0b      	ldr	r3, [pc, #44]	@ (8003590 <HAL_RCC_ClockConfig+0x1bc>)
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	091b      	lsrs	r3, r3, #4
 8003566:	f003 030f 	and.w	r3, r3, #15
 800356a:	490a      	ldr	r1, [pc, #40]	@ (8003594 <HAL_RCC_ClockConfig+0x1c0>)
 800356c:	5ccb      	ldrb	r3, [r1, r3]
 800356e:	fa22 f303 	lsr.w	r3, r2, r3
 8003572:	4a09      	ldr	r2, [pc, #36]	@ (8003598 <HAL_RCC_ClockConfig+0x1c4>)
 8003574:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003576:	4b09      	ldr	r3, [pc, #36]	@ (800359c <HAL_RCC_ClockConfig+0x1c8>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4618      	mov	r0, r3
 800357c:	f7fe f91c 	bl	80017b8 <HAL_InitTick>

  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3710      	adds	r7, #16
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	40023c00 	.word	0x40023c00
 8003590:	40023800 	.word	0x40023800
 8003594:	08005ee8 	.word	0x08005ee8
 8003598:	20000000 	.word	0x20000000
 800359c:	20000004 	.word	0x20000004

080035a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035a4:	b094      	sub	sp, #80	@ 0x50
 80035a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80035a8:	2300      	movs	r3, #0
 80035aa:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80035ac:	2300      	movs	r3, #0
 80035ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80035b0:	2300      	movs	r3, #0
 80035b2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80035b4:	2300      	movs	r3, #0
 80035b6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035b8:	4b79      	ldr	r3, [pc, #484]	@ (80037a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f003 030c 	and.w	r3, r3, #12
 80035c0:	2b08      	cmp	r3, #8
 80035c2:	d00d      	beq.n	80035e0 <HAL_RCC_GetSysClockFreq+0x40>
 80035c4:	2b08      	cmp	r3, #8
 80035c6:	f200 80e1 	bhi.w	800378c <HAL_RCC_GetSysClockFreq+0x1ec>
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d002      	beq.n	80035d4 <HAL_RCC_GetSysClockFreq+0x34>
 80035ce:	2b04      	cmp	r3, #4
 80035d0:	d003      	beq.n	80035da <HAL_RCC_GetSysClockFreq+0x3a>
 80035d2:	e0db      	b.n	800378c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035d4:	4b73      	ldr	r3, [pc, #460]	@ (80037a4 <HAL_RCC_GetSysClockFreq+0x204>)
 80035d6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80035d8:	e0db      	b.n	8003792 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035da:	4b73      	ldr	r3, [pc, #460]	@ (80037a8 <HAL_RCC_GetSysClockFreq+0x208>)
 80035dc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80035de:	e0d8      	b.n	8003792 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035e0:	4b6f      	ldr	r3, [pc, #444]	@ (80037a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80035e8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035ea:	4b6d      	ldr	r3, [pc, #436]	@ (80037a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d063      	beq.n	80036be <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035f6:	4b6a      	ldr	r3, [pc, #424]	@ (80037a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	099b      	lsrs	r3, r3, #6
 80035fc:	2200      	movs	r2, #0
 80035fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003600:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003604:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003608:	633b      	str	r3, [r7, #48]	@ 0x30
 800360a:	2300      	movs	r3, #0
 800360c:	637b      	str	r3, [r7, #52]	@ 0x34
 800360e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003612:	4622      	mov	r2, r4
 8003614:	462b      	mov	r3, r5
 8003616:	f04f 0000 	mov.w	r0, #0
 800361a:	f04f 0100 	mov.w	r1, #0
 800361e:	0159      	lsls	r1, r3, #5
 8003620:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003624:	0150      	lsls	r0, r2, #5
 8003626:	4602      	mov	r2, r0
 8003628:	460b      	mov	r3, r1
 800362a:	4621      	mov	r1, r4
 800362c:	1a51      	subs	r1, r2, r1
 800362e:	6139      	str	r1, [r7, #16]
 8003630:	4629      	mov	r1, r5
 8003632:	eb63 0301 	sbc.w	r3, r3, r1
 8003636:	617b      	str	r3, [r7, #20]
 8003638:	f04f 0200 	mov.w	r2, #0
 800363c:	f04f 0300 	mov.w	r3, #0
 8003640:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003644:	4659      	mov	r1, fp
 8003646:	018b      	lsls	r3, r1, #6
 8003648:	4651      	mov	r1, sl
 800364a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800364e:	4651      	mov	r1, sl
 8003650:	018a      	lsls	r2, r1, #6
 8003652:	4651      	mov	r1, sl
 8003654:	ebb2 0801 	subs.w	r8, r2, r1
 8003658:	4659      	mov	r1, fp
 800365a:	eb63 0901 	sbc.w	r9, r3, r1
 800365e:	f04f 0200 	mov.w	r2, #0
 8003662:	f04f 0300 	mov.w	r3, #0
 8003666:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800366a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800366e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003672:	4690      	mov	r8, r2
 8003674:	4699      	mov	r9, r3
 8003676:	4623      	mov	r3, r4
 8003678:	eb18 0303 	adds.w	r3, r8, r3
 800367c:	60bb      	str	r3, [r7, #8]
 800367e:	462b      	mov	r3, r5
 8003680:	eb49 0303 	adc.w	r3, r9, r3
 8003684:	60fb      	str	r3, [r7, #12]
 8003686:	f04f 0200 	mov.w	r2, #0
 800368a:	f04f 0300 	mov.w	r3, #0
 800368e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003692:	4629      	mov	r1, r5
 8003694:	024b      	lsls	r3, r1, #9
 8003696:	4621      	mov	r1, r4
 8003698:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800369c:	4621      	mov	r1, r4
 800369e:	024a      	lsls	r2, r1, #9
 80036a0:	4610      	mov	r0, r2
 80036a2:	4619      	mov	r1, r3
 80036a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036a6:	2200      	movs	r2, #0
 80036a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80036aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80036ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80036b0:	f7fc fde6 	bl	8000280 <__aeabi_uldivmod>
 80036b4:	4602      	mov	r2, r0
 80036b6:	460b      	mov	r3, r1
 80036b8:	4613      	mov	r3, r2
 80036ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036bc:	e058      	b.n	8003770 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036be:	4b38      	ldr	r3, [pc, #224]	@ (80037a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	099b      	lsrs	r3, r3, #6
 80036c4:	2200      	movs	r2, #0
 80036c6:	4618      	mov	r0, r3
 80036c8:	4611      	mov	r1, r2
 80036ca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80036ce:	623b      	str	r3, [r7, #32]
 80036d0:	2300      	movs	r3, #0
 80036d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80036d4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80036d8:	4642      	mov	r2, r8
 80036da:	464b      	mov	r3, r9
 80036dc:	f04f 0000 	mov.w	r0, #0
 80036e0:	f04f 0100 	mov.w	r1, #0
 80036e4:	0159      	lsls	r1, r3, #5
 80036e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036ea:	0150      	lsls	r0, r2, #5
 80036ec:	4602      	mov	r2, r0
 80036ee:	460b      	mov	r3, r1
 80036f0:	4641      	mov	r1, r8
 80036f2:	ebb2 0a01 	subs.w	sl, r2, r1
 80036f6:	4649      	mov	r1, r9
 80036f8:	eb63 0b01 	sbc.w	fp, r3, r1
 80036fc:	f04f 0200 	mov.w	r2, #0
 8003700:	f04f 0300 	mov.w	r3, #0
 8003704:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003708:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800370c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003710:	ebb2 040a 	subs.w	r4, r2, sl
 8003714:	eb63 050b 	sbc.w	r5, r3, fp
 8003718:	f04f 0200 	mov.w	r2, #0
 800371c:	f04f 0300 	mov.w	r3, #0
 8003720:	00eb      	lsls	r3, r5, #3
 8003722:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003726:	00e2      	lsls	r2, r4, #3
 8003728:	4614      	mov	r4, r2
 800372a:	461d      	mov	r5, r3
 800372c:	4643      	mov	r3, r8
 800372e:	18e3      	adds	r3, r4, r3
 8003730:	603b      	str	r3, [r7, #0]
 8003732:	464b      	mov	r3, r9
 8003734:	eb45 0303 	adc.w	r3, r5, r3
 8003738:	607b      	str	r3, [r7, #4]
 800373a:	f04f 0200 	mov.w	r2, #0
 800373e:	f04f 0300 	mov.w	r3, #0
 8003742:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003746:	4629      	mov	r1, r5
 8003748:	028b      	lsls	r3, r1, #10
 800374a:	4621      	mov	r1, r4
 800374c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003750:	4621      	mov	r1, r4
 8003752:	028a      	lsls	r2, r1, #10
 8003754:	4610      	mov	r0, r2
 8003756:	4619      	mov	r1, r3
 8003758:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800375a:	2200      	movs	r2, #0
 800375c:	61bb      	str	r3, [r7, #24]
 800375e:	61fa      	str	r2, [r7, #28]
 8003760:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003764:	f7fc fd8c 	bl	8000280 <__aeabi_uldivmod>
 8003768:	4602      	mov	r2, r0
 800376a:	460b      	mov	r3, r1
 800376c:	4613      	mov	r3, r2
 800376e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003770:	4b0b      	ldr	r3, [pc, #44]	@ (80037a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	0c1b      	lsrs	r3, r3, #16
 8003776:	f003 0303 	and.w	r3, r3, #3
 800377a:	3301      	adds	r3, #1
 800377c:	005b      	lsls	r3, r3, #1
 800377e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003780:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003782:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003784:	fbb2 f3f3 	udiv	r3, r2, r3
 8003788:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800378a:	e002      	b.n	8003792 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800378c:	4b05      	ldr	r3, [pc, #20]	@ (80037a4 <HAL_RCC_GetSysClockFreq+0x204>)
 800378e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003790:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003792:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003794:	4618      	mov	r0, r3
 8003796:	3750      	adds	r7, #80	@ 0x50
 8003798:	46bd      	mov	sp, r7
 800379a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800379e:	bf00      	nop
 80037a0:	40023800 	.word	0x40023800
 80037a4:	00f42400 	.word	0x00f42400
 80037a8:	007a1200 	.word	0x007a1200

080037ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037ac:	b480      	push	{r7}
 80037ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037b0:	4b03      	ldr	r3, [pc, #12]	@ (80037c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80037b2:	681b      	ldr	r3, [r3, #0]
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr
 80037be:	bf00      	nop
 80037c0:	20000000 	.word	0x20000000

080037c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80037c8:	f7ff fff0 	bl	80037ac <HAL_RCC_GetHCLKFreq>
 80037cc:	4602      	mov	r2, r0
 80037ce:	4b05      	ldr	r3, [pc, #20]	@ (80037e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	0a9b      	lsrs	r3, r3, #10
 80037d4:	f003 0307 	and.w	r3, r3, #7
 80037d8:	4903      	ldr	r1, [pc, #12]	@ (80037e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037da:	5ccb      	ldrb	r3, [r1, r3]
 80037dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	40023800 	.word	0x40023800
 80037e8:	08005ef8 	.word	0x08005ef8

080037ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80037f0:	f7ff ffdc 	bl	80037ac <HAL_RCC_GetHCLKFreq>
 80037f4:	4602      	mov	r2, r0
 80037f6:	4b05      	ldr	r3, [pc, #20]	@ (800380c <HAL_RCC_GetPCLK2Freq+0x20>)
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	0b5b      	lsrs	r3, r3, #13
 80037fc:	f003 0307 	and.w	r3, r3, #7
 8003800:	4903      	ldr	r1, [pc, #12]	@ (8003810 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003802:	5ccb      	ldrb	r3, [r1, r3]
 8003804:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003808:	4618      	mov	r0, r3
 800380a:	bd80      	pop	{r7, pc}
 800380c:	40023800 	.word	0x40023800
 8003810:	08005ef8 	.word	0x08005ef8

08003814 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b082      	sub	sp, #8
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d101      	bne.n	8003826 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e041      	b.n	80038aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800382c:	b2db      	uxtb	r3, r3
 800382e:	2b00      	cmp	r3, #0
 8003830:	d106      	bne.n	8003840 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f7fd fde6 	bl	800140c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2202      	movs	r2, #2
 8003844:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	3304      	adds	r3, #4
 8003850:	4619      	mov	r1, r3
 8003852:	4610      	mov	r0, r2
 8003854:	f000 fa3a 	bl	8003ccc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80038a8:	2300      	movs	r3, #0
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3708      	adds	r7, #8
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
	...

080038b4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b085      	sub	sp, #20
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d001      	beq.n	80038cc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e046      	b.n	800395a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2202      	movs	r2, #2
 80038d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a23      	ldr	r2, [pc, #140]	@ (8003968 <HAL_TIM_Base_Start+0xb4>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d022      	beq.n	8003924 <HAL_TIM_Base_Start+0x70>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038e6:	d01d      	beq.n	8003924 <HAL_TIM_Base_Start+0x70>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a1f      	ldr	r2, [pc, #124]	@ (800396c <HAL_TIM_Base_Start+0xb8>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d018      	beq.n	8003924 <HAL_TIM_Base_Start+0x70>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a1e      	ldr	r2, [pc, #120]	@ (8003970 <HAL_TIM_Base_Start+0xbc>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d013      	beq.n	8003924 <HAL_TIM_Base_Start+0x70>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a1c      	ldr	r2, [pc, #112]	@ (8003974 <HAL_TIM_Base_Start+0xc0>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d00e      	beq.n	8003924 <HAL_TIM_Base_Start+0x70>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a1b      	ldr	r2, [pc, #108]	@ (8003978 <HAL_TIM_Base_Start+0xc4>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d009      	beq.n	8003924 <HAL_TIM_Base_Start+0x70>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a19      	ldr	r2, [pc, #100]	@ (800397c <HAL_TIM_Base_Start+0xc8>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d004      	beq.n	8003924 <HAL_TIM_Base_Start+0x70>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a18      	ldr	r2, [pc, #96]	@ (8003980 <HAL_TIM_Base_Start+0xcc>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d111      	bne.n	8003948 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	f003 0307 	and.w	r3, r3, #7
 800392e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2b06      	cmp	r3, #6
 8003934:	d010      	beq.n	8003958 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f042 0201 	orr.w	r2, r2, #1
 8003944:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003946:	e007      	b.n	8003958 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f042 0201 	orr.w	r2, r2, #1
 8003956:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003958:	2300      	movs	r3, #0
}
 800395a:	4618      	mov	r0, r3
 800395c:	3714      	adds	r7, #20
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr
 8003966:	bf00      	nop
 8003968:	40010000 	.word	0x40010000
 800396c:	40000400 	.word	0x40000400
 8003970:	40000800 	.word	0x40000800
 8003974:	40000c00 	.word	0x40000c00
 8003978:	40010400 	.word	0x40010400
 800397c:	40014000 	.word	0x40014000
 8003980:	40001800 	.word	0x40001800

08003984 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	6a1a      	ldr	r2, [r3, #32]
 8003992:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003996:	4013      	ands	r3, r2
 8003998:	2b00      	cmp	r3, #0
 800399a:	d10f      	bne.n	80039bc <HAL_TIM_Base_Stop+0x38>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	6a1a      	ldr	r2, [r3, #32]
 80039a2:	f240 4344 	movw	r3, #1092	@ 0x444
 80039a6:	4013      	ands	r3, r2
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d107      	bne.n	80039bc <HAL_TIM_Base_Stop+0x38>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f022 0201 	bic.w	r2, r2, #1
 80039ba:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	370c      	adds	r7, #12
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr

080039d2 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80039d2:	b580      	push	{r7, lr}
 80039d4:	b082      	sub	sp, #8
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d101      	bne.n	80039e4 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e041      	b.n	8003a68 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d106      	bne.n	80039fe <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f000 f839 	bl	8003a70 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2202      	movs	r2, #2
 8003a02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	3304      	adds	r3, #4
 8003a0e:	4619      	mov	r1, r3
 8003a10:	4610      	mov	r0, r2
 8003a12:	f000 f95b 	bl	8003ccc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2201      	movs	r2, #1
 8003a1a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2201      	movs	r2, #1
 8003a22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2201      	movs	r2, #1
 8003a2a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2201      	movs	r2, #1
 8003a32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2201      	movs	r2, #1
 8003a42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2201      	movs	r2, #1
 8003a52:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2201      	movs	r2, #1
 8003a62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a66:	2300      	movs	r3, #0
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3708      	adds	r7, #8
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003a78:	bf00      	nop
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b086      	sub	sp, #24
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	60b9      	str	r1, [r7, #8]
 8003a8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a90:	2300      	movs	r3, #0
 8003a92:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d101      	bne.n	8003aa2 <HAL_TIM_OC_ConfigChannel+0x1e>
 8003a9e:	2302      	movs	r3, #2
 8003aa0:	e048      	b.n	8003b34 <HAL_TIM_OC_ConfigChannel+0xb0>
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2b0c      	cmp	r3, #12
 8003aae:	d839      	bhi.n	8003b24 <HAL_TIM_OC_ConfigChannel+0xa0>
 8003ab0:	a201      	add	r2, pc, #4	@ (adr r2, 8003ab8 <HAL_TIM_OC_ConfigChannel+0x34>)
 8003ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ab6:	bf00      	nop
 8003ab8:	08003aed 	.word	0x08003aed
 8003abc:	08003b25 	.word	0x08003b25
 8003ac0:	08003b25 	.word	0x08003b25
 8003ac4:	08003b25 	.word	0x08003b25
 8003ac8:	08003afb 	.word	0x08003afb
 8003acc:	08003b25 	.word	0x08003b25
 8003ad0:	08003b25 	.word	0x08003b25
 8003ad4:	08003b25 	.word	0x08003b25
 8003ad8:	08003b09 	.word	0x08003b09
 8003adc:	08003b25 	.word	0x08003b25
 8003ae0:	08003b25 	.word	0x08003b25
 8003ae4:	08003b25 	.word	0x08003b25
 8003ae8:	08003b17 	.word	0x08003b17
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	68b9      	ldr	r1, [r7, #8]
 8003af2:	4618      	mov	r0, r3
 8003af4:	f000 f996 	bl	8003e24 <TIM_OC1_SetConfig>
      break;
 8003af8:	e017      	b.n	8003b2a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	68b9      	ldr	r1, [r7, #8]
 8003b00:	4618      	mov	r0, r3
 8003b02:	f000 f9ff 	bl	8003f04 <TIM_OC2_SetConfig>
      break;
 8003b06:	e010      	b.n	8003b2a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	68b9      	ldr	r1, [r7, #8]
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f000 fa6e 	bl	8003ff0 <TIM_OC3_SetConfig>
      break;
 8003b14:	e009      	b.n	8003b2a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	68b9      	ldr	r1, [r7, #8]
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f000 fadb 	bl	80040d8 <TIM_OC4_SetConfig>
      break;
 8003b22:	e002      	b.n	8003b2a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	75fb      	strb	r3, [r7, #23]
      break;
 8003b28:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003b32:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3718      	adds	r7, #24
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b46:	2300      	movs	r3, #0
 8003b48:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d101      	bne.n	8003b58 <HAL_TIM_ConfigClockSource+0x1c>
 8003b54:	2302      	movs	r3, #2
 8003b56:	e0b4      	b.n	8003cc2 <HAL_TIM_ConfigClockSource+0x186>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2202      	movs	r2, #2
 8003b64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003b76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003b7e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	68ba      	ldr	r2, [r7, #8]
 8003b86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b90:	d03e      	beq.n	8003c10 <HAL_TIM_ConfigClockSource+0xd4>
 8003b92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b96:	f200 8087 	bhi.w	8003ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8003b9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b9e:	f000 8086 	beq.w	8003cae <HAL_TIM_ConfigClockSource+0x172>
 8003ba2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ba6:	d87f      	bhi.n	8003ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ba8:	2b70      	cmp	r3, #112	@ 0x70
 8003baa:	d01a      	beq.n	8003be2 <HAL_TIM_ConfigClockSource+0xa6>
 8003bac:	2b70      	cmp	r3, #112	@ 0x70
 8003bae:	d87b      	bhi.n	8003ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8003bb0:	2b60      	cmp	r3, #96	@ 0x60
 8003bb2:	d050      	beq.n	8003c56 <HAL_TIM_ConfigClockSource+0x11a>
 8003bb4:	2b60      	cmp	r3, #96	@ 0x60
 8003bb6:	d877      	bhi.n	8003ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8003bb8:	2b50      	cmp	r3, #80	@ 0x50
 8003bba:	d03c      	beq.n	8003c36 <HAL_TIM_ConfigClockSource+0xfa>
 8003bbc:	2b50      	cmp	r3, #80	@ 0x50
 8003bbe:	d873      	bhi.n	8003ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8003bc0:	2b40      	cmp	r3, #64	@ 0x40
 8003bc2:	d058      	beq.n	8003c76 <HAL_TIM_ConfigClockSource+0x13a>
 8003bc4:	2b40      	cmp	r3, #64	@ 0x40
 8003bc6:	d86f      	bhi.n	8003ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8003bc8:	2b30      	cmp	r3, #48	@ 0x30
 8003bca:	d064      	beq.n	8003c96 <HAL_TIM_ConfigClockSource+0x15a>
 8003bcc:	2b30      	cmp	r3, #48	@ 0x30
 8003bce:	d86b      	bhi.n	8003ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8003bd0:	2b20      	cmp	r3, #32
 8003bd2:	d060      	beq.n	8003c96 <HAL_TIM_ConfigClockSource+0x15a>
 8003bd4:	2b20      	cmp	r3, #32
 8003bd6:	d867      	bhi.n	8003ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d05c      	beq.n	8003c96 <HAL_TIM_ConfigClockSource+0x15a>
 8003bdc:	2b10      	cmp	r3, #16
 8003bde:	d05a      	beq.n	8003c96 <HAL_TIM_ConfigClockSource+0x15a>
 8003be0:	e062      	b.n	8003ca8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003bf2:	f000 fb41 	bl	8004278 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003c04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	68ba      	ldr	r2, [r7, #8]
 8003c0c:	609a      	str	r2, [r3, #8]
      break;
 8003c0e:	e04f      	b.n	8003cb0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c20:	f000 fb2a 	bl	8004278 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	689a      	ldr	r2, [r3, #8]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003c32:	609a      	str	r2, [r3, #8]
      break;
 8003c34:	e03c      	b.n	8003cb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c42:	461a      	mov	r2, r3
 8003c44:	f000 fa9e 	bl	8004184 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2150      	movs	r1, #80	@ 0x50
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f000 faf7 	bl	8004242 <TIM_ITRx_SetConfig>
      break;
 8003c54:	e02c      	b.n	8003cb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c62:	461a      	mov	r2, r3
 8003c64:	f000 fabd 	bl	80041e2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2160      	movs	r1, #96	@ 0x60
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f000 fae7 	bl	8004242 <TIM_ITRx_SetConfig>
      break;
 8003c74:	e01c      	b.n	8003cb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c82:	461a      	mov	r2, r3
 8003c84:	f000 fa7e 	bl	8004184 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2140      	movs	r1, #64	@ 0x40
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f000 fad7 	bl	8004242 <TIM_ITRx_SetConfig>
      break;
 8003c94:	e00c      	b.n	8003cb0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	4610      	mov	r0, r2
 8003ca2:	f000 face 	bl	8004242 <TIM_ITRx_SetConfig>
      break;
 8003ca6:	e003      	b.n	8003cb0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	73fb      	strb	r3, [r7, #15]
      break;
 8003cac:	e000      	b.n	8003cb0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003cae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3710      	adds	r7, #16
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
	...

08003ccc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b085      	sub	sp, #20
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	4a46      	ldr	r2, [pc, #280]	@ (8003df8 <TIM_Base_SetConfig+0x12c>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d013      	beq.n	8003d0c <TIM_Base_SetConfig+0x40>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cea:	d00f      	beq.n	8003d0c <TIM_Base_SetConfig+0x40>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	4a43      	ldr	r2, [pc, #268]	@ (8003dfc <TIM_Base_SetConfig+0x130>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d00b      	beq.n	8003d0c <TIM_Base_SetConfig+0x40>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	4a42      	ldr	r2, [pc, #264]	@ (8003e00 <TIM_Base_SetConfig+0x134>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d007      	beq.n	8003d0c <TIM_Base_SetConfig+0x40>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	4a41      	ldr	r2, [pc, #260]	@ (8003e04 <TIM_Base_SetConfig+0x138>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d003      	beq.n	8003d0c <TIM_Base_SetConfig+0x40>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	4a40      	ldr	r2, [pc, #256]	@ (8003e08 <TIM_Base_SetConfig+0x13c>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d108      	bne.n	8003d1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	68fa      	ldr	r2, [r7, #12]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a35      	ldr	r2, [pc, #212]	@ (8003df8 <TIM_Base_SetConfig+0x12c>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d02b      	beq.n	8003d7e <TIM_Base_SetConfig+0xb2>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d2c:	d027      	beq.n	8003d7e <TIM_Base_SetConfig+0xb2>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a32      	ldr	r2, [pc, #200]	@ (8003dfc <TIM_Base_SetConfig+0x130>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d023      	beq.n	8003d7e <TIM_Base_SetConfig+0xb2>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a31      	ldr	r2, [pc, #196]	@ (8003e00 <TIM_Base_SetConfig+0x134>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d01f      	beq.n	8003d7e <TIM_Base_SetConfig+0xb2>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a30      	ldr	r2, [pc, #192]	@ (8003e04 <TIM_Base_SetConfig+0x138>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d01b      	beq.n	8003d7e <TIM_Base_SetConfig+0xb2>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a2f      	ldr	r2, [pc, #188]	@ (8003e08 <TIM_Base_SetConfig+0x13c>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d017      	beq.n	8003d7e <TIM_Base_SetConfig+0xb2>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4a2e      	ldr	r2, [pc, #184]	@ (8003e0c <TIM_Base_SetConfig+0x140>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d013      	beq.n	8003d7e <TIM_Base_SetConfig+0xb2>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4a2d      	ldr	r2, [pc, #180]	@ (8003e10 <TIM_Base_SetConfig+0x144>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d00f      	beq.n	8003d7e <TIM_Base_SetConfig+0xb2>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a2c      	ldr	r2, [pc, #176]	@ (8003e14 <TIM_Base_SetConfig+0x148>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d00b      	beq.n	8003d7e <TIM_Base_SetConfig+0xb2>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4a2b      	ldr	r2, [pc, #172]	@ (8003e18 <TIM_Base_SetConfig+0x14c>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d007      	beq.n	8003d7e <TIM_Base_SetConfig+0xb2>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a2a      	ldr	r2, [pc, #168]	@ (8003e1c <TIM_Base_SetConfig+0x150>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d003      	beq.n	8003d7e <TIM_Base_SetConfig+0xb2>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a29      	ldr	r2, [pc, #164]	@ (8003e20 <TIM_Base_SetConfig+0x154>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d108      	bne.n	8003d90 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	68fa      	ldr	r2, [r7, #12]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	695b      	ldr	r3, [r3, #20]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	68fa      	ldr	r2, [r7, #12]
 8003da2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	689a      	ldr	r2, [r3, #8]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	4a10      	ldr	r2, [pc, #64]	@ (8003df8 <TIM_Base_SetConfig+0x12c>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d003      	beq.n	8003dc4 <TIM_Base_SetConfig+0xf8>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	4a12      	ldr	r2, [pc, #72]	@ (8003e08 <TIM_Base_SetConfig+0x13c>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d103      	bne.n	8003dcc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	691a      	ldr	r2, [r3, #16]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	691b      	ldr	r3, [r3, #16]
 8003dd6:	f003 0301 	and.w	r3, r3, #1
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d105      	bne.n	8003dea <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	f023 0201 	bic.w	r2, r3, #1
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	611a      	str	r2, [r3, #16]
  }
}
 8003dea:	bf00      	nop
 8003dec:	3714      	adds	r7, #20
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr
 8003df6:	bf00      	nop
 8003df8:	40010000 	.word	0x40010000
 8003dfc:	40000400 	.word	0x40000400
 8003e00:	40000800 	.word	0x40000800
 8003e04:	40000c00 	.word	0x40000c00
 8003e08:	40010400 	.word	0x40010400
 8003e0c:	40014000 	.word	0x40014000
 8003e10:	40014400 	.word	0x40014400
 8003e14:	40014800 	.word	0x40014800
 8003e18:	40001800 	.word	0x40001800
 8003e1c:	40001c00 	.word	0x40001c00
 8003e20:	40002000 	.word	0x40002000

08003e24 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b087      	sub	sp, #28
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a1b      	ldr	r3, [r3, #32]
 8003e32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a1b      	ldr	r3, [r3, #32]
 8003e38:	f023 0201 	bic.w	r2, r3, #1
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	699b      	ldr	r3, [r3, #24]
 8003e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f023 0303 	bic.w	r3, r3, #3
 8003e5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	68fa      	ldr	r2, [r7, #12]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	f023 0302 	bic.w	r3, r3, #2
 8003e6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	697a      	ldr	r2, [r7, #20]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	4a20      	ldr	r2, [pc, #128]	@ (8003efc <TIM_OC1_SetConfig+0xd8>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d003      	beq.n	8003e88 <TIM_OC1_SetConfig+0x64>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a1f      	ldr	r2, [pc, #124]	@ (8003f00 <TIM_OC1_SetConfig+0xdc>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d10c      	bne.n	8003ea2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	f023 0308 	bic.w	r3, r3, #8
 8003e8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	697a      	ldr	r2, [r7, #20]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	f023 0304 	bic.w	r3, r3, #4
 8003ea0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a15      	ldr	r2, [pc, #84]	@ (8003efc <TIM_OC1_SetConfig+0xd8>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d003      	beq.n	8003eb2 <TIM_OC1_SetConfig+0x8e>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a14      	ldr	r2, [pc, #80]	@ (8003f00 <TIM_OC1_SetConfig+0xdc>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d111      	bne.n	8003ed6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003eb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003ec0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	695b      	ldr	r3, [r3, #20]
 8003ec6:	693a      	ldr	r2, [r7, #16]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	699b      	ldr	r3, [r3, #24]
 8003ed0:	693a      	ldr	r2, [r7, #16]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	693a      	ldr	r2, [r7, #16]
 8003eda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	68fa      	ldr	r2, [r7, #12]
 8003ee0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	685a      	ldr	r2, [r3, #4]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	697a      	ldr	r2, [r7, #20]
 8003eee:	621a      	str	r2, [r3, #32]
}
 8003ef0:	bf00      	nop
 8003ef2:	371c      	adds	r7, #28
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr
 8003efc:	40010000 	.word	0x40010000
 8003f00:	40010400 	.word	0x40010400

08003f04 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b087      	sub	sp, #28
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a1b      	ldr	r3, [r3, #32]
 8003f12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6a1b      	ldr	r3, [r3, #32]
 8003f18:	f023 0210 	bic.w	r2, r3, #16
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	699b      	ldr	r3, [r3, #24]
 8003f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	021b      	lsls	r3, r3, #8
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	f023 0320 	bic.w	r3, r3, #32
 8003f4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	011b      	lsls	r3, r3, #4
 8003f56:	697a      	ldr	r2, [r7, #20]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4a22      	ldr	r2, [pc, #136]	@ (8003fe8 <TIM_OC2_SetConfig+0xe4>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d003      	beq.n	8003f6c <TIM_OC2_SetConfig+0x68>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	4a21      	ldr	r2, [pc, #132]	@ (8003fec <TIM_OC2_SetConfig+0xe8>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d10d      	bne.n	8003f88 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	011b      	lsls	r3, r3, #4
 8003f7a:	697a      	ldr	r2, [r7, #20]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f86:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4a17      	ldr	r2, [pc, #92]	@ (8003fe8 <TIM_OC2_SetConfig+0xe4>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d003      	beq.n	8003f98 <TIM_OC2_SetConfig+0x94>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	4a16      	ldr	r2, [pc, #88]	@ (8003fec <TIM_OC2_SetConfig+0xe8>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d113      	bne.n	8003fc0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003f9e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003fa6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	695b      	ldr	r3, [r3, #20]
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	693a      	ldr	r2, [r7, #16]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	699b      	ldr	r3, [r3, #24]
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	693a      	ldr	r2, [r7, #16]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	693a      	ldr	r2, [r7, #16]
 8003fc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	68fa      	ldr	r2, [r7, #12]
 8003fca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	685a      	ldr	r2, [r3, #4]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	697a      	ldr	r2, [r7, #20]
 8003fd8:	621a      	str	r2, [r3, #32]
}
 8003fda:	bf00      	nop
 8003fdc:	371c      	adds	r7, #28
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr
 8003fe6:	bf00      	nop
 8003fe8:	40010000 	.word	0x40010000
 8003fec:	40010400 	.word	0x40010400

08003ff0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b087      	sub	sp, #28
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a1b      	ldr	r3, [r3, #32]
 8003ffe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6a1b      	ldr	r3, [r3, #32]
 8004004:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	69db      	ldr	r3, [r3, #28]
 8004016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800401e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f023 0303 	bic.w	r3, r3, #3
 8004026:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	68fa      	ldr	r2, [r7, #12]
 800402e:	4313      	orrs	r3, r2
 8004030:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004038:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	021b      	lsls	r3, r3, #8
 8004040:	697a      	ldr	r2, [r7, #20]
 8004042:	4313      	orrs	r3, r2
 8004044:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a21      	ldr	r2, [pc, #132]	@ (80040d0 <TIM_OC3_SetConfig+0xe0>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d003      	beq.n	8004056 <TIM_OC3_SetConfig+0x66>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a20      	ldr	r2, [pc, #128]	@ (80040d4 <TIM_OC3_SetConfig+0xe4>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d10d      	bne.n	8004072 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800405c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	021b      	lsls	r3, r3, #8
 8004064:	697a      	ldr	r2, [r7, #20]
 8004066:	4313      	orrs	r3, r2
 8004068:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004070:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a16      	ldr	r2, [pc, #88]	@ (80040d0 <TIM_OC3_SetConfig+0xe0>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d003      	beq.n	8004082 <TIM_OC3_SetConfig+0x92>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a15      	ldr	r2, [pc, #84]	@ (80040d4 <TIM_OC3_SetConfig+0xe4>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d113      	bne.n	80040aa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004088:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004090:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	695b      	ldr	r3, [r3, #20]
 8004096:	011b      	lsls	r3, r3, #4
 8004098:	693a      	ldr	r2, [r7, #16]
 800409a:	4313      	orrs	r3, r2
 800409c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	699b      	ldr	r3, [r3, #24]
 80040a2:	011b      	lsls	r3, r3, #4
 80040a4:	693a      	ldr	r2, [r7, #16]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	693a      	ldr	r2, [r7, #16]
 80040ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	685a      	ldr	r2, [r3, #4]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	697a      	ldr	r2, [r7, #20]
 80040c2:	621a      	str	r2, [r3, #32]
}
 80040c4:	bf00      	nop
 80040c6:	371c      	adds	r7, #28
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr
 80040d0:	40010000 	.word	0x40010000
 80040d4:	40010400 	.word	0x40010400

080040d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040d8:	b480      	push	{r7}
 80040da:	b087      	sub	sp, #28
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a1b      	ldr	r3, [r3, #32]
 80040e6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6a1b      	ldr	r3, [r3, #32]
 80040ec:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	69db      	ldr	r3, [r3, #28]
 80040fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004106:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800410e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	021b      	lsls	r3, r3, #8
 8004116:	68fa      	ldr	r2, [r7, #12]
 8004118:	4313      	orrs	r3, r2
 800411a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004122:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	031b      	lsls	r3, r3, #12
 800412a:	693a      	ldr	r2, [r7, #16]
 800412c:	4313      	orrs	r3, r2
 800412e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	4a12      	ldr	r2, [pc, #72]	@ (800417c <TIM_OC4_SetConfig+0xa4>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d003      	beq.n	8004140 <TIM_OC4_SetConfig+0x68>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	4a11      	ldr	r2, [pc, #68]	@ (8004180 <TIM_OC4_SetConfig+0xa8>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d109      	bne.n	8004154 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004146:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	695b      	ldr	r3, [r3, #20]
 800414c:	019b      	lsls	r3, r3, #6
 800414e:	697a      	ldr	r2, [r7, #20]
 8004150:	4313      	orrs	r3, r2
 8004152:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	697a      	ldr	r2, [r7, #20]
 8004158:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	68fa      	ldr	r2, [r7, #12]
 800415e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	685a      	ldr	r2, [r3, #4]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	693a      	ldr	r2, [r7, #16]
 800416c:	621a      	str	r2, [r3, #32]
}
 800416e:	bf00      	nop
 8004170:	371c      	adds	r7, #28
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr
 800417a:	bf00      	nop
 800417c:	40010000 	.word	0x40010000
 8004180:	40010400 	.word	0x40010400

08004184 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004184:	b480      	push	{r7}
 8004186:	b087      	sub	sp, #28
 8004188:	af00      	add	r7, sp, #0
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6a1b      	ldr	r3, [r3, #32]
 8004194:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6a1b      	ldr	r3, [r3, #32]
 800419a:	f023 0201 	bic.w	r2, r3, #1
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	699b      	ldr	r3, [r3, #24]
 80041a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80041ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	011b      	lsls	r3, r3, #4
 80041b4:	693a      	ldr	r2, [r7, #16]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	f023 030a 	bic.w	r3, r3, #10
 80041c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80041c2:	697a      	ldr	r2, [r7, #20]
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	693a      	ldr	r2, [r7, #16]
 80041ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	697a      	ldr	r2, [r7, #20]
 80041d4:	621a      	str	r2, [r3, #32]
}
 80041d6:	bf00      	nop
 80041d8:	371c      	adds	r7, #28
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr

080041e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041e2:	b480      	push	{r7}
 80041e4:	b087      	sub	sp, #28
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	60f8      	str	r0, [r7, #12]
 80041ea:	60b9      	str	r1, [r7, #8]
 80041ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6a1b      	ldr	r3, [r3, #32]
 80041f2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6a1b      	ldr	r3, [r3, #32]
 80041f8:	f023 0210 	bic.w	r2, r3, #16
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	699b      	ldr	r3, [r3, #24]
 8004204:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800420c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	031b      	lsls	r3, r3, #12
 8004212:	693a      	ldr	r2, [r7, #16]
 8004214:	4313      	orrs	r3, r2
 8004216:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800421e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	011b      	lsls	r3, r3, #4
 8004224:	697a      	ldr	r2, [r7, #20]
 8004226:	4313      	orrs	r3, r2
 8004228:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	693a      	ldr	r2, [r7, #16]
 800422e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	697a      	ldr	r2, [r7, #20]
 8004234:	621a      	str	r2, [r3, #32]
}
 8004236:	bf00      	nop
 8004238:	371c      	adds	r7, #28
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr

08004242 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004242:	b480      	push	{r7}
 8004244:	b085      	sub	sp, #20
 8004246:	af00      	add	r7, sp, #0
 8004248:	6078      	str	r0, [r7, #4]
 800424a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004258:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800425a:	683a      	ldr	r2, [r7, #0]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	4313      	orrs	r3, r2
 8004260:	f043 0307 	orr.w	r3, r3, #7
 8004264:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	68fa      	ldr	r2, [r7, #12]
 800426a:	609a      	str	r2, [r3, #8]
}
 800426c:	bf00      	nop
 800426e:	3714      	adds	r7, #20
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr

08004278 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004278:	b480      	push	{r7}
 800427a:	b087      	sub	sp, #28
 800427c:	af00      	add	r7, sp, #0
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	60b9      	str	r1, [r7, #8]
 8004282:	607a      	str	r2, [r7, #4]
 8004284:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004292:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	021a      	lsls	r2, r3, #8
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	431a      	orrs	r2, r3
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	4313      	orrs	r3, r2
 80042a0:	697a      	ldr	r2, [r7, #20]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	697a      	ldr	r2, [r7, #20]
 80042aa:	609a      	str	r2, [r3, #8]
}
 80042ac:	bf00      	nop
 80042ae:	371c      	adds	r7, #28
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b085      	sub	sp, #20
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d101      	bne.n	80042d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042cc:	2302      	movs	r3, #2
 80042ce:	e05a      	b.n	8004386 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2202      	movs	r2, #2
 80042dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68fa      	ldr	r2, [r7, #12]
 80042fe:	4313      	orrs	r3, r2
 8004300:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	68fa      	ldr	r2, [r7, #12]
 8004308:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a21      	ldr	r2, [pc, #132]	@ (8004394 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d022      	beq.n	800435a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800431c:	d01d      	beq.n	800435a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a1d      	ldr	r2, [pc, #116]	@ (8004398 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d018      	beq.n	800435a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a1b      	ldr	r2, [pc, #108]	@ (800439c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d013      	beq.n	800435a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a1a      	ldr	r2, [pc, #104]	@ (80043a0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d00e      	beq.n	800435a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a18      	ldr	r2, [pc, #96]	@ (80043a4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d009      	beq.n	800435a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a17      	ldr	r2, [pc, #92]	@ (80043a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d004      	beq.n	800435a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a15      	ldr	r2, [pc, #84]	@ (80043ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d10c      	bne.n	8004374 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004360:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	68ba      	ldr	r2, [r7, #8]
 8004368:	4313      	orrs	r3, r2
 800436a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68ba      	ldr	r2, [r7, #8]
 8004372:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2200      	movs	r2, #0
 8004380:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004384:	2300      	movs	r3, #0
}
 8004386:	4618      	mov	r0, r3
 8004388:	3714      	adds	r7, #20
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr
 8004392:	bf00      	nop
 8004394:	40010000 	.word	0x40010000
 8004398:	40000400 	.word	0x40000400
 800439c:	40000800 	.word	0x40000800
 80043a0:	40000c00 	.word	0x40000c00
 80043a4:	40010400 	.word	0x40010400
 80043a8:	40014000 	.word	0x40014000
 80043ac:	40001800 	.word	0x40001800

080043b0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b085      	sub	sp, #20
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80043ba:	2300      	movs	r3, #0
 80043bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d101      	bne.n	80043cc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80043c8:	2302      	movs	r3, #2
 80043ca:	e03d      	b.n	8004448 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	4313      	orrs	r3, r2
 80043e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4313      	orrs	r3, r2
 800440a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	4313      	orrs	r3, r2
 8004418:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	695b      	ldr	r3, [r3, #20]
 8004424:	4313      	orrs	r3, r2
 8004426:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	69db      	ldr	r3, [r3, #28]
 8004432:	4313      	orrs	r3, r2
 8004434:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	68fa      	ldr	r2, [r7, #12]
 800443c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004446:	2300      	movs	r3, #0
}
 8004448:	4618      	mov	r0, r3
 800444a:	3714      	adds	r7, #20
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr

08004454 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b082      	sub	sp, #8
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d101      	bne.n	8004466 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e042      	b.n	80044ec <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800446c:	b2db      	uxtb	r3, r3
 800446e:	2b00      	cmp	r3, #0
 8004470:	d106      	bne.n	8004480 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f7fd f82e 	bl	80014dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2224      	movs	r2, #36	@ 0x24
 8004484:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	68da      	ldr	r2, [r3, #12]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004496:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f000 fdc1 	bl	8005020 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	691a      	ldr	r2, [r3, #16]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80044ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	695a      	ldr	r2, [r3, #20]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80044bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	68da      	ldr	r2, [r3, #12]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80044cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2220      	movs	r2, #32
 80044d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2220      	movs	r2, #32
 80044e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80044ea:	2300      	movs	r3, #0
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3708      	adds	r7, #8
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b08c      	sub	sp, #48	@ 0x30
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	4613      	mov	r3, r2
 8004500:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004508:	b2db      	uxtb	r3, r3
 800450a:	2b20      	cmp	r3, #32
 800450c:	d156      	bne.n	80045bc <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d002      	beq.n	800451a <HAL_UART_Transmit_DMA+0x26>
 8004514:	88fb      	ldrh	r3, [r7, #6]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d101      	bne.n	800451e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e04f      	b.n	80045be <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800451e:	68ba      	ldr	r2, [r7, #8]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	88fa      	ldrh	r2, [r7, #6]
 8004528:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	88fa      	ldrh	r2, [r7, #6]
 800452e:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2200      	movs	r2, #0
 8004534:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2221      	movs	r2, #33	@ 0x21
 800453a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004542:	4a21      	ldr	r2, [pc, #132]	@ (80045c8 <HAL_UART_Transmit_DMA+0xd4>)
 8004544:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800454a:	4a20      	ldr	r2, [pc, #128]	@ (80045cc <HAL_UART_Transmit_DMA+0xd8>)
 800454c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004552:	4a1f      	ldr	r2, [pc, #124]	@ (80045d0 <HAL_UART_Transmit_DMA+0xdc>)
 8004554:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800455a:	2200      	movs	r2, #0
 800455c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800455e:	f107 0308 	add.w	r3, r7, #8
 8004562:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004568:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800456a:	6819      	ldr	r1, [r3, #0]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	3304      	adds	r3, #4
 8004572:	461a      	mov	r2, r3
 8004574:	88fb      	ldrh	r3, [r7, #6]
 8004576:	f7fd ffab 	bl	80024d0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004582:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	3314      	adds	r3, #20
 800458a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800458c:	69bb      	ldr	r3, [r7, #24]
 800458e:	e853 3f00 	ldrex	r3, [r3]
 8004592:	617b      	str	r3, [r7, #20]
   return(result);
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800459a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	3314      	adds	r3, #20
 80045a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80045a4:	627a      	str	r2, [r7, #36]	@ 0x24
 80045a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a8:	6a39      	ldr	r1, [r7, #32]
 80045aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045ac:	e841 2300 	strex	r3, r2, [r1]
 80045b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d1e5      	bne.n	8004584 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 80045b8:	2300      	movs	r3, #0
 80045ba:	e000      	b.n	80045be <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80045bc:	2302      	movs	r3, #2
  }
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3730      	adds	r7, #48	@ 0x30
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	08004b4d 	.word	0x08004b4d
 80045cc:	08004be7 	.word	0x08004be7
 80045d0:	08004c03 	.word	0x08004c03

080045d4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b0ba      	sub	sp, #232	@ 0xe8
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	695b      	ldr	r3, [r3, #20]
 80045f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80045fa:	2300      	movs	r3, #0
 80045fc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004600:	2300      	movs	r3, #0
 8004602:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004606:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800460a:	f003 030f 	and.w	r3, r3, #15
 800460e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004612:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004616:	2b00      	cmp	r3, #0
 8004618:	d10f      	bne.n	800463a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800461a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800461e:	f003 0320 	and.w	r3, r3, #32
 8004622:	2b00      	cmp	r3, #0
 8004624:	d009      	beq.n	800463a <HAL_UART_IRQHandler+0x66>
 8004626:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800462a:	f003 0320 	and.w	r3, r3, #32
 800462e:	2b00      	cmp	r3, #0
 8004630:	d003      	beq.n	800463a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f000 fc36 	bl	8004ea4 <UART_Receive_IT>
      return;
 8004638:	e25b      	b.n	8004af2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800463a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800463e:	2b00      	cmp	r3, #0
 8004640:	f000 80de 	beq.w	8004800 <HAL_UART_IRQHandler+0x22c>
 8004644:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004648:	f003 0301 	and.w	r3, r3, #1
 800464c:	2b00      	cmp	r3, #0
 800464e:	d106      	bne.n	800465e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004650:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004654:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004658:	2b00      	cmp	r3, #0
 800465a:	f000 80d1 	beq.w	8004800 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800465e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004662:	f003 0301 	and.w	r3, r3, #1
 8004666:	2b00      	cmp	r3, #0
 8004668:	d00b      	beq.n	8004682 <HAL_UART_IRQHandler+0xae>
 800466a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800466e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004672:	2b00      	cmp	r3, #0
 8004674:	d005      	beq.n	8004682 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800467a:	f043 0201 	orr.w	r2, r3, #1
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004686:	f003 0304 	and.w	r3, r3, #4
 800468a:	2b00      	cmp	r3, #0
 800468c:	d00b      	beq.n	80046a6 <HAL_UART_IRQHandler+0xd2>
 800468e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004692:	f003 0301 	and.w	r3, r3, #1
 8004696:	2b00      	cmp	r3, #0
 8004698:	d005      	beq.n	80046a6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800469e:	f043 0202 	orr.w	r2, r3, #2
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80046a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046aa:	f003 0302 	and.w	r3, r3, #2
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d00b      	beq.n	80046ca <HAL_UART_IRQHandler+0xf6>
 80046b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80046b6:	f003 0301 	and.w	r3, r3, #1
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d005      	beq.n	80046ca <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046c2:	f043 0204 	orr.w	r2, r3, #4
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80046ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046ce:	f003 0308 	and.w	r3, r3, #8
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d011      	beq.n	80046fa <HAL_UART_IRQHandler+0x126>
 80046d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046da:	f003 0320 	and.w	r3, r3, #32
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d105      	bne.n	80046ee <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80046e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80046e6:	f003 0301 	and.w	r3, r3, #1
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d005      	beq.n	80046fa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046f2:	f043 0208 	orr.w	r2, r3, #8
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046fe:	2b00      	cmp	r3, #0
 8004700:	f000 81f2 	beq.w	8004ae8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004704:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004708:	f003 0320 	and.w	r3, r3, #32
 800470c:	2b00      	cmp	r3, #0
 800470e:	d008      	beq.n	8004722 <HAL_UART_IRQHandler+0x14e>
 8004710:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004714:	f003 0320 	and.w	r3, r3, #32
 8004718:	2b00      	cmp	r3, #0
 800471a:	d002      	beq.n	8004722 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f000 fbc1 	bl	8004ea4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	695b      	ldr	r3, [r3, #20]
 8004728:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800472c:	2b40      	cmp	r3, #64	@ 0x40
 800472e:	bf0c      	ite	eq
 8004730:	2301      	moveq	r3, #1
 8004732:	2300      	movne	r3, #0
 8004734:	b2db      	uxtb	r3, r3
 8004736:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800473e:	f003 0308 	and.w	r3, r3, #8
 8004742:	2b00      	cmp	r3, #0
 8004744:	d103      	bne.n	800474e <HAL_UART_IRQHandler+0x17a>
 8004746:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800474a:	2b00      	cmp	r3, #0
 800474c:	d04f      	beq.n	80047ee <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 fac9 	bl	8004ce6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	695b      	ldr	r3, [r3, #20]
 800475a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800475e:	2b40      	cmp	r3, #64	@ 0x40
 8004760:	d141      	bne.n	80047e6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	3314      	adds	r3, #20
 8004768:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800476c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004770:	e853 3f00 	ldrex	r3, [r3]
 8004774:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004778:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800477c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004780:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	3314      	adds	r3, #20
 800478a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800478e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004792:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004796:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800479a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800479e:	e841 2300 	strex	r3, r2, [r1]
 80047a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80047a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d1d9      	bne.n	8004762 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d013      	beq.n	80047de <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047ba:	4a7e      	ldr	r2, [pc, #504]	@ (80049b4 <HAL_UART_IRQHandler+0x3e0>)
 80047bc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047c2:	4618      	mov	r0, r3
 80047c4:	f7fd ff4c 	bl	8002660 <HAL_DMA_Abort_IT>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d016      	beq.n	80047fc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80047d8:	4610      	mov	r0, r2
 80047da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047dc:	e00e      	b.n	80047fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f000 f99e 	bl	8004b20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047e4:	e00a      	b.n	80047fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f000 f99a 	bl	8004b20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047ec:	e006      	b.n	80047fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f000 f996 	bl	8004b20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80047fa:	e175      	b.n	8004ae8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047fc:	bf00      	nop
    return;
 80047fe:	e173      	b.n	8004ae8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004804:	2b01      	cmp	r3, #1
 8004806:	f040 814f 	bne.w	8004aa8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800480a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800480e:	f003 0310 	and.w	r3, r3, #16
 8004812:	2b00      	cmp	r3, #0
 8004814:	f000 8148 	beq.w	8004aa8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004818:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800481c:	f003 0310 	and.w	r3, r3, #16
 8004820:	2b00      	cmp	r3, #0
 8004822:	f000 8141 	beq.w	8004aa8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004826:	2300      	movs	r3, #0
 8004828:	60bb      	str	r3, [r7, #8]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	60bb      	str	r3, [r7, #8]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	60bb      	str	r3, [r7, #8]
 800483a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	695b      	ldr	r3, [r3, #20]
 8004842:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004846:	2b40      	cmp	r3, #64	@ 0x40
 8004848:	f040 80b6 	bne.w	80049b8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004858:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800485c:	2b00      	cmp	r3, #0
 800485e:	f000 8145 	beq.w	8004aec <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004866:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800486a:	429a      	cmp	r2, r3
 800486c:	f080 813e 	bcs.w	8004aec <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004876:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800487c:	69db      	ldr	r3, [r3, #28]
 800487e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004882:	f000 8088 	beq.w	8004996 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	330c      	adds	r3, #12
 800488c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004890:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004894:	e853 3f00 	ldrex	r3, [r3]
 8004898:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800489c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80048a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80048a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	330c      	adds	r3, #12
 80048ae:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80048b2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80048b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ba:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80048be:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80048c2:	e841 2300 	strex	r3, r2, [r1]
 80048c6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80048ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d1d9      	bne.n	8004886 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	3314      	adds	r3, #20
 80048d8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80048dc:	e853 3f00 	ldrex	r3, [r3]
 80048e0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80048e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80048e4:	f023 0301 	bic.w	r3, r3, #1
 80048e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	3314      	adds	r3, #20
 80048f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80048f6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80048fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048fc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80048fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004902:	e841 2300 	strex	r3, r2, [r1]
 8004906:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004908:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800490a:	2b00      	cmp	r3, #0
 800490c:	d1e1      	bne.n	80048d2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	3314      	adds	r3, #20
 8004914:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004916:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004918:	e853 3f00 	ldrex	r3, [r3]
 800491c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800491e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004920:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004924:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	3314      	adds	r3, #20
 800492e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004932:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004934:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004936:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004938:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800493a:	e841 2300 	strex	r3, r2, [r1]
 800493e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004940:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004942:	2b00      	cmp	r3, #0
 8004944:	d1e3      	bne.n	800490e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2220      	movs	r2, #32
 800494a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	330c      	adds	r3, #12
 800495a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800495c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800495e:	e853 3f00 	ldrex	r3, [r3]
 8004962:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004964:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004966:	f023 0310 	bic.w	r3, r3, #16
 800496a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	330c      	adds	r3, #12
 8004974:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004978:	65ba      	str	r2, [r7, #88]	@ 0x58
 800497a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800497c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800497e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004980:	e841 2300 	strex	r3, r2, [r1]
 8004984:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004986:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004988:	2b00      	cmp	r3, #0
 800498a:	d1e3      	bne.n	8004954 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004990:	4618      	mov	r0, r3
 8004992:	f7fd fdf5 	bl	8002580 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2202      	movs	r2, #2
 800499a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	1ad3      	subs	r3, r2, r3
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	4619      	mov	r1, r3
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f000 f8c1 	bl	8004b34 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80049b2:	e09b      	b.n	8004aec <HAL_UART_IRQHandler+0x518>
 80049b4:	08004dad 	.word	0x08004dad
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	f000 808e 	beq.w	8004af0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80049d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80049d8:	2b00      	cmp	r3, #0
 80049da:	f000 8089 	beq.w	8004af0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	330c      	adds	r3, #12
 80049e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049e8:	e853 3f00 	ldrex	r3, [r3]
 80049ec:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80049ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80049f4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	330c      	adds	r3, #12
 80049fe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004a02:	647a      	str	r2, [r7, #68]	@ 0x44
 8004a04:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a06:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004a08:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a0a:	e841 2300 	strex	r3, r2, [r1]
 8004a0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004a10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d1e3      	bne.n	80049de <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	3314      	adds	r3, #20
 8004a1c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a20:	e853 3f00 	ldrex	r3, [r3]
 8004a24:	623b      	str	r3, [r7, #32]
   return(result);
 8004a26:	6a3b      	ldr	r3, [r7, #32]
 8004a28:	f023 0301 	bic.w	r3, r3, #1
 8004a2c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	3314      	adds	r3, #20
 8004a36:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004a3a:	633a      	str	r2, [r7, #48]	@ 0x30
 8004a3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a3e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a42:	e841 2300 	strex	r3, r2, [r1]
 8004a46:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004a48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d1e3      	bne.n	8004a16 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2220      	movs	r2, #32
 8004a52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	330c      	adds	r3, #12
 8004a62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	e853 3f00 	ldrex	r3, [r3]
 8004a6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f023 0310 	bic.w	r3, r3, #16
 8004a72:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	330c      	adds	r3, #12
 8004a7c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004a80:	61fa      	str	r2, [r7, #28]
 8004a82:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a84:	69b9      	ldr	r1, [r7, #24]
 8004a86:	69fa      	ldr	r2, [r7, #28]
 8004a88:	e841 2300 	strex	r3, r2, [r1]
 8004a8c:	617b      	str	r3, [r7, #20]
   return(result);
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d1e3      	bne.n	8004a5c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2202      	movs	r2, #2
 8004a98:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004a9a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004a9e:	4619      	mov	r1, r3
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f000 f847 	bl	8004b34 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004aa6:	e023      	b.n	8004af0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004aa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004aac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d009      	beq.n	8004ac8 <HAL_UART_IRQHandler+0x4f4>
 8004ab4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ab8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d003      	beq.n	8004ac8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f000 f987 	bl	8004dd4 <UART_Transmit_IT>
    return;
 8004ac6:	e014      	b.n	8004af2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004ac8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004acc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d00e      	beq.n	8004af2 <HAL_UART_IRQHandler+0x51e>
 8004ad4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ad8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d008      	beq.n	8004af2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f000 f9c7 	bl	8004e74 <UART_EndTransmit_IT>
    return;
 8004ae6:	e004      	b.n	8004af2 <HAL_UART_IRQHandler+0x51e>
    return;
 8004ae8:	bf00      	nop
 8004aea:	e002      	b.n	8004af2 <HAL_UART_IRQHandler+0x51e>
      return;
 8004aec:	bf00      	nop
 8004aee:	e000      	b.n	8004af2 <HAL_UART_IRQHandler+0x51e>
      return;
 8004af0:	bf00      	nop
  }
}
 8004af2:	37e8      	adds	r7, #232	@ 0xe8
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004b00:	bf00      	nop
 8004b02:	370c      	adds	r7, #12
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004b14:	bf00      	nop
 8004b16:	370c      	adds	r7, #12
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004b28:	bf00      	nop
 8004b2a:	370c      	adds	r7, #12
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr

08004b34 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b083      	sub	sp, #12
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	460b      	mov	r3, r1
 8004b3e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004b40:	bf00      	nop
 8004b42:	370c      	adds	r7, #12
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr

08004b4c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b090      	sub	sp, #64	@ 0x40
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b58:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d137      	bne.n	8004bd8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8004b68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004b6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	3314      	adds	r3, #20
 8004b74:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b78:	e853 3f00 	ldrex	r3, [r3]
 8004b7c:	623b      	str	r3, [r7, #32]
   return(result);
 8004b7e:	6a3b      	ldr	r3, [r7, #32]
 8004b80:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b84:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004b86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	3314      	adds	r3, #20
 8004b8c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004b8e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004b90:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b92:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b96:	e841 2300 	strex	r3, r2, [r1]
 8004b9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004b9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d1e5      	bne.n	8004b6e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004ba2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	330c      	adds	r3, #12
 8004ba8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	e853 3f00 	ldrex	r3, [r3]
 8004bb0:	60fb      	str	r3, [r7, #12]
   return(result);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004bb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	330c      	adds	r3, #12
 8004bc0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004bc2:	61fa      	str	r2, [r7, #28]
 8004bc4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bc6:	69b9      	ldr	r1, [r7, #24]
 8004bc8:	69fa      	ldr	r2, [r7, #28]
 8004bca:	e841 2300 	strex	r3, r2, [r1]
 8004bce:	617b      	str	r3, [r7, #20]
   return(result);
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d1e5      	bne.n	8004ba2 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004bd6:	e002      	b.n	8004bde <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8004bd8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8004bda:	f7fb ffc3 	bl	8000b64 <HAL_UART_TxCpltCallback>
}
 8004bde:	bf00      	nop
 8004be0:	3740      	adds	r7, #64	@ 0x40
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}

08004be6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004be6:	b580      	push	{r7, lr}
 8004be8:	b084      	sub	sp, #16
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bf2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004bf4:	68f8      	ldr	r0, [r7, #12]
 8004bf6:	f7ff ff7f 	bl	8004af8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004bfa:	bf00      	nop
 8004bfc:	3710      	adds	r7, #16
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}

08004c02 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004c02:	b580      	push	{r7, lr}
 8004c04:	b084      	sub	sp, #16
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c12:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	695b      	ldr	r3, [r3, #20]
 8004c1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c1e:	2b80      	cmp	r3, #128	@ 0x80
 8004c20:	bf0c      	ite	eq
 8004c22:	2301      	moveq	r3, #1
 8004c24:	2300      	movne	r3, #0
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	2b21      	cmp	r3, #33	@ 0x21
 8004c34:	d108      	bne.n	8004c48 <UART_DMAError+0x46>
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d005      	beq.n	8004c48 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8004c42:	68b8      	ldr	r0, [r7, #8]
 8004c44:	f000 f827 	bl	8004c96 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	695b      	ldr	r3, [r3, #20]
 8004c4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c52:	2b40      	cmp	r3, #64	@ 0x40
 8004c54:	bf0c      	ite	eq
 8004c56:	2301      	moveq	r3, #1
 8004c58:	2300      	movne	r3, #0
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	2b22      	cmp	r3, #34	@ 0x22
 8004c68:	d108      	bne.n	8004c7c <UART_DMAError+0x7a>
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d005      	beq.n	8004c7c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	2200      	movs	r2, #0
 8004c74:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8004c76:	68b8      	ldr	r0, [r7, #8]
 8004c78:	f000 f835 	bl	8004ce6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c80:	f043 0210 	orr.w	r2, r3, #16
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c88:	68b8      	ldr	r0, [r7, #8]
 8004c8a:	f7ff ff49 	bl	8004b20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c8e:	bf00      	nop
 8004c90:	3710      	adds	r7, #16
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}

08004c96 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004c96:	b480      	push	{r7}
 8004c98:	b089      	sub	sp, #36	@ 0x24
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	330c      	adds	r3, #12
 8004ca4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	e853 3f00 	ldrex	r3, [r3]
 8004cac:	60bb      	str	r3, [r7, #8]
   return(result);
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004cb4:	61fb      	str	r3, [r7, #28]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	330c      	adds	r3, #12
 8004cbc:	69fa      	ldr	r2, [r7, #28]
 8004cbe:	61ba      	str	r2, [r7, #24]
 8004cc0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc2:	6979      	ldr	r1, [r7, #20]
 8004cc4:	69ba      	ldr	r2, [r7, #24]
 8004cc6:	e841 2300 	strex	r3, r2, [r1]
 8004cca:	613b      	str	r3, [r7, #16]
   return(result);
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d1e5      	bne.n	8004c9e <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2220      	movs	r2, #32
 8004cd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8004cda:	bf00      	nop
 8004cdc:	3724      	adds	r7, #36	@ 0x24
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr

08004ce6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ce6:	b480      	push	{r7}
 8004ce8:	b095      	sub	sp, #84	@ 0x54
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	330c      	adds	r3, #12
 8004cf4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cf8:	e853 3f00 	ldrex	r3, [r3]
 8004cfc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d00:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d04:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	330c      	adds	r3, #12
 8004d0c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004d0e:	643a      	str	r2, [r7, #64]	@ 0x40
 8004d10:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d12:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004d14:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004d16:	e841 2300 	strex	r3, r2, [r1]
 8004d1a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004d1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d1e5      	bne.n	8004cee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	3314      	adds	r3, #20
 8004d28:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d2a:	6a3b      	ldr	r3, [r7, #32]
 8004d2c:	e853 3f00 	ldrex	r3, [r3]
 8004d30:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d32:	69fb      	ldr	r3, [r7, #28]
 8004d34:	f023 0301 	bic.w	r3, r3, #1
 8004d38:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	3314      	adds	r3, #20
 8004d40:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d42:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d44:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d46:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d4a:	e841 2300 	strex	r3, r2, [r1]
 8004d4e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d1e5      	bne.n	8004d22 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d119      	bne.n	8004d92 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	330c      	adds	r3, #12
 8004d64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	e853 3f00 	ldrex	r3, [r3]
 8004d6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	f023 0310 	bic.w	r3, r3, #16
 8004d74:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	330c      	adds	r3, #12
 8004d7c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d7e:	61ba      	str	r2, [r7, #24]
 8004d80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d82:	6979      	ldr	r1, [r7, #20]
 8004d84:	69ba      	ldr	r2, [r7, #24]
 8004d86:	e841 2300 	strex	r3, r2, [r1]
 8004d8a:	613b      	str	r3, [r7, #16]
   return(result);
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d1e5      	bne.n	8004d5e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2220      	movs	r2, #32
 8004d96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004da0:	bf00      	nop
 8004da2:	3754      	adds	r7, #84	@ 0x54
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b084      	sub	sp, #16
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004db8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004dc6:	68f8      	ldr	r0, [r7, #12]
 8004dc8:	f7ff feaa 	bl	8004b20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004dcc:	bf00      	nop
 8004dce:	3710      	adds	r7, #16
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b085      	sub	sp, #20
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	2b21      	cmp	r3, #33	@ 0x21
 8004de6:	d13e      	bne.n	8004e66 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004df0:	d114      	bne.n	8004e1c <UART_Transmit_IT+0x48>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	691b      	ldr	r3, [r3, #16]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d110      	bne.n	8004e1c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a1b      	ldr	r3, [r3, #32]
 8004dfe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	881b      	ldrh	r3, [r3, #0]
 8004e04:	461a      	mov	r2, r3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e0e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6a1b      	ldr	r3, [r3, #32]
 8004e14:	1c9a      	adds	r2, r3, #2
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	621a      	str	r2, [r3, #32]
 8004e1a:	e008      	b.n	8004e2e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6a1b      	ldr	r3, [r3, #32]
 8004e20:	1c59      	adds	r1, r3, #1
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	6211      	str	r1, [r2, #32]
 8004e26:	781a      	ldrb	r2, [r3, #0]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	3b01      	subs	r3, #1
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	4619      	mov	r1, r3
 8004e3c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d10f      	bne.n	8004e62 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	68da      	ldr	r2, [r3, #12]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004e50:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	68da      	ldr	r2, [r3, #12]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004e60:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004e62:	2300      	movs	r3, #0
 8004e64:	e000      	b.n	8004e68 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004e66:	2302      	movs	r3, #2
  }
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3714      	adds	r7, #20
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr

08004e74 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b082      	sub	sp, #8
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	68da      	ldr	r2, [r3, #12]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e8a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2220      	movs	r2, #32
 8004e90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f7fb fe65 	bl	8000b64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004e9a:	2300      	movs	r3, #0
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3708      	adds	r7, #8
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}

08004ea4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b08c      	sub	sp, #48	@ 0x30
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	2b22      	cmp	r3, #34	@ 0x22
 8004eb6:	f040 80ae 	bne.w	8005016 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ec2:	d117      	bne.n	8004ef4 <UART_Receive_IT+0x50>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	691b      	ldr	r3, [r3, #16]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d113      	bne.n	8004ef4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ed4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ee2:	b29a      	uxth	r2, r3
 8004ee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ee6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eec:	1c9a      	adds	r2, r3, #2
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	629a      	str	r2, [r3, #40]	@ 0x28
 8004ef2:	e026      	b.n	8004f42 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ef8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004efa:	2300      	movs	r3, #0
 8004efc:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f06:	d007      	beq.n	8004f18 <UART_Receive_IT+0x74>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d10a      	bne.n	8004f26 <UART_Receive_IT+0x82>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	691b      	ldr	r3, [r3, #16]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d106      	bne.n	8004f26 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	b2da      	uxtb	r2, r3
 8004f20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f22:	701a      	strb	r2, [r3, #0]
 8004f24:	e008      	b.n	8004f38 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f32:	b2da      	uxtb	r2, r3
 8004f34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f36:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f3c:	1c5a      	adds	r2, r3, #1
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	3b01      	subs	r3, #1
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	4619      	mov	r1, r3
 8004f50:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d15d      	bne.n	8005012 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	68da      	ldr	r2, [r3, #12]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f022 0220 	bic.w	r2, r2, #32
 8004f64:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	68da      	ldr	r2, [r3, #12]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004f74:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	695a      	ldr	r2, [r3, #20]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f022 0201 	bic.w	r2, r2, #1
 8004f84:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2220      	movs	r2, #32
 8004f8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2200      	movs	r2, #0
 8004f92:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d135      	bne.n	8005008 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	330c      	adds	r3, #12
 8004fa8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	e853 3f00 	ldrex	r3, [r3]
 8004fb0:	613b      	str	r3, [r7, #16]
   return(result);
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	f023 0310 	bic.w	r3, r3, #16
 8004fb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	330c      	adds	r3, #12
 8004fc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fc2:	623a      	str	r2, [r7, #32]
 8004fc4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc6:	69f9      	ldr	r1, [r7, #28]
 8004fc8:	6a3a      	ldr	r2, [r7, #32]
 8004fca:	e841 2300 	strex	r3, r2, [r1]
 8004fce:	61bb      	str	r3, [r7, #24]
   return(result);
 8004fd0:	69bb      	ldr	r3, [r7, #24]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d1e5      	bne.n	8004fa2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f003 0310 	and.w	r3, r3, #16
 8004fe0:	2b10      	cmp	r3, #16
 8004fe2:	d10a      	bne.n	8004ffa <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	60fb      	str	r3, [r7, #12]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	60fb      	str	r3, [r7, #12]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	60fb      	str	r3, [r7, #12]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004ffe:	4619      	mov	r1, r3
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f7ff fd97 	bl	8004b34 <HAL_UARTEx_RxEventCallback>
 8005006:	e002      	b.n	800500e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f7ff fd7f 	bl	8004b0c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800500e:	2300      	movs	r3, #0
 8005010:	e002      	b.n	8005018 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005012:	2300      	movs	r3, #0
 8005014:	e000      	b.n	8005018 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005016:	2302      	movs	r3, #2
  }
}
 8005018:	4618      	mov	r0, r3
 800501a:	3730      	adds	r7, #48	@ 0x30
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}

08005020 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005020:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005024:	b0c0      	sub	sp, #256	@ 0x100
 8005026:	af00      	add	r7, sp, #0
 8005028:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800502c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	691b      	ldr	r3, [r3, #16]
 8005034:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800503c:	68d9      	ldr	r1, [r3, #12]
 800503e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	ea40 0301 	orr.w	r3, r0, r1
 8005048:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800504a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800504e:	689a      	ldr	r2, [r3, #8]
 8005050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	431a      	orrs	r2, r3
 8005058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800505c:	695b      	ldr	r3, [r3, #20]
 800505e:	431a      	orrs	r2, r3
 8005060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005064:	69db      	ldr	r3, [r3, #28]
 8005066:	4313      	orrs	r3, r2
 8005068:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800506c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005078:	f021 010c 	bic.w	r1, r1, #12
 800507c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005086:	430b      	orrs	r3, r1
 8005088:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800508a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	695b      	ldr	r3, [r3, #20]
 8005092:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005096:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800509a:	6999      	ldr	r1, [r3, #24]
 800509c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	ea40 0301 	orr.w	r3, r0, r1
 80050a6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80050a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	4b8f      	ldr	r3, [pc, #572]	@ (80052ec <UART_SetConfig+0x2cc>)
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d005      	beq.n	80050c0 <UART_SetConfig+0xa0>
 80050b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	4b8d      	ldr	r3, [pc, #564]	@ (80052f0 <UART_SetConfig+0x2d0>)
 80050bc:	429a      	cmp	r2, r3
 80050be:	d104      	bne.n	80050ca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80050c0:	f7fe fb94 	bl	80037ec <HAL_RCC_GetPCLK2Freq>
 80050c4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80050c8:	e003      	b.n	80050d2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80050ca:	f7fe fb7b 	bl	80037c4 <HAL_RCC_GetPCLK1Freq>
 80050ce:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050d6:	69db      	ldr	r3, [r3, #28]
 80050d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050dc:	f040 810c 	bne.w	80052f8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80050e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050e4:	2200      	movs	r2, #0
 80050e6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80050ea:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80050ee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80050f2:	4622      	mov	r2, r4
 80050f4:	462b      	mov	r3, r5
 80050f6:	1891      	adds	r1, r2, r2
 80050f8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80050fa:	415b      	adcs	r3, r3
 80050fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80050fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005102:	4621      	mov	r1, r4
 8005104:	eb12 0801 	adds.w	r8, r2, r1
 8005108:	4629      	mov	r1, r5
 800510a:	eb43 0901 	adc.w	r9, r3, r1
 800510e:	f04f 0200 	mov.w	r2, #0
 8005112:	f04f 0300 	mov.w	r3, #0
 8005116:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800511a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800511e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005122:	4690      	mov	r8, r2
 8005124:	4699      	mov	r9, r3
 8005126:	4623      	mov	r3, r4
 8005128:	eb18 0303 	adds.w	r3, r8, r3
 800512c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005130:	462b      	mov	r3, r5
 8005132:	eb49 0303 	adc.w	r3, r9, r3
 8005136:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800513a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	2200      	movs	r2, #0
 8005142:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005146:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800514a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800514e:	460b      	mov	r3, r1
 8005150:	18db      	adds	r3, r3, r3
 8005152:	653b      	str	r3, [r7, #80]	@ 0x50
 8005154:	4613      	mov	r3, r2
 8005156:	eb42 0303 	adc.w	r3, r2, r3
 800515a:	657b      	str	r3, [r7, #84]	@ 0x54
 800515c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005160:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005164:	f7fb f88c 	bl	8000280 <__aeabi_uldivmod>
 8005168:	4602      	mov	r2, r0
 800516a:	460b      	mov	r3, r1
 800516c:	4b61      	ldr	r3, [pc, #388]	@ (80052f4 <UART_SetConfig+0x2d4>)
 800516e:	fba3 2302 	umull	r2, r3, r3, r2
 8005172:	095b      	lsrs	r3, r3, #5
 8005174:	011c      	lsls	r4, r3, #4
 8005176:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800517a:	2200      	movs	r2, #0
 800517c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005180:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005184:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005188:	4642      	mov	r2, r8
 800518a:	464b      	mov	r3, r9
 800518c:	1891      	adds	r1, r2, r2
 800518e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005190:	415b      	adcs	r3, r3
 8005192:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005194:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005198:	4641      	mov	r1, r8
 800519a:	eb12 0a01 	adds.w	sl, r2, r1
 800519e:	4649      	mov	r1, r9
 80051a0:	eb43 0b01 	adc.w	fp, r3, r1
 80051a4:	f04f 0200 	mov.w	r2, #0
 80051a8:	f04f 0300 	mov.w	r3, #0
 80051ac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80051b0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80051b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80051b8:	4692      	mov	sl, r2
 80051ba:	469b      	mov	fp, r3
 80051bc:	4643      	mov	r3, r8
 80051be:	eb1a 0303 	adds.w	r3, sl, r3
 80051c2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80051c6:	464b      	mov	r3, r9
 80051c8:	eb4b 0303 	adc.w	r3, fp, r3
 80051cc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80051d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	2200      	movs	r2, #0
 80051d8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80051dc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80051e0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80051e4:	460b      	mov	r3, r1
 80051e6:	18db      	adds	r3, r3, r3
 80051e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80051ea:	4613      	mov	r3, r2
 80051ec:	eb42 0303 	adc.w	r3, r2, r3
 80051f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80051f2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80051f6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80051fa:	f7fb f841 	bl	8000280 <__aeabi_uldivmod>
 80051fe:	4602      	mov	r2, r0
 8005200:	460b      	mov	r3, r1
 8005202:	4611      	mov	r1, r2
 8005204:	4b3b      	ldr	r3, [pc, #236]	@ (80052f4 <UART_SetConfig+0x2d4>)
 8005206:	fba3 2301 	umull	r2, r3, r3, r1
 800520a:	095b      	lsrs	r3, r3, #5
 800520c:	2264      	movs	r2, #100	@ 0x64
 800520e:	fb02 f303 	mul.w	r3, r2, r3
 8005212:	1acb      	subs	r3, r1, r3
 8005214:	00db      	lsls	r3, r3, #3
 8005216:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800521a:	4b36      	ldr	r3, [pc, #216]	@ (80052f4 <UART_SetConfig+0x2d4>)
 800521c:	fba3 2302 	umull	r2, r3, r3, r2
 8005220:	095b      	lsrs	r3, r3, #5
 8005222:	005b      	lsls	r3, r3, #1
 8005224:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005228:	441c      	add	r4, r3
 800522a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800522e:	2200      	movs	r2, #0
 8005230:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005234:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005238:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800523c:	4642      	mov	r2, r8
 800523e:	464b      	mov	r3, r9
 8005240:	1891      	adds	r1, r2, r2
 8005242:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005244:	415b      	adcs	r3, r3
 8005246:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005248:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800524c:	4641      	mov	r1, r8
 800524e:	1851      	adds	r1, r2, r1
 8005250:	6339      	str	r1, [r7, #48]	@ 0x30
 8005252:	4649      	mov	r1, r9
 8005254:	414b      	adcs	r3, r1
 8005256:	637b      	str	r3, [r7, #52]	@ 0x34
 8005258:	f04f 0200 	mov.w	r2, #0
 800525c:	f04f 0300 	mov.w	r3, #0
 8005260:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005264:	4659      	mov	r1, fp
 8005266:	00cb      	lsls	r3, r1, #3
 8005268:	4651      	mov	r1, sl
 800526a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800526e:	4651      	mov	r1, sl
 8005270:	00ca      	lsls	r2, r1, #3
 8005272:	4610      	mov	r0, r2
 8005274:	4619      	mov	r1, r3
 8005276:	4603      	mov	r3, r0
 8005278:	4642      	mov	r2, r8
 800527a:	189b      	adds	r3, r3, r2
 800527c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005280:	464b      	mov	r3, r9
 8005282:	460a      	mov	r2, r1
 8005284:	eb42 0303 	adc.w	r3, r2, r3
 8005288:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800528c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	2200      	movs	r2, #0
 8005294:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005298:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800529c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80052a0:	460b      	mov	r3, r1
 80052a2:	18db      	adds	r3, r3, r3
 80052a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80052a6:	4613      	mov	r3, r2
 80052a8:	eb42 0303 	adc.w	r3, r2, r3
 80052ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80052b2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80052b6:	f7fa ffe3 	bl	8000280 <__aeabi_uldivmod>
 80052ba:	4602      	mov	r2, r0
 80052bc:	460b      	mov	r3, r1
 80052be:	4b0d      	ldr	r3, [pc, #52]	@ (80052f4 <UART_SetConfig+0x2d4>)
 80052c0:	fba3 1302 	umull	r1, r3, r3, r2
 80052c4:	095b      	lsrs	r3, r3, #5
 80052c6:	2164      	movs	r1, #100	@ 0x64
 80052c8:	fb01 f303 	mul.w	r3, r1, r3
 80052cc:	1ad3      	subs	r3, r2, r3
 80052ce:	00db      	lsls	r3, r3, #3
 80052d0:	3332      	adds	r3, #50	@ 0x32
 80052d2:	4a08      	ldr	r2, [pc, #32]	@ (80052f4 <UART_SetConfig+0x2d4>)
 80052d4:	fba2 2303 	umull	r2, r3, r2, r3
 80052d8:	095b      	lsrs	r3, r3, #5
 80052da:	f003 0207 	and.w	r2, r3, #7
 80052de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4422      	add	r2, r4
 80052e6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80052e8:	e106      	b.n	80054f8 <UART_SetConfig+0x4d8>
 80052ea:	bf00      	nop
 80052ec:	40011000 	.word	0x40011000
 80052f0:	40011400 	.word	0x40011400
 80052f4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80052f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052fc:	2200      	movs	r2, #0
 80052fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005302:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005306:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800530a:	4642      	mov	r2, r8
 800530c:	464b      	mov	r3, r9
 800530e:	1891      	adds	r1, r2, r2
 8005310:	6239      	str	r1, [r7, #32]
 8005312:	415b      	adcs	r3, r3
 8005314:	627b      	str	r3, [r7, #36]	@ 0x24
 8005316:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800531a:	4641      	mov	r1, r8
 800531c:	1854      	adds	r4, r2, r1
 800531e:	4649      	mov	r1, r9
 8005320:	eb43 0501 	adc.w	r5, r3, r1
 8005324:	f04f 0200 	mov.w	r2, #0
 8005328:	f04f 0300 	mov.w	r3, #0
 800532c:	00eb      	lsls	r3, r5, #3
 800532e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005332:	00e2      	lsls	r2, r4, #3
 8005334:	4614      	mov	r4, r2
 8005336:	461d      	mov	r5, r3
 8005338:	4643      	mov	r3, r8
 800533a:	18e3      	adds	r3, r4, r3
 800533c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005340:	464b      	mov	r3, r9
 8005342:	eb45 0303 	adc.w	r3, r5, r3
 8005346:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800534a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	2200      	movs	r2, #0
 8005352:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005356:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800535a:	f04f 0200 	mov.w	r2, #0
 800535e:	f04f 0300 	mov.w	r3, #0
 8005362:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005366:	4629      	mov	r1, r5
 8005368:	008b      	lsls	r3, r1, #2
 800536a:	4621      	mov	r1, r4
 800536c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005370:	4621      	mov	r1, r4
 8005372:	008a      	lsls	r2, r1, #2
 8005374:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005378:	f7fa ff82 	bl	8000280 <__aeabi_uldivmod>
 800537c:	4602      	mov	r2, r0
 800537e:	460b      	mov	r3, r1
 8005380:	4b60      	ldr	r3, [pc, #384]	@ (8005504 <UART_SetConfig+0x4e4>)
 8005382:	fba3 2302 	umull	r2, r3, r3, r2
 8005386:	095b      	lsrs	r3, r3, #5
 8005388:	011c      	lsls	r4, r3, #4
 800538a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800538e:	2200      	movs	r2, #0
 8005390:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005394:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005398:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800539c:	4642      	mov	r2, r8
 800539e:	464b      	mov	r3, r9
 80053a0:	1891      	adds	r1, r2, r2
 80053a2:	61b9      	str	r1, [r7, #24]
 80053a4:	415b      	adcs	r3, r3
 80053a6:	61fb      	str	r3, [r7, #28]
 80053a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053ac:	4641      	mov	r1, r8
 80053ae:	1851      	adds	r1, r2, r1
 80053b0:	6139      	str	r1, [r7, #16]
 80053b2:	4649      	mov	r1, r9
 80053b4:	414b      	adcs	r3, r1
 80053b6:	617b      	str	r3, [r7, #20]
 80053b8:	f04f 0200 	mov.w	r2, #0
 80053bc:	f04f 0300 	mov.w	r3, #0
 80053c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80053c4:	4659      	mov	r1, fp
 80053c6:	00cb      	lsls	r3, r1, #3
 80053c8:	4651      	mov	r1, sl
 80053ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053ce:	4651      	mov	r1, sl
 80053d0:	00ca      	lsls	r2, r1, #3
 80053d2:	4610      	mov	r0, r2
 80053d4:	4619      	mov	r1, r3
 80053d6:	4603      	mov	r3, r0
 80053d8:	4642      	mov	r2, r8
 80053da:	189b      	adds	r3, r3, r2
 80053dc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80053e0:	464b      	mov	r3, r9
 80053e2:	460a      	mov	r2, r1
 80053e4:	eb42 0303 	adc.w	r3, r2, r3
 80053e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80053ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80053f6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80053f8:	f04f 0200 	mov.w	r2, #0
 80053fc:	f04f 0300 	mov.w	r3, #0
 8005400:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005404:	4649      	mov	r1, r9
 8005406:	008b      	lsls	r3, r1, #2
 8005408:	4641      	mov	r1, r8
 800540a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800540e:	4641      	mov	r1, r8
 8005410:	008a      	lsls	r2, r1, #2
 8005412:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005416:	f7fa ff33 	bl	8000280 <__aeabi_uldivmod>
 800541a:	4602      	mov	r2, r0
 800541c:	460b      	mov	r3, r1
 800541e:	4611      	mov	r1, r2
 8005420:	4b38      	ldr	r3, [pc, #224]	@ (8005504 <UART_SetConfig+0x4e4>)
 8005422:	fba3 2301 	umull	r2, r3, r3, r1
 8005426:	095b      	lsrs	r3, r3, #5
 8005428:	2264      	movs	r2, #100	@ 0x64
 800542a:	fb02 f303 	mul.w	r3, r2, r3
 800542e:	1acb      	subs	r3, r1, r3
 8005430:	011b      	lsls	r3, r3, #4
 8005432:	3332      	adds	r3, #50	@ 0x32
 8005434:	4a33      	ldr	r2, [pc, #204]	@ (8005504 <UART_SetConfig+0x4e4>)
 8005436:	fba2 2303 	umull	r2, r3, r2, r3
 800543a:	095b      	lsrs	r3, r3, #5
 800543c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005440:	441c      	add	r4, r3
 8005442:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005446:	2200      	movs	r2, #0
 8005448:	673b      	str	r3, [r7, #112]	@ 0x70
 800544a:	677a      	str	r2, [r7, #116]	@ 0x74
 800544c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005450:	4642      	mov	r2, r8
 8005452:	464b      	mov	r3, r9
 8005454:	1891      	adds	r1, r2, r2
 8005456:	60b9      	str	r1, [r7, #8]
 8005458:	415b      	adcs	r3, r3
 800545a:	60fb      	str	r3, [r7, #12]
 800545c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005460:	4641      	mov	r1, r8
 8005462:	1851      	adds	r1, r2, r1
 8005464:	6039      	str	r1, [r7, #0]
 8005466:	4649      	mov	r1, r9
 8005468:	414b      	adcs	r3, r1
 800546a:	607b      	str	r3, [r7, #4]
 800546c:	f04f 0200 	mov.w	r2, #0
 8005470:	f04f 0300 	mov.w	r3, #0
 8005474:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005478:	4659      	mov	r1, fp
 800547a:	00cb      	lsls	r3, r1, #3
 800547c:	4651      	mov	r1, sl
 800547e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005482:	4651      	mov	r1, sl
 8005484:	00ca      	lsls	r2, r1, #3
 8005486:	4610      	mov	r0, r2
 8005488:	4619      	mov	r1, r3
 800548a:	4603      	mov	r3, r0
 800548c:	4642      	mov	r2, r8
 800548e:	189b      	adds	r3, r3, r2
 8005490:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005492:	464b      	mov	r3, r9
 8005494:	460a      	mov	r2, r1
 8005496:	eb42 0303 	adc.w	r3, r2, r3
 800549a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800549c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	663b      	str	r3, [r7, #96]	@ 0x60
 80054a6:	667a      	str	r2, [r7, #100]	@ 0x64
 80054a8:	f04f 0200 	mov.w	r2, #0
 80054ac:	f04f 0300 	mov.w	r3, #0
 80054b0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80054b4:	4649      	mov	r1, r9
 80054b6:	008b      	lsls	r3, r1, #2
 80054b8:	4641      	mov	r1, r8
 80054ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054be:	4641      	mov	r1, r8
 80054c0:	008a      	lsls	r2, r1, #2
 80054c2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80054c6:	f7fa fedb 	bl	8000280 <__aeabi_uldivmod>
 80054ca:	4602      	mov	r2, r0
 80054cc:	460b      	mov	r3, r1
 80054ce:	4b0d      	ldr	r3, [pc, #52]	@ (8005504 <UART_SetConfig+0x4e4>)
 80054d0:	fba3 1302 	umull	r1, r3, r3, r2
 80054d4:	095b      	lsrs	r3, r3, #5
 80054d6:	2164      	movs	r1, #100	@ 0x64
 80054d8:	fb01 f303 	mul.w	r3, r1, r3
 80054dc:	1ad3      	subs	r3, r2, r3
 80054de:	011b      	lsls	r3, r3, #4
 80054e0:	3332      	adds	r3, #50	@ 0x32
 80054e2:	4a08      	ldr	r2, [pc, #32]	@ (8005504 <UART_SetConfig+0x4e4>)
 80054e4:	fba2 2303 	umull	r2, r3, r2, r3
 80054e8:	095b      	lsrs	r3, r3, #5
 80054ea:	f003 020f 	and.w	r2, r3, #15
 80054ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4422      	add	r2, r4
 80054f6:	609a      	str	r2, [r3, #8]
}
 80054f8:	bf00      	nop
 80054fa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80054fe:	46bd      	mov	sp, r7
 8005500:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005504:	51eb851f 	.word	0x51eb851f

08005508 <siprintf>:
 8005508:	b40e      	push	{r1, r2, r3}
 800550a:	b500      	push	{lr}
 800550c:	b09c      	sub	sp, #112	@ 0x70
 800550e:	ab1d      	add	r3, sp, #116	@ 0x74
 8005510:	9002      	str	r0, [sp, #8]
 8005512:	9006      	str	r0, [sp, #24]
 8005514:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005518:	4809      	ldr	r0, [pc, #36]	@ (8005540 <siprintf+0x38>)
 800551a:	9107      	str	r1, [sp, #28]
 800551c:	9104      	str	r1, [sp, #16]
 800551e:	4909      	ldr	r1, [pc, #36]	@ (8005544 <siprintf+0x3c>)
 8005520:	f853 2b04 	ldr.w	r2, [r3], #4
 8005524:	9105      	str	r1, [sp, #20]
 8005526:	6800      	ldr	r0, [r0, #0]
 8005528:	9301      	str	r3, [sp, #4]
 800552a:	a902      	add	r1, sp, #8
 800552c:	f000 f994 	bl	8005858 <_svfiprintf_r>
 8005530:	9b02      	ldr	r3, [sp, #8]
 8005532:	2200      	movs	r2, #0
 8005534:	701a      	strb	r2, [r3, #0]
 8005536:	b01c      	add	sp, #112	@ 0x70
 8005538:	f85d eb04 	ldr.w	lr, [sp], #4
 800553c:	b003      	add	sp, #12
 800553e:	4770      	bx	lr
 8005540:	2000000c 	.word	0x2000000c
 8005544:	ffff0208 	.word	0xffff0208

08005548 <memset>:
 8005548:	4402      	add	r2, r0
 800554a:	4603      	mov	r3, r0
 800554c:	4293      	cmp	r3, r2
 800554e:	d100      	bne.n	8005552 <memset+0xa>
 8005550:	4770      	bx	lr
 8005552:	f803 1b01 	strb.w	r1, [r3], #1
 8005556:	e7f9      	b.n	800554c <memset+0x4>

08005558 <__errno>:
 8005558:	4b01      	ldr	r3, [pc, #4]	@ (8005560 <__errno+0x8>)
 800555a:	6818      	ldr	r0, [r3, #0]
 800555c:	4770      	bx	lr
 800555e:	bf00      	nop
 8005560:	2000000c 	.word	0x2000000c

08005564 <__libc_init_array>:
 8005564:	b570      	push	{r4, r5, r6, lr}
 8005566:	4d0d      	ldr	r5, [pc, #52]	@ (800559c <__libc_init_array+0x38>)
 8005568:	4c0d      	ldr	r4, [pc, #52]	@ (80055a0 <__libc_init_array+0x3c>)
 800556a:	1b64      	subs	r4, r4, r5
 800556c:	10a4      	asrs	r4, r4, #2
 800556e:	2600      	movs	r6, #0
 8005570:	42a6      	cmp	r6, r4
 8005572:	d109      	bne.n	8005588 <__libc_init_array+0x24>
 8005574:	4d0b      	ldr	r5, [pc, #44]	@ (80055a4 <__libc_init_array+0x40>)
 8005576:	4c0c      	ldr	r4, [pc, #48]	@ (80055a8 <__libc_init_array+0x44>)
 8005578:	f000 fc66 	bl	8005e48 <_init>
 800557c:	1b64      	subs	r4, r4, r5
 800557e:	10a4      	asrs	r4, r4, #2
 8005580:	2600      	movs	r6, #0
 8005582:	42a6      	cmp	r6, r4
 8005584:	d105      	bne.n	8005592 <__libc_init_array+0x2e>
 8005586:	bd70      	pop	{r4, r5, r6, pc}
 8005588:	f855 3b04 	ldr.w	r3, [r5], #4
 800558c:	4798      	blx	r3
 800558e:	3601      	adds	r6, #1
 8005590:	e7ee      	b.n	8005570 <__libc_init_array+0xc>
 8005592:	f855 3b04 	ldr.w	r3, [r5], #4
 8005596:	4798      	blx	r3
 8005598:	3601      	adds	r6, #1
 800559a:	e7f2      	b.n	8005582 <__libc_init_array+0x1e>
 800559c:	08005f44 	.word	0x08005f44
 80055a0:	08005f44 	.word	0x08005f44
 80055a4:	08005f44 	.word	0x08005f44
 80055a8:	08005f48 	.word	0x08005f48

080055ac <__retarget_lock_acquire_recursive>:
 80055ac:	4770      	bx	lr

080055ae <__retarget_lock_release_recursive>:
 80055ae:	4770      	bx	lr

080055b0 <_free_r>:
 80055b0:	b538      	push	{r3, r4, r5, lr}
 80055b2:	4605      	mov	r5, r0
 80055b4:	2900      	cmp	r1, #0
 80055b6:	d041      	beq.n	800563c <_free_r+0x8c>
 80055b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055bc:	1f0c      	subs	r4, r1, #4
 80055be:	2b00      	cmp	r3, #0
 80055c0:	bfb8      	it	lt
 80055c2:	18e4      	addlt	r4, r4, r3
 80055c4:	f000 f8e0 	bl	8005788 <__malloc_lock>
 80055c8:	4a1d      	ldr	r2, [pc, #116]	@ (8005640 <_free_r+0x90>)
 80055ca:	6813      	ldr	r3, [r2, #0]
 80055cc:	b933      	cbnz	r3, 80055dc <_free_r+0x2c>
 80055ce:	6063      	str	r3, [r4, #4]
 80055d0:	6014      	str	r4, [r2, #0]
 80055d2:	4628      	mov	r0, r5
 80055d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80055d8:	f000 b8dc 	b.w	8005794 <__malloc_unlock>
 80055dc:	42a3      	cmp	r3, r4
 80055de:	d908      	bls.n	80055f2 <_free_r+0x42>
 80055e0:	6820      	ldr	r0, [r4, #0]
 80055e2:	1821      	adds	r1, r4, r0
 80055e4:	428b      	cmp	r3, r1
 80055e6:	bf01      	itttt	eq
 80055e8:	6819      	ldreq	r1, [r3, #0]
 80055ea:	685b      	ldreq	r3, [r3, #4]
 80055ec:	1809      	addeq	r1, r1, r0
 80055ee:	6021      	streq	r1, [r4, #0]
 80055f0:	e7ed      	b.n	80055ce <_free_r+0x1e>
 80055f2:	461a      	mov	r2, r3
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	b10b      	cbz	r3, 80055fc <_free_r+0x4c>
 80055f8:	42a3      	cmp	r3, r4
 80055fa:	d9fa      	bls.n	80055f2 <_free_r+0x42>
 80055fc:	6811      	ldr	r1, [r2, #0]
 80055fe:	1850      	adds	r0, r2, r1
 8005600:	42a0      	cmp	r0, r4
 8005602:	d10b      	bne.n	800561c <_free_r+0x6c>
 8005604:	6820      	ldr	r0, [r4, #0]
 8005606:	4401      	add	r1, r0
 8005608:	1850      	adds	r0, r2, r1
 800560a:	4283      	cmp	r3, r0
 800560c:	6011      	str	r1, [r2, #0]
 800560e:	d1e0      	bne.n	80055d2 <_free_r+0x22>
 8005610:	6818      	ldr	r0, [r3, #0]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	6053      	str	r3, [r2, #4]
 8005616:	4408      	add	r0, r1
 8005618:	6010      	str	r0, [r2, #0]
 800561a:	e7da      	b.n	80055d2 <_free_r+0x22>
 800561c:	d902      	bls.n	8005624 <_free_r+0x74>
 800561e:	230c      	movs	r3, #12
 8005620:	602b      	str	r3, [r5, #0]
 8005622:	e7d6      	b.n	80055d2 <_free_r+0x22>
 8005624:	6820      	ldr	r0, [r4, #0]
 8005626:	1821      	adds	r1, r4, r0
 8005628:	428b      	cmp	r3, r1
 800562a:	bf04      	itt	eq
 800562c:	6819      	ldreq	r1, [r3, #0]
 800562e:	685b      	ldreq	r3, [r3, #4]
 8005630:	6063      	str	r3, [r4, #4]
 8005632:	bf04      	itt	eq
 8005634:	1809      	addeq	r1, r1, r0
 8005636:	6021      	streq	r1, [r4, #0]
 8005638:	6054      	str	r4, [r2, #4]
 800563a:	e7ca      	b.n	80055d2 <_free_r+0x22>
 800563c:	bd38      	pop	{r3, r4, r5, pc}
 800563e:	bf00      	nop
 8005640:	20000ae8 	.word	0x20000ae8

08005644 <sbrk_aligned>:
 8005644:	b570      	push	{r4, r5, r6, lr}
 8005646:	4e0f      	ldr	r6, [pc, #60]	@ (8005684 <sbrk_aligned+0x40>)
 8005648:	460c      	mov	r4, r1
 800564a:	6831      	ldr	r1, [r6, #0]
 800564c:	4605      	mov	r5, r0
 800564e:	b911      	cbnz	r1, 8005656 <sbrk_aligned+0x12>
 8005650:	f000 fba6 	bl	8005da0 <_sbrk_r>
 8005654:	6030      	str	r0, [r6, #0]
 8005656:	4621      	mov	r1, r4
 8005658:	4628      	mov	r0, r5
 800565a:	f000 fba1 	bl	8005da0 <_sbrk_r>
 800565e:	1c43      	adds	r3, r0, #1
 8005660:	d103      	bne.n	800566a <sbrk_aligned+0x26>
 8005662:	f04f 34ff 	mov.w	r4, #4294967295
 8005666:	4620      	mov	r0, r4
 8005668:	bd70      	pop	{r4, r5, r6, pc}
 800566a:	1cc4      	adds	r4, r0, #3
 800566c:	f024 0403 	bic.w	r4, r4, #3
 8005670:	42a0      	cmp	r0, r4
 8005672:	d0f8      	beq.n	8005666 <sbrk_aligned+0x22>
 8005674:	1a21      	subs	r1, r4, r0
 8005676:	4628      	mov	r0, r5
 8005678:	f000 fb92 	bl	8005da0 <_sbrk_r>
 800567c:	3001      	adds	r0, #1
 800567e:	d1f2      	bne.n	8005666 <sbrk_aligned+0x22>
 8005680:	e7ef      	b.n	8005662 <sbrk_aligned+0x1e>
 8005682:	bf00      	nop
 8005684:	20000ae4 	.word	0x20000ae4

08005688 <_malloc_r>:
 8005688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800568c:	1ccd      	adds	r5, r1, #3
 800568e:	f025 0503 	bic.w	r5, r5, #3
 8005692:	3508      	adds	r5, #8
 8005694:	2d0c      	cmp	r5, #12
 8005696:	bf38      	it	cc
 8005698:	250c      	movcc	r5, #12
 800569a:	2d00      	cmp	r5, #0
 800569c:	4606      	mov	r6, r0
 800569e:	db01      	blt.n	80056a4 <_malloc_r+0x1c>
 80056a0:	42a9      	cmp	r1, r5
 80056a2:	d904      	bls.n	80056ae <_malloc_r+0x26>
 80056a4:	230c      	movs	r3, #12
 80056a6:	6033      	str	r3, [r6, #0]
 80056a8:	2000      	movs	r0, #0
 80056aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005784 <_malloc_r+0xfc>
 80056b2:	f000 f869 	bl	8005788 <__malloc_lock>
 80056b6:	f8d8 3000 	ldr.w	r3, [r8]
 80056ba:	461c      	mov	r4, r3
 80056bc:	bb44      	cbnz	r4, 8005710 <_malloc_r+0x88>
 80056be:	4629      	mov	r1, r5
 80056c0:	4630      	mov	r0, r6
 80056c2:	f7ff ffbf 	bl	8005644 <sbrk_aligned>
 80056c6:	1c43      	adds	r3, r0, #1
 80056c8:	4604      	mov	r4, r0
 80056ca:	d158      	bne.n	800577e <_malloc_r+0xf6>
 80056cc:	f8d8 4000 	ldr.w	r4, [r8]
 80056d0:	4627      	mov	r7, r4
 80056d2:	2f00      	cmp	r7, #0
 80056d4:	d143      	bne.n	800575e <_malloc_r+0xd6>
 80056d6:	2c00      	cmp	r4, #0
 80056d8:	d04b      	beq.n	8005772 <_malloc_r+0xea>
 80056da:	6823      	ldr	r3, [r4, #0]
 80056dc:	4639      	mov	r1, r7
 80056de:	4630      	mov	r0, r6
 80056e0:	eb04 0903 	add.w	r9, r4, r3
 80056e4:	f000 fb5c 	bl	8005da0 <_sbrk_r>
 80056e8:	4581      	cmp	r9, r0
 80056ea:	d142      	bne.n	8005772 <_malloc_r+0xea>
 80056ec:	6821      	ldr	r1, [r4, #0]
 80056ee:	1a6d      	subs	r5, r5, r1
 80056f0:	4629      	mov	r1, r5
 80056f2:	4630      	mov	r0, r6
 80056f4:	f7ff ffa6 	bl	8005644 <sbrk_aligned>
 80056f8:	3001      	adds	r0, #1
 80056fa:	d03a      	beq.n	8005772 <_malloc_r+0xea>
 80056fc:	6823      	ldr	r3, [r4, #0]
 80056fe:	442b      	add	r3, r5
 8005700:	6023      	str	r3, [r4, #0]
 8005702:	f8d8 3000 	ldr.w	r3, [r8]
 8005706:	685a      	ldr	r2, [r3, #4]
 8005708:	bb62      	cbnz	r2, 8005764 <_malloc_r+0xdc>
 800570a:	f8c8 7000 	str.w	r7, [r8]
 800570e:	e00f      	b.n	8005730 <_malloc_r+0xa8>
 8005710:	6822      	ldr	r2, [r4, #0]
 8005712:	1b52      	subs	r2, r2, r5
 8005714:	d420      	bmi.n	8005758 <_malloc_r+0xd0>
 8005716:	2a0b      	cmp	r2, #11
 8005718:	d917      	bls.n	800574a <_malloc_r+0xc2>
 800571a:	1961      	adds	r1, r4, r5
 800571c:	42a3      	cmp	r3, r4
 800571e:	6025      	str	r5, [r4, #0]
 8005720:	bf18      	it	ne
 8005722:	6059      	strne	r1, [r3, #4]
 8005724:	6863      	ldr	r3, [r4, #4]
 8005726:	bf08      	it	eq
 8005728:	f8c8 1000 	streq.w	r1, [r8]
 800572c:	5162      	str	r2, [r4, r5]
 800572e:	604b      	str	r3, [r1, #4]
 8005730:	4630      	mov	r0, r6
 8005732:	f000 f82f 	bl	8005794 <__malloc_unlock>
 8005736:	f104 000b 	add.w	r0, r4, #11
 800573a:	1d23      	adds	r3, r4, #4
 800573c:	f020 0007 	bic.w	r0, r0, #7
 8005740:	1ac2      	subs	r2, r0, r3
 8005742:	bf1c      	itt	ne
 8005744:	1a1b      	subne	r3, r3, r0
 8005746:	50a3      	strne	r3, [r4, r2]
 8005748:	e7af      	b.n	80056aa <_malloc_r+0x22>
 800574a:	6862      	ldr	r2, [r4, #4]
 800574c:	42a3      	cmp	r3, r4
 800574e:	bf0c      	ite	eq
 8005750:	f8c8 2000 	streq.w	r2, [r8]
 8005754:	605a      	strne	r2, [r3, #4]
 8005756:	e7eb      	b.n	8005730 <_malloc_r+0xa8>
 8005758:	4623      	mov	r3, r4
 800575a:	6864      	ldr	r4, [r4, #4]
 800575c:	e7ae      	b.n	80056bc <_malloc_r+0x34>
 800575e:	463c      	mov	r4, r7
 8005760:	687f      	ldr	r7, [r7, #4]
 8005762:	e7b6      	b.n	80056d2 <_malloc_r+0x4a>
 8005764:	461a      	mov	r2, r3
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	42a3      	cmp	r3, r4
 800576a:	d1fb      	bne.n	8005764 <_malloc_r+0xdc>
 800576c:	2300      	movs	r3, #0
 800576e:	6053      	str	r3, [r2, #4]
 8005770:	e7de      	b.n	8005730 <_malloc_r+0xa8>
 8005772:	230c      	movs	r3, #12
 8005774:	6033      	str	r3, [r6, #0]
 8005776:	4630      	mov	r0, r6
 8005778:	f000 f80c 	bl	8005794 <__malloc_unlock>
 800577c:	e794      	b.n	80056a8 <_malloc_r+0x20>
 800577e:	6005      	str	r5, [r0, #0]
 8005780:	e7d6      	b.n	8005730 <_malloc_r+0xa8>
 8005782:	bf00      	nop
 8005784:	20000ae8 	.word	0x20000ae8

08005788 <__malloc_lock>:
 8005788:	4801      	ldr	r0, [pc, #4]	@ (8005790 <__malloc_lock+0x8>)
 800578a:	f7ff bf0f 	b.w	80055ac <__retarget_lock_acquire_recursive>
 800578e:	bf00      	nop
 8005790:	20000ae0 	.word	0x20000ae0

08005794 <__malloc_unlock>:
 8005794:	4801      	ldr	r0, [pc, #4]	@ (800579c <__malloc_unlock+0x8>)
 8005796:	f7ff bf0a 	b.w	80055ae <__retarget_lock_release_recursive>
 800579a:	bf00      	nop
 800579c:	20000ae0 	.word	0x20000ae0

080057a0 <__ssputs_r>:
 80057a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057a4:	688e      	ldr	r6, [r1, #8]
 80057a6:	461f      	mov	r7, r3
 80057a8:	42be      	cmp	r6, r7
 80057aa:	680b      	ldr	r3, [r1, #0]
 80057ac:	4682      	mov	sl, r0
 80057ae:	460c      	mov	r4, r1
 80057b0:	4690      	mov	r8, r2
 80057b2:	d82d      	bhi.n	8005810 <__ssputs_r+0x70>
 80057b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80057b8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80057bc:	d026      	beq.n	800580c <__ssputs_r+0x6c>
 80057be:	6965      	ldr	r5, [r4, #20]
 80057c0:	6909      	ldr	r1, [r1, #16]
 80057c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80057c6:	eba3 0901 	sub.w	r9, r3, r1
 80057ca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80057ce:	1c7b      	adds	r3, r7, #1
 80057d0:	444b      	add	r3, r9
 80057d2:	106d      	asrs	r5, r5, #1
 80057d4:	429d      	cmp	r5, r3
 80057d6:	bf38      	it	cc
 80057d8:	461d      	movcc	r5, r3
 80057da:	0553      	lsls	r3, r2, #21
 80057dc:	d527      	bpl.n	800582e <__ssputs_r+0x8e>
 80057de:	4629      	mov	r1, r5
 80057e0:	f7ff ff52 	bl	8005688 <_malloc_r>
 80057e4:	4606      	mov	r6, r0
 80057e6:	b360      	cbz	r0, 8005842 <__ssputs_r+0xa2>
 80057e8:	6921      	ldr	r1, [r4, #16]
 80057ea:	464a      	mov	r2, r9
 80057ec:	f000 fae8 	bl	8005dc0 <memcpy>
 80057f0:	89a3      	ldrh	r3, [r4, #12]
 80057f2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80057f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057fa:	81a3      	strh	r3, [r4, #12]
 80057fc:	6126      	str	r6, [r4, #16]
 80057fe:	6165      	str	r5, [r4, #20]
 8005800:	444e      	add	r6, r9
 8005802:	eba5 0509 	sub.w	r5, r5, r9
 8005806:	6026      	str	r6, [r4, #0]
 8005808:	60a5      	str	r5, [r4, #8]
 800580a:	463e      	mov	r6, r7
 800580c:	42be      	cmp	r6, r7
 800580e:	d900      	bls.n	8005812 <__ssputs_r+0x72>
 8005810:	463e      	mov	r6, r7
 8005812:	6820      	ldr	r0, [r4, #0]
 8005814:	4632      	mov	r2, r6
 8005816:	4641      	mov	r1, r8
 8005818:	f000 faa8 	bl	8005d6c <memmove>
 800581c:	68a3      	ldr	r3, [r4, #8]
 800581e:	1b9b      	subs	r3, r3, r6
 8005820:	60a3      	str	r3, [r4, #8]
 8005822:	6823      	ldr	r3, [r4, #0]
 8005824:	4433      	add	r3, r6
 8005826:	6023      	str	r3, [r4, #0]
 8005828:	2000      	movs	r0, #0
 800582a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800582e:	462a      	mov	r2, r5
 8005830:	f000 fad4 	bl	8005ddc <_realloc_r>
 8005834:	4606      	mov	r6, r0
 8005836:	2800      	cmp	r0, #0
 8005838:	d1e0      	bne.n	80057fc <__ssputs_r+0x5c>
 800583a:	6921      	ldr	r1, [r4, #16]
 800583c:	4650      	mov	r0, sl
 800583e:	f7ff feb7 	bl	80055b0 <_free_r>
 8005842:	230c      	movs	r3, #12
 8005844:	f8ca 3000 	str.w	r3, [sl]
 8005848:	89a3      	ldrh	r3, [r4, #12]
 800584a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800584e:	81a3      	strh	r3, [r4, #12]
 8005850:	f04f 30ff 	mov.w	r0, #4294967295
 8005854:	e7e9      	b.n	800582a <__ssputs_r+0x8a>
	...

08005858 <_svfiprintf_r>:
 8005858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800585c:	4698      	mov	r8, r3
 800585e:	898b      	ldrh	r3, [r1, #12]
 8005860:	061b      	lsls	r3, r3, #24
 8005862:	b09d      	sub	sp, #116	@ 0x74
 8005864:	4607      	mov	r7, r0
 8005866:	460d      	mov	r5, r1
 8005868:	4614      	mov	r4, r2
 800586a:	d510      	bpl.n	800588e <_svfiprintf_r+0x36>
 800586c:	690b      	ldr	r3, [r1, #16]
 800586e:	b973      	cbnz	r3, 800588e <_svfiprintf_r+0x36>
 8005870:	2140      	movs	r1, #64	@ 0x40
 8005872:	f7ff ff09 	bl	8005688 <_malloc_r>
 8005876:	6028      	str	r0, [r5, #0]
 8005878:	6128      	str	r0, [r5, #16]
 800587a:	b930      	cbnz	r0, 800588a <_svfiprintf_r+0x32>
 800587c:	230c      	movs	r3, #12
 800587e:	603b      	str	r3, [r7, #0]
 8005880:	f04f 30ff 	mov.w	r0, #4294967295
 8005884:	b01d      	add	sp, #116	@ 0x74
 8005886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800588a:	2340      	movs	r3, #64	@ 0x40
 800588c:	616b      	str	r3, [r5, #20]
 800588e:	2300      	movs	r3, #0
 8005890:	9309      	str	r3, [sp, #36]	@ 0x24
 8005892:	2320      	movs	r3, #32
 8005894:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005898:	f8cd 800c 	str.w	r8, [sp, #12]
 800589c:	2330      	movs	r3, #48	@ 0x30
 800589e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005a3c <_svfiprintf_r+0x1e4>
 80058a2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80058a6:	f04f 0901 	mov.w	r9, #1
 80058aa:	4623      	mov	r3, r4
 80058ac:	469a      	mov	sl, r3
 80058ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80058b2:	b10a      	cbz	r2, 80058b8 <_svfiprintf_r+0x60>
 80058b4:	2a25      	cmp	r2, #37	@ 0x25
 80058b6:	d1f9      	bne.n	80058ac <_svfiprintf_r+0x54>
 80058b8:	ebba 0b04 	subs.w	fp, sl, r4
 80058bc:	d00b      	beq.n	80058d6 <_svfiprintf_r+0x7e>
 80058be:	465b      	mov	r3, fp
 80058c0:	4622      	mov	r2, r4
 80058c2:	4629      	mov	r1, r5
 80058c4:	4638      	mov	r0, r7
 80058c6:	f7ff ff6b 	bl	80057a0 <__ssputs_r>
 80058ca:	3001      	adds	r0, #1
 80058cc:	f000 80a7 	beq.w	8005a1e <_svfiprintf_r+0x1c6>
 80058d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80058d2:	445a      	add	r2, fp
 80058d4:	9209      	str	r2, [sp, #36]	@ 0x24
 80058d6:	f89a 3000 	ldrb.w	r3, [sl]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	f000 809f 	beq.w	8005a1e <_svfiprintf_r+0x1c6>
 80058e0:	2300      	movs	r3, #0
 80058e2:	f04f 32ff 	mov.w	r2, #4294967295
 80058e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80058ea:	f10a 0a01 	add.w	sl, sl, #1
 80058ee:	9304      	str	r3, [sp, #16]
 80058f0:	9307      	str	r3, [sp, #28]
 80058f2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80058f6:	931a      	str	r3, [sp, #104]	@ 0x68
 80058f8:	4654      	mov	r4, sl
 80058fa:	2205      	movs	r2, #5
 80058fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005900:	484e      	ldr	r0, [pc, #312]	@ (8005a3c <_svfiprintf_r+0x1e4>)
 8005902:	f7fa fc6d 	bl	80001e0 <memchr>
 8005906:	9a04      	ldr	r2, [sp, #16]
 8005908:	b9d8      	cbnz	r0, 8005942 <_svfiprintf_r+0xea>
 800590a:	06d0      	lsls	r0, r2, #27
 800590c:	bf44      	itt	mi
 800590e:	2320      	movmi	r3, #32
 8005910:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005914:	0711      	lsls	r1, r2, #28
 8005916:	bf44      	itt	mi
 8005918:	232b      	movmi	r3, #43	@ 0x2b
 800591a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800591e:	f89a 3000 	ldrb.w	r3, [sl]
 8005922:	2b2a      	cmp	r3, #42	@ 0x2a
 8005924:	d015      	beq.n	8005952 <_svfiprintf_r+0xfa>
 8005926:	9a07      	ldr	r2, [sp, #28]
 8005928:	4654      	mov	r4, sl
 800592a:	2000      	movs	r0, #0
 800592c:	f04f 0c0a 	mov.w	ip, #10
 8005930:	4621      	mov	r1, r4
 8005932:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005936:	3b30      	subs	r3, #48	@ 0x30
 8005938:	2b09      	cmp	r3, #9
 800593a:	d94b      	bls.n	80059d4 <_svfiprintf_r+0x17c>
 800593c:	b1b0      	cbz	r0, 800596c <_svfiprintf_r+0x114>
 800593e:	9207      	str	r2, [sp, #28]
 8005940:	e014      	b.n	800596c <_svfiprintf_r+0x114>
 8005942:	eba0 0308 	sub.w	r3, r0, r8
 8005946:	fa09 f303 	lsl.w	r3, r9, r3
 800594a:	4313      	orrs	r3, r2
 800594c:	9304      	str	r3, [sp, #16]
 800594e:	46a2      	mov	sl, r4
 8005950:	e7d2      	b.n	80058f8 <_svfiprintf_r+0xa0>
 8005952:	9b03      	ldr	r3, [sp, #12]
 8005954:	1d19      	adds	r1, r3, #4
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	9103      	str	r1, [sp, #12]
 800595a:	2b00      	cmp	r3, #0
 800595c:	bfbb      	ittet	lt
 800595e:	425b      	neglt	r3, r3
 8005960:	f042 0202 	orrlt.w	r2, r2, #2
 8005964:	9307      	strge	r3, [sp, #28]
 8005966:	9307      	strlt	r3, [sp, #28]
 8005968:	bfb8      	it	lt
 800596a:	9204      	strlt	r2, [sp, #16]
 800596c:	7823      	ldrb	r3, [r4, #0]
 800596e:	2b2e      	cmp	r3, #46	@ 0x2e
 8005970:	d10a      	bne.n	8005988 <_svfiprintf_r+0x130>
 8005972:	7863      	ldrb	r3, [r4, #1]
 8005974:	2b2a      	cmp	r3, #42	@ 0x2a
 8005976:	d132      	bne.n	80059de <_svfiprintf_r+0x186>
 8005978:	9b03      	ldr	r3, [sp, #12]
 800597a:	1d1a      	adds	r2, r3, #4
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	9203      	str	r2, [sp, #12]
 8005980:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005984:	3402      	adds	r4, #2
 8005986:	9305      	str	r3, [sp, #20]
 8005988:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005a4c <_svfiprintf_r+0x1f4>
 800598c:	7821      	ldrb	r1, [r4, #0]
 800598e:	2203      	movs	r2, #3
 8005990:	4650      	mov	r0, sl
 8005992:	f7fa fc25 	bl	80001e0 <memchr>
 8005996:	b138      	cbz	r0, 80059a8 <_svfiprintf_r+0x150>
 8005998:	9b04      	ldr	r3, [sp, #16]
 800599a:	eba0 000a 	sub.w	r0, r0, sl
 800599e:	2240      	movs	r2, #64	@ 0x40
 80059a0:	4082      	lsls	r2, r0
 80059a2:	4313      	orrs	r3, r2
 80059a4:	3401      	adds	r4, #1
 80059a6:	9304      	str	r3, [sp, #16]
 80059a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059ac:	4824      	ldr	r0, [pc, #144]	@ (8005a40 <_svfiprintf_r+0x1e8>)
 80059ae:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80059b2:	2206      	movs	r2, #6
 80059b4:	f7fa fc14 	bl	80001e0 <memchr>
 80059b8:	2800      	cmp	r0, #0
 80059ba:	d036      	beq.n	8005a2a <_svfiprintf_r+0x1d2>
 80059bc:	4b21      	ldr	r3, [pc, #132]	@ (8005a44 <_svfiprintf_r+0x1ec>)
 80059be:	bb1b      	cbnz	r3, 8005a08 <_svfiprintf_r+0x1b0>
 80059c0:	9b03      	ldr	r3, [sp, #12]
 80059c2:	3307      	adds	r3, #7
 80059c4:	f023 0307 	bic.w	r3, r3, #7
 80059c8:	3308      	adds	r3, #8
 80059ca:	9303      	str	r3, [sp, #12]
 80059cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80059ce:	4433      	add	r3, r6
 80059d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80059d2:	e76a      	b.n	80058aa <_svfiprintf_r+0x52>
 80059d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80059d8:	460c      	mov	r4, r1
 80059da:	2001      	movs	r0, #1
 80059dc:	e7a8      	b.n	8005930 <_svfiprintf_r+0xd8>
 80059de:	2300      	movs	r3, #0
 80059e0:	3401      	adds	r4, #1
 80059e2:	9305      	str	r3, [sp, #20]
 80059e4:	4619      	mov	r1, r3
 80059e6:	f04f 0c0a 	mov.w	ip, #10
 80059ea:	4620      	mov	r0, r4
 80059ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80059f0:	3a30      	subs	r2, #48	@ 0x30
 80059f2:	2a09      	cmp	r2, #9
 80059f4:	d903      	bls.n	80059fe <_svfiprintf_r+0x1a6>
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d0c6      	beq.n	8005988 <_svfiprintf_r+0x130>
 80059fa:	9105      	str	r1, [sp, #20]
 80059fc:	e7c4      	b.n	8005988 <_svfiprintf_r+0x130>
 80059fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a02:	4604      	mov	r4, r0
 8005a04:	2301      	movs	r3, #1
 8005a06:	e7f0      	b.n	80059ea <_svfiprintf_r+0x192>
 8005a08:	ab03      	add	r3, sp, #12
 8005a0a:	9300      	str	r3, [sp, #0]
 8005a0c:	462a      	mov	r2, r5
 8005a0e:	4b0e      	ldr	r3, [pc, #56]	@ (8005a48 <_svfiprintf_r+0x1f0>)
 8005a10:	a904      	add	r1, sp, #16
 8005a12:	4638      	mov	r0, r7
 8005a14:	f3af 8000 	nop.w
 8005a18:	1c42      	adds	r2, r0, #1
 8005a1a:	4606      	mov	r6, r0
 8005a1c:	d1d6      	bne.n	80059cc <_svfiprintf_r+0x174>
 8005a1e:	89ab      	ldrh	r3, [r5, #12]
 8005a20:	065b      	lsls	r3, r3, #25
 8005a22:	f53f af2d 	bmi.w	8005880 <_svfiprintf_r+0x28>
 8005a26:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005a28:	e72c      	b.n	8005884 <_svfiprintf_r+0x2c>
 8005a2a:	ab03      	add	r3, sp, #12
 8005a2c:	9300      	str	r3, [sp, #0]
 8005a2e:	462a      	mov	r2, r5
 8005a30:	4b05      	ldr	r3, [pc, #20]	@ (8005a48 <_svfiprintf_r+0x1f0>)
 8005a32:	a904      	add	r1, sp, #16
 8005a34:	4638      	mov	r0, r7
 8005a36:	f000 f879 	bl	8005b2c <_printf_i>
 8005a3a:	e7ed      	b.n	8005a18 <_svfiprintf_r+0x1c0>
 8005a3c:	08005f08 	.word	0x08005f08
 8005a40:	08005f12 	.word	0x08005f12
 8005a44:	00000000 	.word	0x00000000
 8005a48:	080057a1 	.word	0x080057a1
 8005a4c:	08005f0e 	.word	0x08005f0e

08005a50 <_printf_common>:
 8005a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a54:	4616      	mov	r6, r2
 8005a56:	4698      	mov	r8, r3
 8005a58:	688a      	ldr	r2, [r1, #8]
 8005a5a:	690b      	ldr	r3, [r1, #16]
 8005a5c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005a60:	4293      	cmp	r3, r2
 8005a62:	bfb8      	it	lt
 8005a64:	4613      	movlt	r3, r2
 8005a66:	6033      	str	r3, [r6, #0]
 8005a68:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005a6c:	4607      	mov	r7, r0
 8005a6e:	460c      	mov	r4, r1
 8005a70:	b10a      	cbz	r2, 8005a76 <_printf_common+0x26>
 8005a72:	3301      	adds	r3, #1
 8005a74:	6033      	str	r3, [r6, #0]
 8005a76:	6823      	ldr	r3, [r4, #0]
 8005a78:	0699      	lsls	r1, r3, #26
 8005a7a:	bf42      	ittt	mi
 8005a7c:	6833      	ldrmi	r3, [r6, #0]
 8005a7e:	3302      	addmi	r3, #2
 8005a80:	6033      	strmi	r3, [r6, #0]
 8005a82:	6825      	ldr	r5, [r4, #0]
 8005a84:	f015 0506 	ands.w	r5, r5, #6
 8005a88:	d106      	bne.n	8005a98 <_printf_common+0x48>
 8005a8a:	f104 0a19 	add.w	sl, r4, #25
 8005a8e:	68e3      	ldr	r3, [r4, #12]
 8005a90:	6832      	ldr	r2, [r6, #0]
 8005a92:	1a9b      	subs	r3, r3, r2
 8005a94:	42ab      	cmp	r3, r5
 8005a96:	dc26      	bgt.n	8005ae6 <_printf_common+0x96>
 8005a98:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005a9c:	6822      	ldr	r2, [r4, #0]
 8005a9e:	3b00      	subs	r3, #0
 8005aa0:	bf18      	it	ne
 8005aa2:	2301      	movne	r3, #1
 8005aa4:	0692      	lsls	r2, r2, #26
 8005aa6:	d42b      	bmi.n	8005b00 <_printf_common+0xb0>
 8005aa8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005aac:	4641      	mov	r1, r8
 8005aae:	4638      	mov	r0, r7
 8005ab0:	47c8      	blx	r9
 8005ab2:	3001      	adds	r0, #1
 8005ab4:	d01e      	beq.n	8005af4 <_printf_common+0xa4>
 8005ab6:	6823      	ldr	r3, [r4, #0]
 8005ab8:	6922      	ldr	r2, [r4, #16]
 8005aba:	f003 0306 	and.w	r3, r3, #6
 8005abe:	2b04      	cmp	r3, #4
 8005ac0:	bf02      	ittt	eq
 8005ac2:	68e5      	ldreq	r5, [r4, #12]
 8005ac4:	6833      	ldreq	r3, [r6, #0]
 8005ac6:	1aed      	subeq	r5, r5, r3
 8005ac8:	68a3      	ldr	r3, [r4, #8]
 8005aca:	bf0c      	ite	eq
 8005acc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ad0:	2500      	movne	r5, #0
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	bfc4      	itt	gt
 8005ad6:	1a9b      	subgt	r3, r3, r2
 8005ad8:	18ed      	addgt	r5, r5, r3
 8005ada:	2600      	movs	r6, #0
 8005adc:	341a      	adds	r4, #26
 8005ade:	42b5      	cmp	r5, r6
 8005ae0:	d11a      	bne.n	8005b18 <_printf_common+0xc8>
 8005ae2:	2000      	movs	r0, #0
 8005ae4:	e008      	b.n	8005af8 <_printf_common+0xa8>
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	4652      	mov	r2, sl
 8005aea:	4641      	mov	r1, r8
 8005aec:	4638      	mov	r0, r7
 8005aee:	47c8      	blx	r9
 8005af0:	3001      	adds	r0, #1
 8005af2:	d103      	bne.n	8005afc <_printf_common+0xac>
 8005af4:	f04f 30ff 	mov.w	r0, #4294967295
 8005af8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005afc:	3501      	adds	r5, #1
 8005afe:	e7c6      	b.n	8005a8e <_printf_common+0x3e>
 8005b00:	18e1      	adds	r1, r4, r3
 8005b02:	1c5a      	adds	r2, r3, #1
 8005b04:	2030      	movs	r0, #48	@ 0x30
 8005b06:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005b0a:	4422      	add	r2, r4
 8005b0c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005b10:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005b14:	3302      	adds	r3, #2
 8005b16:	e7c7      	b.n	8005aa8 <_printf_common+0x58>
 8005b18:	2301      	movs	r3, #1
 8005b1a:	4622      	mov	r2, r4
 8005b1c:	4641      	mov	r1, r8
 8005b1e:	4638      	mov	r0, r7
 8005b20:	47c8      	blx	r9
 8005b22:	3001      	adds	r0, #1
 8005b24:	d0e6      	beq.n	8005af4 <_printf_common+0xa4>
 8005b26:	3601      	adds	r6, #1
 8005b28:	e7d9      	b.n	8005ade <_printf_common+0x8e>
	...

08005b2c <_printf_i>:
 8005b2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b30:	7e0f      	ldrb	r7, [r1, #24]
 8005b32:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005b34:	2f78      	cmp	r7, #120	@ 0x78
 8005b36:	4691      	mov	r9, r2
 8005b38:	4680      	mov	r8, r0
 8005b3a:	460c      	mov	r4, r1
 8005b3c:	469a      	mov	sl, r3
 8005b3e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005b42:	d807      	bhi.n	8005b54 <_printf_i+0x28>
 8005b44:	2f62      	cmp	r7, #98	@ 0x62
 8005b46:	d80a      	bhi.n	8005b5e <_printf_i+0x32>
 8005b48:	2f00      	cmp	r7, #0
 8005b4a:	f000 80d2 	beq.w	8005cf2 <_printf_i+0x1c6>
 8005b4e:	2f58      	cmp	r7, #88	@ 0x58
 8005b50:	f000 80b9 	beq.w	8005cc6 <_printf_i+0x19a>
 8005b54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005b58:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005b5c:	e03a      	b.n	8005bd4 <_printf_i+0xa8>
 8005b5e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005b62:	2b15      	cmp	r3, #21
 8005b64:	d8f6      	bhi.n	8005b54 <_printf_i+0x28>
 8005b66:	a101      	add	r1, pc, #4	@ (adr r1, 8005b6c <_printf_i+0x40>)
 8005b68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b6c:	08005bc5 	.word	0x08005bc5
 8005b70:	08005bd9 	.word	0x08005bd9
 8005b74:	08005b55 	.word	0x08005b55
 8005b78:	08005b55 	.word	0x08005b55
 8005b7c:	08005b55 	.word	0x08005b55
 8005b80:	08005b55 	.word	0x08005b55
 8005b84:	08005bd9 	.word	0x08005bd9
 8005b88:	08005b55 	.word	0x08005b55
 8005b8c:	08005b55 	.word	0x08005b55
 8005b90:	08005b55 	.word	0x08005b55
 8005b94:	08005b55 	.word	0x08005b55
 8005b98:	08005cd9 	.word	0x08005cd9
 8005b9c:	08005c03 	.word	0x08005c03
 8005ba0:	08005c93 	.word	0x08005c93
 8005ba4:	08005b55 	.word	0x08005b55
 8005ba8:	08005b55 	.word	0x08005b55
 8005bac:	08005cfb 	.word	0x08005cfb
 8005bb0:	08005b55 	.word	0x08005b55
 8005bb4:	08005c03 	.word	0x08005c03
 8005bb8:	08005b55 	.word	0x08005b55
 8005bbc:	08005b55 	.word	0x08005b55
 8005bc0:	08005c9b 	.word	0x08005c9b
 8005bc4:	6833      	ldr	r3, [r6, #0]
 8005bc6:	1d1a      	adds	r2, r3, #4
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	6032      	str	r2, [r6, #0]
 8005bcc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005bd0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e09d      	b.n	8005d14 <_printf_i+0x1e8>
 8005bd8:	6833      	ldr	r3, [r6, #0]
 8005bda:	6820      	ldr	r0, [r4, #0]
 8005bdc:	1d19      	adds	r1, r3, #4
 8005bde:	6031      	str	r1, [r6, #0]
 8005be0:	0606      	lsls	r6, r0, #24
 8005be2:	d501      	bpl.n	8005be8 <_printf_i+0xbc>
 8005be4:	681d      	ldr	r5, [r3, #0]
 8005be6:	e003      	b.n	8005bf0 <_printf_i+0xc4>
 8005be8:	0645      	lsls	r5, r0, #25
 8005bea:	d5fb      	bpl.n	8005be4 <_printf_i+0xb8>
 8005bec:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005bf0:	2d00      	cmp	r5, #0
 8005bf2:	da03      	bge.n	8005bfc <_printf_i+0xd0>
 8005bf4:	232d      	movs	r3, #45	@ 0x2d
 8005bf6:	426d      	negs	r5, r5
 8005bf8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005bfc:	4859      	ldr	r0, [pc, #356]	@ (8005d64 <_printf_i+0x238>)
 8005bfe:	230a      	movs	r3, #10
 8005c00:	e011      	b.n	8005c26 <_printf_i+0xfa>
 8005c02:	6821      	ldr	r1, [r4, #0]
 8005c04:	6833      	ldr	r3, [r6, #0]
 8005c06:	0608      	lsls	r0, r1, #24
 8005c08:	f853 5b04 	ldr.w	r5, [r3], #4
 8005c0c:	d402      	bmi.n	8005c14 <_printf_i+0xe8>
 8005c0e:	0649      	lsls	r1, r1, #25
 8005c10:	bf48      	it	mi
 8005c12:	b2ad      	uxthmi	r5, r5
 8005c14:	2f6f      	cmp	r7, #111	@ 0x6f
 8005c16:	4853      	ldr	r0, [pc, #332]	@ (8005d64 <_printf_i+0x238>)
 8005c18:	6033      	str	r3, [r6, #0]
 8005c1a:	bf14      	ite	ne
 8005c1c:	230a      	movne	r3, #10
 8005c1e:	2308      	moveq	r3, #8
 8005c20:	2100      	movs	r1, #0
 8005c22:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005c26:	6866      	ldr	r6, [r4, #4]
 8005c28:	60a6      	str	r6, [r4, #8]
 8005c2a:	2e00      	cmp	r6, #0
 8005c2c:	bfa2      	ittt	ge
 8005c2e:	6821      	ldrge	r1, [r4, #0]
 8005c30:	f021 0104 	bicge.w	r1, r1, #4
 8005c34:	6021      	strge	r1, [r4, #0]
 8005c36:	b90d      	cbnz	r5, 8005c3c <_printf_i+0x110>
 8005c38:	2e00      	cmp	r6, #0
 8005c3a:	d04b      	beq.n	8005cd4 <_printf_i+0x1a8>
 8005c3c:	4616      	mov	r6, r2
 8005c3e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005c42:	fb03 5711 	mls	r7, r3, r1, r5
 8005c46:	5dc7      	ldrb	r7, [r0, r7]
 8005c48:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005c4c:	462f      	mov	r7, r5
 8005c4e:	42bb      	cmp	r3, r7
 8005c50:	460d      	mov	r5, r1
 8005c52:	d9f4      	bls.n	8005c3e <_printf_i+0x112>
 8005c54:	2b08      	cmp	r3, #8
 8005c56:	d10b      	bne.n	8005c70 <_printf_i+0x144>
 8005c58:	6823      	ldr	r3, [r4, #0]
 8005c5a:	07df      	lsls	r7, r3, #31
 8005c5c:	d508      	bpl.n	8005c70 <_printf_i+0x144>
 8005c5e:	6923      	ldr	r3, [r4, #16]
 8005c60:	6861      	ldr	r1, [r4, #4]
 8005c62:	4299      	cmp	r1, r3
 8005c64:	bfde      	ittt	le
 8005c66:	2330      	movle	r3, #48	@ 0x30
 8005c68:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005c6c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005c70:	1b92      	subs	r2, r2, r6
 8005c72:	6122      	str	r2, [r4, #16]
 8005c74:	f8cd a000 	str.w	sl, [sp]
 8005c78:	464b      	mov	r3, r9
 8005c7a:	aa03      	add	r2, sp, #12
 8005c7c:	4621      	mov	r1, r4
 8005c7e:	4640      	mov	r0, r8
 8005c80:	f7ff fee6 	bl	8005a50 <_printf_common>
 8005c84:	3001      	adds	r0, #1
 8005c86:	d14a      	bne.n	8005d1e <_printf_i+0x1f2>
 8005c88:	f04f 30ff 	mov.w	r0, #4294967295
 8005c8c:	b004      	add	sp, #16
 8005c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c92:	6823      	ldr	r3, [r4, #0]
 8005c94:	f043 0320 	orr.w	r3, r3, #32
 8005c98:	6023      	str	r3, [r4, #0]
 8005c9a:	4833      	ldr	r0, [pc, #204]	@ (8005d68 <_printf_i+0x23c>)
 8005c9c:	2778      	movs	r7, #120	@ 0x78
 8005c9e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005ca2:	6823      	ldr	r3, [r4, #0]
 8005ca4:	6831      	ldr	r1, [r6, #0]
 8005ca6:	061f      	lsls	r7, r3, #24
 8005ca8:	f851 5b04 	ldr.w	r5, [r1], #4
 8005cac:	d402      	bmi.n	8005cb4 <_printf_i+0x188>
 8005cae:	065f      	lsls	r7, r3, #25
 8005cb0:	bf48      	it	mi
 8005cb2:	b2ad      	uxthmi	r5, r5
 8005cb4:	6031      	str	r1, [r6, #0]
 8005cb6:	07d9      	lsls	r1, r3, #31
 8005cb8:	bf44      	itt	mi
 8005cba:	f043 0320 	orrmi.w	r3, r3, #32
 8005cbe:	6023      	strmi	r3, [r4, #0]
 8005cc0:	b11d      	cbz	r5, 8005cca <_printf_i+0x19e>
 8005cc2:	2310      	movs	r3, #16
 8005cc4:	e7ac      	b.n	8005c20 <_printf_i+0xf4>
 8005cc6:	4827      	ldr	r0, [pc, #156]	@ (8005d64 <_printf_i+0x238>)
 8005cc8:	e7e9      	b.n	8005c9e <_printf_i+0x172>
 8005cca:	6823      	ldr	r3, [r4, #0]
 8005ccc:	f023 0320 	bic.w	r3, r3, #32
 8005cd0:	6023      	str	r3, [r4, #0]
 8005cd2:	e7f6      	b.n	8005cc2 <_printf_i+0x196>
 8005cd4:	4616      	mov	r6, r2
 8005cd6:	e7bd      	b.n	8005c54 <_printf_i+0x128>
 8005cd8:	6833      	ldr	r3, [r6, #0]
 8005cda:	6825      	ldr	r5, [r4, #0]
 8005cdc:	6961      	ldr	r1, [r4, #20]
 8005cde:	1d18      	adds	r0, r3, #4
 8005ce0:	6030      	str	r0, [r6, #0]
 8005ce2:	062e      	lsls	r6, r5, #24
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	d501      	bpl.n	8005cec <_printf_i+0x1c0>
 8005ce8:	6019      	str	r1, [r3, #0]
 8005cea:	e002      	b.n	8005cf2 <_printf_i+0x1c6>
 8005cec:	0668      	lsls	r0, r5, #25
 8005cee:	d5fb      	bpl.n	8005ce8 <_printf_i+0x1bc>
 8005cf0:	8019      	strh	r1, [r3, #0]
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	6123      	str	r3, [r4, #16]
 8005cf6:	4616      	mov	r6, r2
 8005cf8:	e7bc      	b.n	8005c74 <_printf_i+0x148>
 8005cfa:	6833      	ldr	r3, [r6, #0]
 8005cfc:	1d1a      	adds	r2, r3, #4
 8005cfe:	6032      	str	r2, [r6, #0]
 8005d00:	681e      	ldr	r6, [r3, #0]
 8005d02:	6862      	ldr	r2, [r4, #4]
 8005d04:	2100      	movs	r1, #0
 8005d06:	4630      	mov	r0, r6
 8005d08:	f7fa fa6a 	bl	80001e0 <memchr>
 8005d0c:	b108      	cbz	r0, 8005d12 <_printf_i+0x1e6>
 8005d0e:	1b80      	subs	r0, r0, r6
 8005d10:	6060      	str	r0, [r4, #4]
 8005d12:	6863      	ldr	r3, [r4, #4]
 8005d14:	6123      	str	r3, [r4, #16]
 8005d16:	2300      	movs	r3, #0
 8005d18:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d1c:	e7aa      	b.n	8005c74 <_printf_i+0x148>
 8005d1e:	6923      	ldr	r3, [r4, #16]
 8005d20:	4632      	mov	r2, r6
 8005d22:	4649      	mov	r1, r9
 8005d24:	4640      	mov	r0, r8
 8005d26:	47d0      	blx	sl
 8005d28:	3001      	adds	r0, #1
 8005d2a:	d0ad      	beq.n	8005c88 <_printf_i+0x15c>
 8005d2c:	6823      	ldr	r3, [r4, #0]
 8005d2e:	079b      	lsls	r3, r3, #30
 8005d30:	d413      	bmi.n	8005d5a <_printf_i+0x22e>
 8005d32:	68e0      	ldr	r0, [r4, #12]
 8005d34:	9b03      	ldr	r3, [sp, #12]
 8005d36:	4298      	cmp	r0, r3
 8005d38:	bfb8      	it	lt
 8005d3a:	4618      	movlt	r0, r3
 8005d3c:	e7a6      	b.n	8005c8c <_printf_i+0x160>
 8005d3e:	2301      	movs	r3, #1
 8005d40:	4632      	mov	r2, r6
 8005d42:	4649      	mov	r1, r9
 8005d44:	4640      	mov	r0, r8
 8005d46:	47d0      	blx	sl
 8005d48:	3001      	adds	r0, #1
 8005d4a:	d09d      	beq.n	8005c88 <_printf_i+0x15c>
 8005d4c:	3501      	adds	r5, #1
 8005d4e:	68e3      	ldr	r3, [r4, #12]
 8005d50:	9903      	ldr	r1, [sp, #12]
 8005d52:	1a5b      	subs	r3, r3, r1
 8005d54:	42ab      	cmp	r3, r5
 8005d56:	dcf2      	bgt.n	8005d3e <_printf_i+0x212>
 8005d58:	e7eb      	b.n	8005d32 <_printf_i+0x206>
 8005d5a:	2500      	movs	r5, #0
 8005d5c:	f104 0619 	add.w	r6, r4, #25
 8005d60:	e7f5      	b.n	8005d4e <_printf_i+0x222>
 8005d62:	bf00      	nop
 8005d64:	08005f19 	.word	0x08005f19
 8005d68:	08005f2a 	.word	0x08005f2a

08005d6c <memmove>:
 8005d6c:	4288      	cmp	r0, r1
 8005d6e:	b510      	push	{r4, lr}
 8005d70:	eb01 0402 	add.w	r4, r1, r2
 8005d74:	d902      	bls.n	8005d7c <memmove+0x10>
 8005d76:	4284      	cmp	r4, r0
 8005d78:	4623      	mov	r3, r4
 8005d7a:	d807      	bhi.n	8005d8c <memmove+0x20>
 8005d7c:	1e43      	subs	r3, r0, #1
 8005d7e:	42a1      	cmp	r1, r4
 8005d80:	d008      	beq.n	8005d94 <memmove+0x28>
 8005d82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d86:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005d8a:	e7f8      	b.n	8005d7e <memmove+0x12>
 8005d8c:	4402      	add	r2, r0
 8005d8e:	4601      	mov	r1, r0
 8005d90:	428a      	cmp	r2, r1
 8005d92:	d100      	bne.n	8005d96 <memmove+0x2a>
 8005d94:	bd10      	pop	{r4, pc}
 8005d96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005d9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005d9e:	e7f7      	b.n	8005d90 <memmove+0x24>

08005da0 <_sbrk_r>:
 8005da0:	b538      	push	{r3, r4, r5, lr}
 8005da2:	4d06      	ldr	r5, [pc, #24]	@ (8005dbc <_sbrk_r+0x1c>)
 8005da4:	2300      	movs	r3, #0
 8005da6:	4604      	mov	r4, r0
 8005da8:	4608      	mov	r0, r1
 8005daa:	602b      	str	r3, [r5, #0]
 8005dac:	f7fb fc70 	bl	8001690 <_sbrk>
 8005db0:	1c43      	adds	r3, r0, #1
 8005db2:	d102      	bne.n	8005dba <_sbrk_r+0x1a>
 8005db4:	682b      	ldr	r3, [r5, #0]
 8005db6:	b103      	cbz	r3, 8005dba <_sbrk_r+0x1a>
 8005db8:	6023      	str	r3, [r4, #0]
 8005dba:	bd38      	pop	{r3, r4, r5, pc}
 8005dbc:	20000adc 	.word	0x20000adc

08005dc0 <memcpy>:
 8005dc0:	440a      	add	r2, r1
 8005dc2:	4291      	cmp	r1, r2
 8005dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8005dc8:	d100      	bne.n	8005dcc <memcpy+0xc>
 8005dca:	4770      	bx	lr
 8005dcc:	b510      	push	{r4, lr}
 8005dce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005dd2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005dd6:	4291      	cmp	r1, r2
 8005dd8:	d1f9      	bne.n	8005dce <memcpy+0xe>
 8005dda:	bd10      	pop	{r4, pc}

08005ddc <_realloc_r>:
 8005ddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005de0:	4680      	mov	r8, r0
 8005de2:	4615      	mov	r5, r2
 8005de4:	460c      	mov	r4, r1
 8005de6:	b921      	cbnz	r1, 8005df2 <_realloc_r+0x16>
 8005de8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005dec:	4611      	mov	r1, r2
 8005dee:	f7ff bc4b 	b.w	8005688 <_malloc_r>
 8005df2:	b92a      	cbnz	r2, 8005e00 <_realloc_r+0x24>
 8005df4:	f7ff fbdc 	bl	80055b0 <_free_r>
 8005df8:	2400      	movs	r4, #0
 8005dfa:	4620      	mov	r0, r4
 8005dfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e00:	f000 f81a 	bl	8005e38 <_malloc_usable_size_r>
 8005e04:	4285      	cmp	r5, r0
 8005e06:	4606      	mov	r6, r0
 8005e08:	d802      	bhi.n	8005e10 <_realloc_r+0x34>
 8005e0a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005e0e:	d8f4      	bhi.n	8005dfa <_realloc_r+0x1e>
 8005e10:	4629      	mov	r1, r5
 8005e12:	4640      	mov	r0, r8
 8005e14:	f7ff fc38 	bl	8005688 <_malloc_r>
 8005e18:	4607      	mov	r7, r0
 8005e1a:	2800      	cmp	r0, #0
 8005e1c:	d0ec      	beq.n	8005df8 <_realloc_r+0x1c>
 8005e1e:	42b5      	cmp	r5, r6
 8005e20:	462a      	mov	r2, r5
 8005e22:	4621      	mov	r1, r4
 8005e24:	bf28      	it	cs
 8005e26:	4632      	movcs	r2, r6
 8005e28:	f7ff ffca 	bl	8005dc0 <memcpy>
 8005e2c:	4621      	mov	r1, r4
 8005e2e:	4640      	mov	r0, r8
 8005e30:	f7ff fbbe 	bl	80055b0 <_free_r>
 8005e34:	463c      	mov	r4, r7
 8005e36:	e7e0      	b.n	8005dfa <_realloc_r+0x1e>

08005e38 <_malloc_usable_size_r>:
 8005e38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e3c:	1f18      	subs	r0, r3, #4
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	bfbc      	itt	lt
 8005e42:	580b      	ldrlt	r3, [r1, r0]
 8005e44:	18c0      	addlt	r0, r0, r3
 8005e46:	4770      	bx	lr

08005e48 <_init>:
 8005e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e4a:	bf00      	nop
 8005e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e4e:	bc08      	pop	{r3}
 8005e50:	469e      	mov	lr, r3
 8005e52:	4770      	bx	lr

08005e54 <_fini>:
 8005e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e56:	bf00      	nop
 8005e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e5a:	bc08      	pop	{r3}
 8005e5c:	469e      	mov	lr, r3
 8005e5e:	4770      	bx	lr
